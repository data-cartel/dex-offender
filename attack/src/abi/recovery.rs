pub use recovery::*;
/// This module was auto-generated with ethers-rs Abigen.
/// More information at: <https://github.com/gakonst/ethers-rs>
#[allow(
    clippy::enum_variant_names,
    clippy::too_many_arguments,
    clippy::upper_case_acronyms,
    clippy::type_complexity,
    dead_code,
    non_camel_case_types
)]
pub mod recovery {
    #[allow(deprecated)]
    fn __abi() -> ::ethers::core::abi::Abi {
        ::ethers::core::abi::ethabi::Contract {
            constructor: ::core::option::Option::None,
            functions: ::core::convert::From::from([(
                ::std::borrow::ToOwned::to_owned("generateToken"),
                ::std::vec![::ethers::core::abi::ethabi::Function {
                    name: ::std::borrow::ToOwned::to_owned("generateToken"),
                    inputs: ::std::vec![
                        ::ethers::core::abi::ethabi::Param {
                            name: ::std::borrow::ToOwned::to_owned("_name"),
                            kind:
                                ::ethers::core::abi::ethabi::ParamType::String,
                            internal_type: ::core::option::Option::Some(
                                ::std::borrow::ToOwned::to_owned("string"),
                            ),
                        },
                        ::ethers::core::abi::ethabi::Param {
                            name: ::std::borrow::ToOwned::to_owned(
                                "_initialSupply"
                            ),
                            kind: ::ethers::core::abi::ethabi::ParamType::Uint(
                                256usize,
                            ),
                            internal_type: ::core::option::Option::Some(
                                ::std::borrow::ToOwned::to_owned("uint256"),
                            ),
                        },
                    ],
                    outputs: ::std::vec![],
                    constant: ::core::option::Option::None,
                    state_mutability:
                        ::ethers::core::abi::ethabi::StateMutability::NonPayable,
                },],
            )]),
            events: ::std::collections::BTreeMap::new(),
            errors: ::std::collections::BTreeMap::new(),
            receive: false,
            fallback: false,
        }
    }
    ///The parsed JSON ABI of the contract.
    pub static RECOVERY_ABI: ::ethers::contract::Lazy<
        ::ethers::core::abi::Abi,
    > = ::ethers::contract::Lazy::new(__abi);
    #[rustfmt::skip]
    const __BYTECODE: &[u8] = b"`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[Pa\t\x0E\x80a\0 `\09`\0\xF3\xFE`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[P`\x046\x10a\0+W`\x005`\xE0\x1C\x80c8\x94\xE5\x16\x14a\x000W[`\0\x80\xFD[a\0Ca\0>6`\x04a\0\xBEV[a\0EV[\0[\x813\x82`@Qa\0T\x90a\0\x82V[a\0`\x93\x92\x91\x90a\x01\x91V[`@Q\x80\x91\x03\x90`\0\xF0\x80\x15\x80\x15a\0|W=`\0\x80>=`\0\xFD[PPPPV[a\x06\xB7\x80a\x02\"\x839\x01\x90V[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`A`\x04R`$`\0\xFD[`\0\x80`@\x83\x85\x03\x12\x15a\0\xD1W`\0\x80\xFD[\x825g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a\0\xE9W`\0\x80\xFD[\x81\x85\x01\x91P\x85`\x1F\x83\x01\x12a\0\xFDW`\0\x80\xFD[\x815\x81\x81\x11\x15a\x01\x0FWa\x01\x0Fa\0\x8FV[`@Q`\x1F\x82\x01\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x90\x81\x16`?\x01\x16\x81\x01\x90\x83\x82\x11\x81\x83\x10\x17\x15a\x01UWa\x01Ua\0\x8FV[\x81`@R\x82\x81R\x88` \x84\x87\x01\x01\x11\x15a\x01nW`\0\x80\xFD[\x82` \x86\x01` \x83\x017`\0` \x93\x82\x01\x84\x01R\x98\x96\x90\x91\x015\x96PPPPPPV[``\x81R`\0\x84Q\x80``\x84\x01R`\0[\x81\x81\x10\x15a\x01\xBFW` \x81\x88\x01\x81\x01Q`\x80\x86\x84\x01\x01R\x01a\x01\xA2V[P`\0`\x80\x82\x85\x01\x01R`\x80\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0`\x1F\x83\x01\x16\x84\x01\x01\x91PPs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x84\x16` \x83\x01R\x82`@\x83\x01R\x94\x93PPPPV\xFE`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[P`@Qa\x06\xB78\x03\x80a\x06\xB7\x839\x81\x01`@\x81\x90Ra\0/\x91a\0\x8EV[`\0a\0;\x84\x82a\x01\xFAV[P`\x01`\x01`\xA0\x1B\x03\x90\x91\x16`\0\x90\x81R`\x01` R`@\x90 UPa\x02\xB9V[cNH{q`\xE0\x1B`\0R`A`\x04R`$`\0\xFD[\x80Q`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\0\x89W`\0\x80\xFD[\x91\x90PV[`\0\x80`\0``\x84\x86\x03\x12\x15a\0\xA3W`\0\x80\xFD[\x83Q`\x01`\x01`@\x1B\x03\x80\x82\x11\x15a\0\xBAW`\0\x80\xFD[\x81\x86\x01\x91P\x86`\x1F\x83\x01\x12a\0\xCEW`\0\x80\xFD[\x81Q\x81\x81\x11\x15a\0\xE0Wa\0\xE0a\0\\V[`@Q`\x1F\x82\x01`\x1F\x19\x90\x81\x16`?\x01\x16\x81\x01\x90\x83\x82\x11\x81\x83\x10\x17\x15a\x01\x08Wa\x01\x08a\0\\V[\x81`@R\x82\x81R` \x93P\x89\x84\x84\x87\x01\x01\x11\x15a\x01$W`\0\x80\xFD[`\0\x91P[\x82\x82\x10\x15a\x01FW\x84\x82\x01\x84\x01Q\x81\x83\x01\x85\x01R\x90\x83\x01\x90a\x01)V[`\0\x84\x84\x83\x01\x01R\x80\x97PPPPa\x01_\x81\x87\x01a\0rV[\x93PPP`@\x84\x01Q\x90P\x92P\x92P\x92V[`\x01\x81\x81\x1C\x90\x82\x16\x80a\x01\x85W`\x7F\x82\x16\x91P[` \x82\x10\x81\x03a\x01\xA5WcNH{q`\xE0\x1B`\0R`\"`\x04R`$`\0\xFD[P\x91\x90PV[`\x1F\x82\x11\x15a\x01\xF5W`\0\x81\x81R` \x81 `\x1F\x85\x01`\x05\x1C\x81\x01` \x86\x10\x15a\x01\xD2WP\x80[`\x1F\x85\x01`\x05\x1C\x82\x01\x91P[\x81\x81\x10\x15a\x01\xF1W\x82\x81U`\x01\x01a\x01\xDEV[PPP[PPPV[\x81Q`\x01`\x01`@\x1B\x03\x81\x11\x15a\x02\x13Wa\x02\x13a\0\\V[a\x02'\x81a\x02!\x84Ta\x01qV[\x84a\x01\xABV[` \x80`\x1F\x83\x11`\x01\x81\x14a\x02\\W`\0\x84\x15a\x02DWP\x85\x83\x01Q[`\0\x19`\x03\x86\x90\x1B\x1C\x19\x16`\x01\x85\x90\x1B\x17\x85Ua\x01\xF1V[`\0\x85\x81R` \x81 `\x1F\x19\x86\x16\x91[\x82\x81\x10\x15a\x02\x8BW\x88\x86\x01Q\x82U\x94\x84\x01\x94`\x01\x90\x91\x01\x90\x84\x01a\x02lV[P\x85\x82\x10\x15a\x02\xA9W\x87\x85\x01Q`\0\x19`\x03\x88\x90\x1B`\xF8\x16\x1C\x19\x16\x81U[PPPPP`\x01\x90\x81\x1B\x01\x90UPV[a\x03\xEF\x80a\x02\xC8`\09`\0\xF3\xFE`\x80`@R`\x046\x10a\0BW`\x005`\xE0\x1C\x80b\xF5]\x9D\x14a\0kW\x80c\x06\xFD\xDE\x03\x14a\0\x8DW\x80c'\xE25\xE3\x14a\0\xB8W\x80c\xA9\x05\x9C\xBB\x14a\0\xF3W`\0\x80\xFD[6a\0fWa\0R4`\na\x02UV[3`\0\x90\x81R`\x01` R`@\x90 \x81\x90U\0[`\0\x80\xFD[4\x80\x15a\0wW`\0\x80\xFD[Pa\0\x8Ba\0\x866`\x04a\x02\x97V[a\x01\x13V[\0[4\x80\x15a\0\x99W`\0\x80\xFD[Pa\0\xA2a\x01,V[`@Qa\0\xAF\x91\x90a\x02\xBBV[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\0\xC4W`\0\x80\xFD[Pa\0\xE5a\0\xD36`\x04a\x02\x97V[`\x01` R`\0\x90\x81R`@\x90 T\x81V[`@Q\x90\x81R` \x01a\0\xAFV[4\x80\x15a\0\xFFW`\0\x80\xFD[Pa\0\x8Ba\x01\x0E6`\x04a\x03'V[a\x01\xBAV[\x80s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\xFF[`\0\x80Ta\x019\x90a\x03SV[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\x01e\x90a\x03SV[\x80\x15a\x01\xB2W\x80`\x1F\x10a\x01\x87Wa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\x01\xB2V[\x82\x01\x91\x90`\0R` `\0 \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\x01\x95W\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x81V[3`\0\x90\x81R`\x01` R`@\x90 T\x81\x11\x15a\x01\xD6W`\0\x80\xFD[3`\0\x90\x81R`\x01` R`@\x90 Ta\x01\xF1\x90\x82\x90a\x03\xA6V[3`\0\x90\x81R`\x01` R`@\x80\x82 \x92\x90\x92Us\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x93\x90\x93\x16\x83R\x90\x91 UV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`\x11`\x04R`$`\0\xFD[\x80\x82\x02\x81\x15\x82\x82\x04\x84\x14\x17a\x02lWa\x02la\x02&V[\x92\x91PPV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x14a\x02\x94W`\0\x80\xFD[PV[`\0` \x82\x84\x03\x12\x15a\x02\xA9W`\0\x80\xFD[\x815a\x02\xB4\x81a\x02rV[\x93\x92PPPV[`\0` \x80\x83R\x83Q\x80\x82\x85\x01R`\0[\x81\x81\x10\x15a\x02\xE8W\x85\x81\x01\x83\x01Q\x85\x82\x01`@\x01R\x82\x01a\x02\xCCV[P`\0`@\x82\x86\x01\x01R`@\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0`\x1F\x83\x01\x16\x85\x01\x01\x92PPP\x92\x91PPV[`\0\x80`@\x83\x85\x03\x12\x15a\x03:W`\0\x80\xFD[\x825a\x03E\x81a\x02rV[\x94` \x93\x90\x93\x015\x93PPPV[`\x01\x81\x81\x1C\x90\x82\x16\x80a\x03gW`\x7F\x82\x16\x91P[` \x82\x10\x81\x03a\x03\xA0W\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`\"`\x04R`$`\0\xFD[P\x91\x90PV[\x81\x81\x03\x81\x81\x11\x15a\x02lWa\x02la\x02&V\xFE\xA2dipfsX\"\x12 \0\xF3\0\0\x8BO3\xAB\x14)z*:\xB2\xF41\x97\xAAA)_\x93\x15\xE3\xE4h.\xFC6\"\xE1\xC8dsolcC\0\x08\x15\x003\xA2dipfsX\"\x12 \xA3\xC2\x1F\xE9\xC4\xE5M\xD3:\x14\x1A\xC5\xB2k\xC9X\x87\xB3\xEF\xF1\xFBLY\xF6jq?\xC7\x86G\x7F\xD8dsolcC\0\x08\x15\x003";
    /// The bytecode of the contract.
    pub static RECOVERY_BYTECODE: ::ethers::core::types::Bytes =
        ::ethers::core::types::Bytes::from_static(__BYTECODE);
    #[rustfmt::skip]
    const __DEPLOYED_BYTECODE: &[u8] = b"`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[P`\x046\x10a\0+W`\x005`\xE0\x1C\x80c8\x94\xE5\x16\x14a\x000W[`\0\x80\xFD[a\0Ca\0>6`\x04a\0\xBEV[a\0EV[\0[\x813\x82`@Qa\0T\x90a\0\x82V[a\0`\x93\x92\x91\x90a\x01\x91V[`@Q\x80\x91\x03\x90`\0\xF0\x80\x15\x80\x15a\0|W=`\0\x80>=`\0\xFD[PPPPV[a\x06\xB7\x80a\x02\"\x839\x01\x90V[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`A`\x04R`$`\0\xFD[`\0\x80`@\x83\x85\x03\x12\x15a\0\xD1W`\0\x80\xFD[\x825g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a\0\xE9W`\0\x80\xFD[\x81\x85\x01\x91P\x85`\x1F\x83\x01\x12a\0\xFDW`\0\x80\xFD[\x815\x81\x81\x11\x15a\x01\x0FWa\x01\x0Fa\0\x8FV[`@Q`\x1F\x82\x01\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x90\x81\x16`?\x01\x16\x81\x01\x90\x83\x82\x11\x81\x83\x10\x17\x15a\x01UWa\x01Ua\0\x8FV[\x81`@R\x82\x81R\x88` \x84\x87\x01\x01\x11\x15a\x01nW`\0\x80\xFD[\x82` \x86\x01` \x83\x017`\0` \x93\x82\x01\x84\x01R\x98\x96\x90\x91\x015\x96PPPPPPV[``\x81R`\0\x84Q\x80``\x84\x01R`\0[\x81\x81\x10\x15a\x01\xBFW` \x81\x88\x01\x81\x01Q`\x80\x86\x84\x01\x01R\x01a\x01\xA2V[P`\0`\x80\x82\x85\x01\x01R`\x80\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0`\x1F\x83\x01\x16\x84\x01\x01\x91PPs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x84\x16` \x83\x01R\x82`@\x83\x01R\x94\x93PPPPV\xFE`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[P`@Qa\x06\xB78\x03\x80a\x06\xB7\x839\x81\x01`@\x81\x90Ra\0/\x91a\0\x8EV[`\0a\0;\x84\x82a\x01\xFAV[P`\x01`\x01`\xA0\x1B\x03\x90\x91\x16`\0\x90\x81R`\x01` R`@\x90 UPa\x02\xB9V[cNH{q`\xE0\x1B`\0R`A`\x04R`$`\0\xFD[\x80Q`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\0\x89W`\0\x80\xFD[\x91\x90PV[`\0\x80`\0``\x84\x86\x03\x12\x15a\0\xA3W`\0\x80\xFD[\x83Q`\x01`\x01`@\x1B\x03\x80\x82\x11\x15a\0\xBAW`\0\x80\xFD[\x81\x86\x01\x91P\x86`\x1F\x83\x01\x12a\0\xCEW`\0\x80\xFD[\x81Q\x81\x81\x11\x15a\0\xE0Wa\0\xE0a\0\\V[`@Q`\x1F\x82\x01`\x1F\x19\x90\x81\x16`?\x01\x16\x81\x01\x90\x83\x82\x11\x81\x83\x10\x17\x15a\x01\x08Wa\x01\x08a\0\\V[\x81`@R\x82\x81R` \x93P\x89\x84\x84\x87\x01\x01\x11\x15a\x01$W`\0\x80\xFD[`\0\x91P[\x82\x82\x10\x15a\x01FW\x84\x82\x01\x84\x01Q\x81\x83\x01\x85\x01R\x90\x83\x01\x90a\x01)V[`\0\x84\x84\x83\x01\x01R\x80\x97PPPPa\x01_\x81\x87\x01a\0rV[\x93PPP`@\x84\x01Q\x90P\x92P\x92P\x92V[`\x01\x81\x81\x1C\x90\x82\x16\x80a\x01\x85W`\x7F\x82\x16\x91P[` \x82\x10\x81\x03a\x01\xA5WcNH{q`\xE0\x1B`\0R`\"`\x04R`$`\0\xFD[P\x91\x90PV[`\x1F\x82\x11\x15a\x01\xF5W`\0\x81\x81R` \x81 `\x1F\x85\x01`\x05\x1C\x81\x01` \x86\x10\x15a\x01\xD2WP\x80[`\x1F\x85\x01`\x05\x1C\x82\x01\x91P[\x81\x81\x10\x15a\x01\xF1W\x82\x81U`\x01\x01a\x01\xDEV[PPP[PPPV[\x81Q`\x01`\x01`@\x1B\x03\x81\x11\x15a\x02\x13Wa\x02\x13a\0\\V[a\x02'\x81a\x02!\x84Ta\x01qV[\x84a\x01\xABV[` \x80`\x1F\x83\x11`\x01\x81\x14a\x02\\W`\0\x84\x15a\x02DWP\x85\x83\x01Q[`\0\x19`\x03\x86\x90\x1B\x1C\x19\x16`\x01\x85\x90\x1B\x17\x85Ua\x01\xF1V[`\0\x85\x81R` \x81 `\x1F\x19\x86\x16\x91[\x82\x81\x10\x15a\x02\x8BW\x88\x86\x01Q\x82U\x94\x84\x01\x94`\x01\x90\x91\x01\x90\x84\x01a\x02lV[P\x85\x82\x10\x15a\x02\xA9W\x87\x85\x01Q`\0\x19`\x03\x88\x90\x1B`\xF8\x16\x1C\x19\x16\x81U[PPPPP`\x01\x90\x81\x1B\x01\x90UPV[a\x03\xEF\x80a\x02\xC8`\09`\0\xF3\xFE`\x80`@R`\x046\x10a\0BW`\x005`\xE0\x1C\x80b\xF5]\x9D\x14a\0kW\x80c\x06\xFD\xDE\x03\x14a\0\x8DW\x80c'\xE25\xE3\x14a\0\xB8W\x80c\xA9\x05\x9C\xBB\x14a\0\xF3W`\0\x80\xFD[6a\0fWa\0R4`\na\x02UV[3`\0\x90\x81R`\x01` R`@\x90 \x81\x90U\0[`\0\x80\xFD[4\x80\x15a\0wW`\0\x80\xFD[Pa\0\x8Ba\0\x866`\x04a\x02\x97V[a\x01\x13V[\0[4\x80\x15a\0\x99W`\0\x80\xFD[Pa\0\xA2a\x01,V[`@Qa\0\xAF\x91\x90a\x02\xBBV[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\0\xC4W`\0\x80\xFD[Pa\0\xE5a\0\xD36`\x04a\x02\x97V[`\x01` R`\0\x90\x81R`@\x90 T\x81V[`@Q\x90\x81R` \x01a\0\xAFV[4\x80\x15a\0\xFFW`\0\x80\xFD[Pa\0\x8Ba\x01\x0E6`\x04a\x03'V[a\x01\xBAV[\x80s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\xFF[`\0\x80Ta\x019\x90a\x03SV[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\x01e\x90a\x03SV[\x80\x15a\x01\xB2W\x80`\x1F\x10a\x01\x87Wa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\x01\xB2V[\x82\x01\x91\x90`\0R` `\0 \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\x01\x95W\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x81V[3`\0\x90\x81R`\x01` R`@\x90 T\x81\x11\x15a\x01\xD6W`\0\x80\xFD[3`\0\x90\x81R`\x01` R`@\x90 Ta\x01\xF1\x90\x82\x90a\x03\xA6V[3`\0\x90\x81R`\x01` R`@\x80\x82 \x92\x90\x92Us\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x93\x90\x93\x16\x83R\x90\x91 UV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`\x11`\x04R`$`\0\xFD[\x80\x82\x02\x81\x15\x82\x82\x04\x84\x14\x17a\x02lWa\x02la\x02&V[\x92\x91PPV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x14a\x02\x94W`\0\x80\xFD[PV[`\0` \x82\x84\x03\x12\x15a\x02\xA9W`\0\x80\xFD[\x815a\x02\xB4\x81a\x02rV[\x93\x92PPPV[`\0` \x80\x83R\x83Q\x80\x82\x85\x01R`\0[\x81\x81\x10\x15a\x02\xE8W\x85\x81\x01\x83\x01Q\x85\x82\x01`@\x01R\x82\x01a\x02\xCCV[P`\0`@\x82\x86\x01\x01R`@\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0`\x1F\x83\x01\x16\x85\x01\x01\x92PPP\x92\x91PPV[`\0\x80`@\x83\x85\x03\x12\x15a\x03:W`\0\x80\xFD[\x825a\x03E\x81a\x02rV[\x94` \x93\x90\x93\x015\x93PPPV[`\x01\x81\x81\x1C\x90\x82\x16\x80a\x03gW`\x7F\x82\x16\x91P[` \x82\x10\x81\x03a\x03\xA0W\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`\"`\x04R`$`\0\xFD[P\x91\x90PV[\x81\x81\x03\x81\x81\x11\x15a\x02lWa\x02la\x02&V\xFE\xA2dipfsX\"\x12 \0\xF3\0\0\x8BO3\xAB\x14)z*:\xB2\xF41\x97\xAAA)_\x93\x15\xE3\xE4h.\xFC6\"\xE1\xC8dsolcC\0\x08\x15\x003\xA2dipfsX\"\x12 \xA3\xC2\x1F\xE9\xC4\xE5M\xD3:\x14\x1A\xC5\xB2k\xC9X\x87\xB3\xEF\xF1\xFBLY\xF6jq?\xC7\x86G\x7F\xD8dsolcC\0\x08\x15\x003";
    /// The deployed bytecode of the contract.
    pub static RECOVERY_DEPLOYED_BYTECODE: ::ethers::core::types::Bytes =
        ::ethers::core::types::Bytes::from_static(__DEPLOYED_BYTECODE);
    pub struct Recovery<M>(::ethers::contract::Contract<M>);
    impl<M> ::core::clone::Clone for Recovery<M> {
        fn clone(&self) -> Self { Self(::core::clone::Clone::clone(&self.0)) }
    }
    impl<M> ::core::ops::Deref for Recovery<M> {
        type Target = ::ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target { &self.0 }
    }
    impl<M> ::core::ops::DerefMut for Recovery<M> {
        fn deref_mut(&mut self) -> &mut Self::Target { &mut self.0 }
    }
    impl<M> ::core::fmt::Debug for Recovery<M> {
        fn fmt(
            &self,
            f: &mut ::core::fmt::Formatter<'_>,
        ) -> ::core::fmt::Result {
            f.debug_tuple(::core::stringify!(Recovery))
                .field(&self.address())
                .finish()
        }
    }
    impl<M: ::ethers::providers::Middleware> Recovery<M> {
        /// Creates a new contract instance with the
        /// specified `ethers` client at `address`.
        /// The contract derefs to a `ethers::Contract`
        /// object.
        pub fn new<T: Into<::ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            Self(::ethers::contract::Contract::new(
                address.into(),
                RECOVERY_ABI.clone(),
                client,
            ))
        }
        /// Constructs the general purpose `Deployer`
        /// instance based on the provided constructor
        /// arguments and sends it. Returns a new
        /// instance of a deployer that returns an instance
        /// of this contract after sending the transaction
        ///
        /// Notes:
        /// - If there are no constructor arguments, you
        ///   should pass `()` as the argument.
        /// - The default poll duration is 7 seconds.
        /// - The default number of confirmations is 1
        ///   block.
        ///
        ///
        /// # Example
        ///
        /// Generate contract bindings with `abigen!` and
        /// deploy a new contract instance.
        ///
        /// *Note*: this requires a `bytecode` and `abi`
        /// object in the `greeter.json` artifact.
        ///
        /// ```ignore
        /// # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {
        ///     abigen!(Greeter, "../greeter.json");
        ///
        ///    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();
        ///    let msg = greeter_contract.greet().call().await.unwrap();
        /// # }
        /// ```
        pub fn deploy<T: ::ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::core::result::Result<
            ::ethers::contract::builders::ContractDeployer<M, Self>,
            ::ethers::contract::ContractError<M>,
        > {
            let factory = ::ethers::contract::ContractFactory::new(
                RECOVERY_ABI.clone(),
                RECOVERY_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ::ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        ///Calls the contract's `generateToken`
        /// (0x3894e516) function
        pub fn generate_token(
            &self,
            name: ::std::string::String,
            initial_supply: ::ethers::core::types::U256,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([56, 148, 229, 22], (name, initial_supply))
                .expect("method not found (this should never happen)")
        }
    }
    impl<M: ::ethers::providers::Middleware>
        From<::ethers::contract::Contract<M>> for Recovery<M>
    {
        fn from(contract: ::ethers::contract::Contract<M>) -> Self {
            Self::new(contract.address(), contract.client())
        }
    }
    ///Container type for all input parameters for the
    /// `generateToken` function with signature
    /// `generateToken(string,uint256)` and selector
    /// `0x3894e516`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(name = "generateToken", abi = "generateToken(string,uint256)")]
    pub struct GenerateTokenCall {
        pub name: ::std::string::String,
        pub initial_supply: ::ethers::core::types::U256,
    }
}
