// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import "forge-std/Test.sol";
import "forge-std/console2.sol";
import "forge-std/Vm.sol";

contract GatekeeperOneClone {
    address public entrant;

    modifier gateOne() {
        require(msg.sender != tx.origin);
        _;
    }

    modifier gateTwo() {
        require(gasleft() % 8191 == 0);
        _;
    }

    modifier gateThree(bytes8 _gateKey) {
        require(uint32(uint64(_gateKey)) == uint16(uint64(_gateKey)), "GatekeeperOne: invalid gateThree part one");
        require(uint32(uint64(_gateKey)) != uint64(_gateKey), "GatekeeperOne: invalid gateThree part two");
        require(uint32(uint64(_gateKey)) == uint16(uint160(tx.origin)), "GatekeeperOne: invalid gateThree part three");
        _;
    }

    function enter(bytes8 _gateKey) public gateOne gateTwo gateThree(_gateKey) returns (bool) {
        entrant = tx.origin;
        return true;
    }
}

contract GatexploitTest is Test {
    address private _offender = 0xa0Ee7A142d267C1f36714E4a8F75612F20a79720;
    // bytes8 private _gateKey = 0x0000972000009720;
    bytes8 private _gateKey;
    GatekeeperOneClone private _target;
    // Gatexploit public exploit;

    function setUp() public {
        _gateKey = bytes8(0x0101010100000000 + uint16(uint160(_offender)));
        // _target = new GatekeeperOneClone();
        // exploit = new Gatexploit();
    }

    // function testAttack() public {
    //     exploit.attack(address(_target));
    // }

    function testPartOne() public {
        uint32 lhs = uint32(uint64(_gateKey));
        uint16 rhs = uint16(uint64(_gateKey));
        assertEq(lhs, rhs);
    }

    function testPartTwo() public {
        uint32 lhs = uint32(uint64(_gateKey));
        uint64 rhs = uint64(_gateKey);
        assertTrue(lhs != rhs);
    }

    function testPartThree() public {
        assertEq(uint32(uint64(_gateKey)), uint16(uint160(_offender)));
    }
}
