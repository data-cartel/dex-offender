pub use free_rider_recovery::*;
/// This module was auto-generated with ethers-rs Abigen.
/// More information at: <https://github.com/gakonst/ethers-rs>
#[allow(
    clippy::enum_variant_names,
    clippy::too_many_arguments,
    clippy::upper_case_acronyms,
    clippy::type_complexity,
    dead_code,
    non_camel_case_types,
)]
pub mod free_rider_recovery {
    #[rustfmt::skip]
    const __ABI: &str = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"payable\",\"type\":\"constructor\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"CallerNotNFT\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\",\"components\":[]}],\"type\":\"error\",\"name\":\"InvalidTokenID\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"NotEnoughFunding\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"OriginNotBeneficiary\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\",\"components\":[]}],\"type\":\"error\",\"name\":\"StillNotOwningToken\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\",\"components\":[]}]}]";
    ///The parsed JSON ABI of the contract.
    pub static FREERIDERRECOVERY_ABI: ::ethers::contract::Lazy<
        ::ethers::core::abi::Abi,
    > = ::ethers::contract::Lazy::new(|| {
        ::ethers::core::utils::__serde_json::from_str(__ABI)
            .expect("ABI is always valid")
    });
    #[rustfmt::skip]
    const __BYTECODE: &[u8] = &[
        96,
        192,
        96,
        64,
        82,
        96,
        64,
        81,
        97,
        6,
        135,
        56,
        3,
        128,
        97,
        6,
        135,
        131,
        57,
        129,
        1,
        96,
        64,
        129,
        144,
        82,
        97,
        0,
        34,
        145,
        97,
        0,
        221,
        86,
        91,
        96,
        1,
        96,
        0,
        85,
        52,
        104,
        2,
        112,
        128,
        29,
        148,
        108,
        148,
        0,
        0,
        20,
        97,
        0,
        80,
        87,
        96,
        64,
        81,
        99,
        59,
        212,
        210,
        233,
        96,
        226,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        130,
        129,
        22,
        96,
        128,
        82,
        129,
        22,
        96,
        160,
        129,
        144,
        82,
        96,
        64,
        81,
        99,
        162,
        44,
        180,
        101,
        96,
        224,
        27,
        129,
        82,
        51,
        96,
        4,
        130,
        1,
        82,
        96,
        1,
        96,
        36,
        130,
        1,
        82,
        99,
        162,
        44,
        180,
        101,
        144,
        96,
        68,
        1,
        96,
        0,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        96,
        0,
        135,
        128,
        59,
        21,
        128,
        21,
        97,
        0,
        162,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        90,
        241,
        21,
        128,
        21,
        97,
        0,
        182,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        80,
        80,
        80,
        80,
        97,
        1,
        16,
        86,
        91,
        128,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        129,
        20,
        97,
        0,
        216,
        87,
        96,
        0,
        128,
        253,
        91,
        145,
        144,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        64,
        131,
        133,
        3,
        18,
        21,
        97,
        0,
        240,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        0,
        249,
        131,
        97,
        0,
        193,
        86,
        91,
        145,
        80,
        97,
        1,
        7,
        96,
        32,
        132,
        1,
        97,
        0,
        193,
        86,
        91,
        144,
        80,
        146,
        80,
        146,
        144,
        80,
        86,
        91,
        96,
        128,
        81,
        96,
        160,
        81,
        97,
        5,
        77,
        97,
        1,
        58,
        96,
        0,
        57,
        96,
        0,
        129,
        129,
        96,
        117,
        1,
        82,
        97,
        1,
        70,
        1,
        82,
        96,
        0,
        96,
        190,
        1,
        82,
        97,
        5,
        77,
        96,
        0,
        243,
        254,
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        4,
        54,
        16,
        97,
        0,
        43,
        87,
        96,
        0,
        53,
        96,
        224,
        28,
        128,
        99,
        21,
        11,
        122,
        2,
        20,
        97,
        0,
        48,
        87,
        91,
        96,
        0,
        128,
        253,
        91,
        97,
        0,
        67,
        97,
        0,
        62,
        54,
        96,
        4,
        97,
        3,
        236,
        86,
        91,
        97,
        0,
        96,
        86,
        91,
        96,
        64,
        81,
        96,
        1,
        96,
        1,
        96,
        224,
        27,
        3,
        25,
        144,
        145,
        22,
        129,
        82,
        96,
        32,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        243,
        91,
        96,
        0,
        97,
        0,
        106,
        97,
        2,
        71,
        86,
        91,
        51,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        22,
        20,
        97,
        0,
        179,
        87,
        96,
        64,
        81,
        99,
        113,
        40,
        63,
        107,
        96,
        225,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        50,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        22,
        20,
        97,
        0,
        252,
        87,
        96,
        64,
        81,
        99,
        94,
        27,
        103,
        71,
        96,
        225,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        5,
        131,
        17,
        21,
        97,
        1,
        38,
        87,
        96,
        64,
        81,
        99,
        183,
        200,
        130,
        235,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        129,
        1,
        132,
        144,
        82,
        96,
        36,
        1,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        64,
        81,
        99,
        49,
        169,
        16,
        143,
        96,
        225,
        27,
        129,
        82,
        96,
        4,
        129,
        1,
        132,
        144,
        82,
        48,
        144,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        22,
        144,
        99,
        99,
        82,
        33,
        30,
        144,
        96,
        36,
        1,
        96,
        32,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        134,
        90,
        250,
        21,
        128,
        21,
        97,
        1,
        141,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        80,
        80,
        96,
        64,
        81,
        61,
        96,
        31,
        25,
        96,
        31,
        130,
        1,
        22,
        130,
        1,
        128,
        96,
        64,
        82,
        80,
        129,
        1,
        144,
        97,
        1,
        177,
        145,
        144,
        97,
        4,
        204,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        20,
        97,
        1,
        219,
        87,
        96,
        64,
        81,
        99,
        74,
        18,
        197,
        69,
        96,
        225,
        27,
        129,
        82,
        96,
        4,
        129,
        1,
        132,
        144,
        82,
        96,
        36,
        1,
        97,
        1,
        29,
        86,
        91,
        96,
        1,
        96,
        0,
        129,
        84,
        97,
        1,
        234,
        144,
        97,
        4,
        240,
        86,
        91,
        145,
        130,
        144,
        85,
        80,
        96,
        6,
        3,
        97,
        2,
        44,
        87,
        96,
        0,
        130,
        128,
        96,
        32,
        1,
        144,
        81,
        129,
        1,
        144,
        97,
        2,
        12,
        145,
        144,
        97,
        4,
        204,
        86,
        91,
        144,
        80,
        97,
        2,
        42,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        130,
        22,
        104,
        2,
        112,
        128,
        29,
        148,
        108,
        148,
        0,
        0,
        97,
        2,
        160,
        86,
        91,
        80,
        91,
        80,
        99,
        10,
        133,
        189,
        1,
        96,
        225,
        27,
        97,
        2,
        63,
        96,
        1,
        96,
        0,
        85,
        86,
        91,
        148,
        147,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        2,
        96,
        0,
        84,
        3,
        97,
        2,
        153,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        31,
        96,
        36,
        130,
        1,
        82,
        127,
        82,
        101,
        101,
        110,
        116,
        114,
        97,
        110,
        99,
        121,
        71,
        117,
        97,
        114,
        100,
        58,
        32,
        114,
        101,
        101,
        110,
        116,
        114,
        97,
        110,
        116,
        32,
        99,
        97,
        108,
        108,
        0,
        96,
        68,
        130,
        1,
        82,
        96,
        100,
        1,
        97,
        1,
        29,
        86,
        91,
        96,
        2,
        96,
        0,
        85,
        86,
        91,
        128,
        71,
        16,
        21,
        97,
        2,
        240,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        29,
        96,
        36,
        130,
        1,
        82,
        127,
        65,
        100,
        100,
        114,
        101,
        115,
        115,
        58,
        32,
        105,
        110,
        115,
        117,
        102,
        102,
        105,
        99,
        105,
        101,
        110,
        116,
        32,
        98,
        97,
        108,
        97,
        110,
        99,
        101,
        0,
        0,
        0,
        96,
        68,
        130,
        1,
        82,
        96,
        100,
        1,
        97,
        1,
        29,
        86,
        91,
        96,
        0,
        130,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        130,
        96,
        64,
        81,
        96,
        0,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        133,
        135,
        90,
        241,
        146,
        80,
        80,
        80,
        61,
        128,
        96,
        0,
        129,
        20,
        97,
        3,
        61,
        87,
        96,
        64,
        81,
        145,
        80,
        96,
        31,
        25,
        96,
        63,
        61,
        1,
        22,
        130,
        1,
        96,
        64,
        82,
        61,
        130,
        82,
        61,
        96,
        0,
        96,
        32,
        132,
        1,
        62,
        97,
        3,
        66,
        86,
        91,
        96,
        96,
        145,
        80,
        91,
        80,
        80,
        144,
        80,
        128,
        97,
        3,
        185,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        58,
        96,
        36,
        130,
        1,
        82,
        127,
        65,
        100,
        100,
        114,
        101,
        115,
        115,
        58,
        32,
        117,
        110,
        97,
        98,
        108,
        101,
        32,
        116,
        111,
        32,
        115,
        101,
        110,
        100,
        32,
        118,
        97,
        108,
        117,
        101,
        44,
        32,
        114,
        96,
        68,
        130,
        1,
        82,
        127,
        101,
        99,
        105,
        112,
        105,
        101,
        110,
        116,
        32,
        109,
        97,
        121,
        32,
        104,
        97,
        118,
        101,
        32,
        114,
        101,
        118,
        101,
        114,
        116,
        101,
        100,
        0,
        0,
        0,
        0,
        0,
        0,
        96,
        100,
        130,
        1,
        82,
        96,
        132,
        1,
        97,
        1,
        29,
        86,
        91,
        80,
        80,
        80,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        129,
        20,
        97,
        3,
        211,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        86,
        91,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        65,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        96,
        0,
        128,
        96,
        0,
        128,
        96,
        128,
        133,
        135,
        3,
        18,
        21,
        97,
        4,
        2,
        87,
        96,
        0,
        128,
        253,
        91,
        132,
        53,
        97,
        4,
        13,
        129,
        97,
        3,
        190,
        86,
        91,
        147,
        80,
        96,
        32,
        133,
        1,
        53,
        97,
        4,
        29,
        129,
        97,
        3,
        190,
        86,
        91,
        146,
        80,
        96,
        64,
        133,
        1,
        53,
        145,
        80,
        96,
        96,
        133,
        1,
        53,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        128,
        130,
        17,
        21,
        97,
        4,
        65,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        135,
        1,
        145,
        80,
        135,
        96,
        31,
        131,
        1,
        18,
        97,
        4,
        85,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        53,
        129,
        129,
        17,
        21,
        97,
        4,
        103,
        87,
        97,
        4,
        103,
        97,
        3,
        214,
        86,
        91,
        96,
        64,
        81,
        96,
        31,
        130,
        1,
        96,
        31,
        25,
        144,
        129,
        22,
        96,
        63,
        1,
        22,
        129,
        1,
        144,
        131,
        130,
        17,
        129,
        131,
        16,
        23,
        21,
        97,
        4,
        143,
        87,
        97,
        4,
        143,
        97,
        3,
        214,
        86,
        91,
        129,
        96,
        64,
        82,
        130,
        129,
        82,
        138,
        96,
        32,
        132,
        135,
        1,
        1,
        17,
        21,
        97,
        4,
        168,
        87,
        96,
        0,
        128,
        253,
        91,
        130,
        96,
        32,
        134,
        1,
        96,
        32,
        131,
        1,
        55,
        96,
        0,
        96,
        32,
        132,
        131,
        1,
        1,
        82,
        128,
        149,
        80,
        80,
        80,
        80,
        80,
        80,
        146,
        149,
        145,
        148,
        80,
        146,
        80,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        4,
        222,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        81,
        97,
        4,
        233,
        129,
        97,
        3,
        190,
        86,
        91,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        96,
        1,
        130,
        1,
        97,
        5,
        16,
        87,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        17,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        80,
        96,
        1,
        1,
        144,
        86,
        254,
        162,
        100,
        105,
        112,
        102,
        115,
        88,
        34,
        18,
        32,
        64,
        97,
        133,
        238,
        98,
        72,
        2,
        63,
        103,
        111,
        106,
        68,
        70,
        255,
        203,
        129,
        220,
        68,
        254,
        200,
        159,
        82,
        158,
        181,
        62,
        203,
        206,
        249,
        160,
        88,
        85,
        119,
        100,
        115,
        111,
        108,
        99,
        67,
        0,
        8,
        20,
        0,
        51,
    ];
    ///The bytecode of the contract.
    pub static FREERIDERRECOVERY_BYTECODE: ::ethers::core::types::Bytes = ::ethers::core::types::Bytes::from_static(
        __BYTECODE,
    );
    #[rustfmt::skip]
    const __DEPLOYED_BYTECODE: &[u8] = &[
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        4,
        54,
        16,
        97,
        0,
        43,
        87,
        96,
        0,
        53,
        96,
        224,
        28,
        128,
        99,
        21,
        11,
        122,
        2,
        20,
        97,
        0,
        48,
        87,
        91,
        96,
        0,
        128,
        253,
        91,
        97,
        0,
        67,
        97,
        0,
        62,
        54,
        96,
        4,
        97,
        3,
        236,
        86,
        91,
        97,
        0,
        96,
        86,
        91,
        96,
        64,
        81,
        96,
        1,
        96,
        1,
        96,
        224,
        27,
        3,
        25,
        144,
        145,
        22,
        129,
        82,
        96,
        32,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        243,
        91,
        96,
        0,
        97,
        0,
        106,
        97,
        2,
        71,
        86,
        91,
        51,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        22,
        20,
        97,
        0,
        179,
        87,
        96,
        64,
        81,
        99,
        113,
        40,
        63,
        107,
        96,
        225,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        50,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        22,
        20,
        97,
        0,
        252,
        87,
        96,
        64,
        81,
        99,
        94,
        27,
        103,
        71,
        96,
        225,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        5,
        131,
        17,
        21,
        97,
        1,
        38,
        87,
        96,
        64,
        81,
        99,
        183,
        200,
        130,
        235,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        129,
        1,
        132,
        144,
        82,
        96,
        36,
        1,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        64,
        81,
        99,
        49,
        169,
        16,
        143,
        96,
        225,
        27,
        129,
        82,
        96,
        4,
        129,
        1,
        132,
        144,
        82,
        48,
        144,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        22,
        144,
        99,
        99,
        82,
        33,
        30,
        144,
        96,
        36,
        1,
        96,
        32,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        134,
        90,
        250,
        21,
        128,
        21,
        97,
        1,
        141,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        80,
        80,
        96,
        64,
        81,
        61,
        96,
        31,
        25,
        96,
        31,
        130,
        1,
        22,
        130,
        1,
        128,
        96,
        64,
        82,
        80,
        129,
        1,
        144,
        97,
        1,
        177,
        145,
        144,
        97,
        4,
        204,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        20,
        97,
        1,
        219,
        87,
        96,
        64,
        81,
        99,
        74,
        18,
        197,
        69,
        96,
        225,
        27,
        129,
        82,
        96,
        4,
        129,
        1,
        132,
        144,
        82,
        96,
        36,
        1,
        97,
        1,
        29,
        86,
        91,
        96,
        1,
        96,
        0,
        129,
        84,
        97,
        1,
        234,
        144,
        97,
        4,
        240,
        86,
        91,
        145,
        130,
        144,
        85,
        80,
        96,
        6,
        3,
        97,
        2,
        44,
        87,
        96,
        0,
        130,
        128,
        96,
        32,
        1,
        144,
        81,
        129,
        1,
        144,
        97,
        2,
        12,
        145,
        144,
        97,
        4,
        204,
        86,
        91,
        144,
        80,
        97,
        2,
        42,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        130,
        22,
        104,
        2,
        112,
        128,
        29,
        148,
        108,
        148,
        0,
        0,
        97,
        2,
        160,
        86,
        91,
        80,
        91,
        80,
        99,
        10,
        133,
        189,
        1,
        96,
        225,
        27,
        97,
        2,
        63,
        96,
        1,
        96,
        0,
        85,
        86,
        91,
        148,
        147,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        2,
        96,
        0,
        84,
        3,
        97,
        2,
        153,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        31,
        96,
        36,
        130,
        1,
        82,
        127,
        82,
        101,
        101,
        110,
        116,
        114,
        97,
        110,
        99,
        121,
        71,
        117,
        97,
        114,
        100,
        58,
        32,
        114,
        101,
        101,
        110,
        116,
        114,
        97,
        110,
        116,
        32,
        99,
        97,
        108,
        108,
        0,
        96,
        68,
        130,
        1,
        82,
        96,
        100,
        1,
        97,
        1,
        29,
        86,
        91,
        96,
        2,
        96,
        0,
        85,
        86,
        91,
        128,
        71,
        16,
        21,
        97,
        2,
        240,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        29,
        96,
        36,
        130,
        1,
        82,
        127,
        65,
        100,
        100,
        114,
        101,
        115,
        115,
        58,
        32,
        105,
        110,
        115,
        117,
        102,
        102,
        105,
        99,
        105,
        101,
        110,
        116,
        32,
        98,
        97,
        108,
        97,
        110,
        99,
        101,
        0,
        0,
        0,
        96,
        68,
        130,
        1,
        82,
        96,
        100,
        1,
        97,
        1,
        29,
        86,
        91,
        96,
        0,
        130,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        130,
        96,
        64,
        81,
        96,
        0,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        133,
        135,
        90,
        241,
        146,
        80,
        80,
        80,
        61,
        128,
        96,
        0,
        129,
        20,
        97,
        3,
        61,
        87,
        96,
        64,
        81,
        145,
        80,
        96,
        31,
        25,
        96,
        63,
        61,
        1,
        22,
        130,
        1,
        96,
        64,
        82,
        61,
        130,
        82,
        61,
        96,
        0,
        96,
        32,
        132,
        1,
        62,
        97,
        3,
        66,
        86,
        91,
        96,
        96,
        145,
        80,
        91,
        80,
        80,
        144,
        80,
        128,
        97,
        3,
        185,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        58,
        96,
        36,
        130,
        1,
        82,
        127,
        65,
        100,
        100,
        114,
        101,
        115,
        115,
        58,
        32,
        117,
        110,
        97,
        98,
        108,
        101,
        32,
        116,
        111,
        32,
        115,
        101,
        110,
        100,
        32,
        118,
        97,
        108,
        117,
        101,
        44,
        32,
        114,
        96,
        68,
        130,
        1,
        82,
        127,
        101,
        99,
        105,
        112,
        105,
        101,
        110,
        116,
        32,
        109,
        97,
        121,
        32,
        104,
        97,
        118,
        101,
        32,
        114,
        101,
        118,
        101,
        114,
        116,
        101,
        100,
        0,
        0,
        0,
        0,
        0,
        0,
        96,
        100,
        130,
        1,
        82,
        96,
        132,
        1,
        97,
        1,
        29,
        86,
        91,
        80,
        80,
        80,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        129,
        20,
        97,
        3,
        211,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        86,
        91,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        65,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        96,
        0,
        128,
        96,
        0,
        128,
        96,
        128,
        133,
        135,
        3,
        18,
        21,
        97,
        4,
        2,
        87,
        96,
        0,
        128,
        253,
        91,
        132,
        53,
        97,
        4,
        13,
        129,
        97,
        3,
        190,
        86,
        91,
        147,
        80,
        96,
        32,
        133,
        1,
        53,
        97,
        4,
        29,
        129,
        97,
        3,
        190,
        86,
        91,
        146,
        80,
        96,
        64,
        133,
        1,
        53,
        145,
        80,
        96,
        96,
        133,
        1,
        53,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        128,
        130,
        17,
        21,
        97,
        4,
        65,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        135,
        1,
        145,
        80,
        135,
        96,
        31,
        131,
        1,
        18,
        97,
        4,
        85,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        53,
        129,
        129,
        17,
        21,
        97,
        4,
        103,
        87,
        97,
        4,
        103,
        97,
        3,
        214,
        86,
        91,
        96,
        64,
        81,
        96,
        31,
        130,
        1,
        96,
        31,
        25,
        144,
        129,
        22,
        96,
        63,
        1,
        22,
        129,
        1,
        144,
        131,
        130,
        17,
        129,
        131,
        16,
        23,
        21,
        97,
        4,
        143,
        87,
        97,
        4,
        143,
        97,
        3,
        214,
        86,
        91,
        129,
        96,
        64,
        82,
        130,
        129,
        82,
        138,
        96,
        32,
        132,
        135,
        1,
        1,
        17,
        21,
        97,
        4,
        168,
        87,
        96,
        0,
        128,
        253,
        91,
        130,
        96,
        32,
        134,
        1,
        96,
        32,
        131,
        1,
        55,
        96,
        0,
        96,
        32,
        132,
        131,
        1,
        1,
        82,
        128,
        149,
        80,
        80,
        80,
        80,
        80,
        80,
        146,
        149,
        145,
        148,
        80,
        146,
        80,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        4,
        222,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        81,
        97,
        4,
        233,
        129,
        97,
        3,
        190,
        86,
        91,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        96,
        1,
        130,
        1,
        97,
        5,
        16,
        87,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        17,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        80,
        96,
        1,
        1,
        144,
        86,
        254,
        162,
        100,
        105,
        112,
        102,
        115,
        88,
        34,
        18,
        32,
        64,
        97,
        133,
        238,
        98,
        72,
        2,
        63,
        103,
        111,
        106,
        68,
        70,
        255,
        203,
        129,
        220,
        68,
        254,
        200,
        159,
        82,
        158,
        181,
        62,
        203,
        206,
        249,
        160,
        88,
        85,
        119,
        100,
        115,
        111,
        108,
        99,
        67,
        0,
        8,
        20,
        0,
        51,
    ];
    ///The deployed bytecode of the contract.
    pub static FREERIDERRECOVERY_DEPLOYED_BYTECODE: ::ethers::core::types::Bytes = ::ethers::core::types::Bytes::from_static(
        __DEPLOYED_BYTECODE,
    );
    pub struct FreeRiderRecovery<M>(::ethers::contract::Contract<M>);
    impl<M> ::core::clone::Clone for FreeRiderRecovery<M> {
        fn clone(&self) -> Self {
            Self(::core::clone::Clone::clone(&self.0))
        }
    }
    impl<M> ::core::ops::Deref for FreeRiderRecovery<M> {
        type Target = ::ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M> ::core::ops::DerefMut for FreeRiderRecovery<M> {
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl<M> ::core::fmt::Debug for FreeRiderRecovery<M> {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple(stringify!(FreeRiderRecovery)).field(&self.address()).finish()
        }
    }
    impl<M: ::ethers::providers::Middleware> FreeRiderRecovery<M> {
        /// Creates a new contract instance with the specified `ethers` client at
        /// `address`. The contract derefs to a `ethers::Contract` object.
        pub fn new<T: Into<::ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            Self(
                ::ethers::contract::Contract::new(
                    address.into(),
                    FREERIDERRECOVERY_ABI.clone(),
                    client,
                ),
            )
        }
        /// Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it.
        /// Returns a new instance of a deployer that returns an instance of this contract after sending the transaction
        ///
        /// Notes:
        /// - If there are no constructor arguments, you should pass `()` as the argument.
        /// - The default poll duration is 7 seconds.
        /// - The default number of confirmations is 1 block.
        ///
        ///
        /// # Example
        ///
        /// Generate contract bindings with `abigen!` and deploy a new contract instance.
        ///
        /// *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact.
        ///
        /// ```ignore
        /// # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {
        ///     abigen!(Greeter, "../greeter.json");
        ///
        ///    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();
        ///    let msg = greeter_contract.greet().call().await.unwrap();
        /// # }
        /// ```
        pub fn deploy<T: ::ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::core::result::Result<
            ::ethers::contract::builders::ContractDeployer<M, Self>,
            ::ethers::contract::ContractError<M>,
        > {
            let factory = ::ethers::contract::ContractFactory::new(
                FREERIDERRECOVERY_ABI.clone(),
                FREERIDERRECOVERY_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ::ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        ///Calls the contract's `onERC721Received` (0x150b7a02) function
        pub fn on_erc721_received(
            &self,
            p0: ::ethers::core::types::Address,
            p1: ::ethers::core::types::Address,
            token_id: ::ethers::core::types::U256,
            data: ::ethers::core::types::Bytes,
        ) -> ::ethers::contract::builders::ContractCall<M, [u8; 4]> {
            self.0
                .method_hash([21, 11, 122, 2], (p0, p1, token_id, data))
                .expect("method not found (this should never happen)")
        }
    }
    impl<M: ::ethers::providers::Middleware> From<::ethers::contract::Contract<M>>
    for FreeRiderRecovery<M> {
        fn from(contract: ::ethers::contract::Contract<M>) -> Self {
            Self::new(contract.address(), contract.client())
        }
    }
    ///Custom Error type `CallerNotNFT` with signature `CallerNotNFT()` and selector `0xe2507ed6`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(name = "CallerNotNFT", abi = "CallerNotNFT()")]
    pub struct CallerNotNFT;
    ///Custom Error type `InvalidTokenID` with signature `InvalidTokenID(uint256)` and selector `0xb7c882eb`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(name = "InvalidTokenID", abi = "InvalidTokenID(uint256)")]
    pub struct InvalidTokenID {
        pub token_id: ::ethers::core::types::U256,
    }
    ///Custom Error type `NotEnoughFunding` with signature `NotEnoughFunding()` and selector `0xef534ba4`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(name = "NotEnoughFunding", abi = "NotEnoughFunding()")]
    pub struct NotEnoughFunding;
    ///Custom Error type `OriginNotBeneficiary` with signature `OriginNotBeneficiary()` and selector `0xbc36ce8e`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(name = "OriginNotBeneficiary", abi = "OriginNotBeneficiary()")]
    pub struct OriginNotBeneficiary;
    ///Custom Error type `StillNotOwningToken` with signature `StillNotOwningToken(uint256)` and selector `0x94258a8a`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(name = "StillNotOwningToken", abi = "StillNotOwningToken(uint256)")]
    pub struct StillNotOwningToken {
        pub token_id: ::ethers::core::types::U256,
    }
    ///Container type for all of the contract's custom errors
    #[derive(Clone, ::ethers::contract::EthAbiType, Debug, PartialEq, Eq, Hash)]
    pub enum FreeRiderRecoveryErrors {
        CallerNotNFT(CallerNotNFT),
        InvalidTokenID(InvalidTokenID),
        NotEnoughFunding(NotEnoughFunding),
        OriginNotBeneficiary(OriginNotBeneficiary),
        StillNotOwningToken(StillNotOwningToken),
        /// The standard solidity revert string, with selector
        /// Error(string) -- 0x08c379a0
        RevertString(::std::string::String),
    }
    impl ::ethers::core::abi::AbiDecode for FreeRiderRecoveryErrors {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::core::result::Result<Self, ::ethers::core::abi::AbiError> {
            let data = data.as_ref();
            if let Ok(decoded)
                = <::std::string::String as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::RevertString(decoded));
            }
            if let Ok(decoded)
                = <CallerNotNFT as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::CallerNotNFT(decoded));
            }
            if let Ok(decoded)
                = <InvalidTokenID as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::InvalidTokenID(decoded));
            }
            if let Ok(decoded)
                = <NotEnoughFunding as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::NotEnoughFunding(decoded));
            }
            if let Ok(decoded)
                = <OriginNotBeneficiary as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::OriginNotBeneficiary(decoded));
            }
            if let Ok(decoded)
                = <StillNotOwningToken as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::StillNotOwningToken(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ::ethers::core::abi::AbiEncode for FreeRiderRecoveryErrors {
        fn encode(self) -> ::std::vec::Vec<u8> {
            match self {
                Self::CallerNotNFT(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::InvalidTokenID(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::NotEnoughFunding(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::OriginNotBeneficiary(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::StillNotOwningToken(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::RevertString(s) => ::ethers::core::abi::AbiEncode::encode(s),
            }
        }
    }
    impl ::ethers::contract::ContractRevert for FreeRiderRecoveryErrors {
        fn valid_selector(selector: [u8; 4]) -> bool {
            match selector {
                [0x08, 0xc3, 0x79, 0xa0] => true,
                _ if selector
                    == <CallerNotNFT as ::ethers::contract::EthError>::selector() => true,
                _ if selector
                    == <InvalidTokenID as ::ethers::contract::EthError>::selector() => {
                    true
                }
                _ if selector
                    == <NotEnoughFunding as ::ethers::contract::EthError>::selector() => {
                    true
                }
                _ if selector
                    == <OriginNotBeneficiary as ::ethers::contract::EthError>::selector() => {
                    true
                }
                _ if selector
                    == <StillNotOwningToken as ::ethers::contract::EthError>::selector() => {
                    true
                }
                _ => false,
            }
        }
    }
    impl ::core::fmt::Display for FreeRiderRecoveryErrors {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                Self::CallerNotNFT(element) => ::core::fmt::Display::fmt(element, f),
                Self::InvalidTokenID(element) => ::core::fmt::Display::fmt(element, f),
                Self::NotEnoughFunding(element) => ::core::fmt::Display::fmt(element, f),
                Self::OriginNotBeneficiary(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::StillNotOwningToken(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::RevertString(s) => ::core::fmt::Display::fmt(s, f),
            }
        }
    }
    impl ::core::convert::From<::std::string::String> for FreeRiderRecoveryErrors {
        fn from(value: String) -> Self {
            Self::RevertString(value)
        }
    }
    impl ::core::convert::From<CallerNotNFT> for FreeRiderRecoveryErrors {
        fn from(value: CallerNotNFT) -> Self {
            Self::CallerNotNFT(value)
        }
    }
    impl ::core::convert::From<InvalidTokenID> for FreeRiderRecoveryErrors {
        fn from(value: InvalidTokenID) -> Self {
            Self::InvalidTokenID(value)
        }
    }
    impl ::core::convert::From<NotEnoughFunding> for FreeRiderRecoveryErrors {
        fn from(value: NotEnoughFunding) -> Self {
            Self::NotEnoughFunding(value)
        }
    }
    impl ::core::convert::From<OriginNotBeneficiary> for FreeRiderRecoveryErrors {
        fn from(value: OriginNotBeneficiary) -> Self {
            Self::OriginNotBeneficiary(value)
        }
    }
    impl ::core::convert::From<StillNotOwningToken> for FreeRiderRecoveryErrors {
        fn from(value: StillNotOwningToken) -> Self {
            Self::StillNotOwningToken(value)
        }
    }
    ///Container type for all input parameters for the `onERC721Received` function with signature `onERC721Received(address,address,uint256,bytes)` and selector `0x150b7a02`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(
        name = "onERC721Received",
        abi = "onERC721Received(address,address,uint256,bytes)"
    )]
    pub struct OnERC721ReceivedCall {
        pub p0: ::ethers::core::types::Address,
        pub p1: ::ethers::core::types::Address,
        pub token_id: ::ethers::core::types::U256,
        pub data: ::ethers::core::types::Bytes,
    }
    ///Container type for all return fields from the `onERC721Received` function with signature `onERC721Received(address,address,uint256,bytes)` and selector `0x150b7a02`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct OnERC721ReceivedReturn(pub [u8; 4]);
}
