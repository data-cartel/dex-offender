pub use puppet_pool::*;
/// This module was auto-generated with ethers-rs Abigen.
/// More information at: <https://github.com/gakonst/ethers-rs>
#[allow(
    clippy::enum_variant_names,
    clippy::too_many_arguments,
    clippy::upper_case_acronyms,
    clippy::type_complexity,
    dead_code,
    non_camel_case_types,
)]
pub mod puppet_pool {
    #[rustfmt::skip]
    const __ABI: &str = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"uniswapPairAddress\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"NotEnoughCollateral\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"TransferFailed\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"depositRequired\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"Borrowed\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"DEPOSIT_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"payable\",\"type\":\"function\",\"name\":\"borrow\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"calculateDepositRequired\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"deposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract DamnValuableToken\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"uniswapPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]}]";
    ///The parsed JSON ABI of the contract.
    pub static PUPPETPOOL_ABI: ::ethers::contract::Lazy<::ethers::core::abi::Abi> = ::ethers::contract::Lazy::new(||
    ::ethers::core::utils::__serde_json::from_str(__ABI).expect("ABI is always valid"));
    #[rustfmt::skip]
    const __BYTECODE: &[u8] = &[
        96,
        192,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        64,
        81,
        97,
        7,
        146,
        56,
        3,
        128,
        97,
        7,
        146,
        131,
        57,
        129,
        1,
        96,
        64,
        129,
        144,
        82,
        97,
        0,
        47,
        145,
        97,
        0,
        103,
        86,
        91,
        96,
        1,
        96,
        0,
        85,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        145,
        130,
        22,
        96,
        160,
        82,
        22,
        96,
        128,
        82,
        97,
        0,
        154,
        86,
        91,
        128,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        129,
        20,
        97,
        0,
        98,
        87,
        96,
        0,
        128,
        253,
        91,
        145,
        144,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        64,
        131,
        133,
        3,
        18,
        21,
        97,
        0,
        122,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        0,
        131,
        131,
        97,
        0,
        75,
        86,
        91,
        145,
        80,
        97,
        0,
        145,
        96,
        32,
        132,
        1,
        97,
        0,
        75,
        86,
        91,
        144,
        80,
        146,
        80,
        146,
        144,
        80,
        86,
        91,
        96,
        128,
        81,
        96,
        160,
        81,
        97,
        6,
        184,
        97,
        0,
        218,
        96,
        0,
        57,
        96,
        0,
        129,
        129,
        97,
        1,
        21,
        1,
        82,
        129,
        129,
        97,
        1,
        233,
        1,
        82,
        97,
        4,
        197,
        1,
        82,
        96,
        0,
        129,
        129,
        96,
        201,
        1,
        82,
        129,
        129,
        97,
        4,
        154,
        1,
        82,
        97,
        5,
        63,
        1,
        82,
        97,
        6,
        184,
        96,
        0,
        243,
        254,
        96,
        128,
        96,
        64,
        82,
        96,
        4,
        54,
        16,
        97,
        0,
        85,
        87,
        96,
        0,
        53,
        96,
        224,
        28,
        128,
        99,
        75,
        63,
        209,
        72,
        20,
        97,
        0,
        90,
        87,
        128,
        99,
        93,
        72,
        226,
        85,
        20,
        97,
        0,
        111,
        87,
        128,
        99,
        188,
        85,
        76,
        40,
        20,
        97,
        0,
        151,
        87,
        128,
        99,
        200,
        22,
        132,
        27,
        20,
        97,
        0,
        183,
        87,
        128,
        99,
        252,
        12,
        84,
        106,
        20,
        97,
        1,
        3,
        87,
        128,
        99,
        252,
        126,
        40,
        109,
        20,
        97,
        1,
        55,
        87,
        91,
        96,
        0,
        128,
        253,
        91,
        97,
        0,
        109,
        97,
        0,
        104,
        54,
        96,
        4,
        97,
        5,
        153,
        86,
        91,
        97,
        1,
        100,
        86,
        91,
        0,
        91,
        52,
        128,
        21,
        97,
        0,
        123,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        0,
        132,
        96,
        2,
        129,
        86,
        91,
        96,
        64,
        81,
        144,
        129,
        82,
        96,
        32,
        1,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        243,
        91,
        52,
        128,
        21,
        97,
        0,
        163,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        0,
        132,
        97,
        0,
        178,
        54,
        96,
        4,
        97,
        5,
        197,
        86,
        91,
        97,
        2,
        206,
        86,
        91,
        52,
        128,
        21,
        97,
        0,
        195,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        0,
        235,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        129,
        86,
        91,
        96,
        64,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        144,
        145,
        22,
        129,
        82,
        96,
        32,
        1,
        97,
        0,
        142,
        86,
        91,
        52,
        128,
        21,
        97,
        1,
        15,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        0,
        235,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        129,
        86,
        91,
        52,
        128,
        21,
        97,
        1,
        67,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        0,
        132,
        97,
        1,
        82,
        54,
        96,
        4,
        97,
        5,
        222,
        86,
        91,
        96,
        1,
        96,
        32,
        82,
        96,
        0,
        144,
        129,
        82,
        96,
        64,
        144,
        32,
        84,
        129,
        86,
        91,
        97,
        1,
        108,
        97,
        3,
        7,
        86,
        91,
        96,
        0,
        97,
        1,
        119,
        131,
        97,
        2,
        206,
        86,
        91,
        144,
        80,
        128,
        52,
        16,
        21,
        97,
        1,
        153,
        87,
        96,
        64,
        81,
        98,
        209,
        29,
        243,
        96,
        230,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        128,
        52,
        17,
        21,
        97,
        1,
        174,
        87,
        97,
        1,
        174,
        51,
        52,
        131,
        144,
        3,
        97,
        3,
        101,
        86,
        91,
        51,
        96,
        0,
        144,
        129,
        82,
        96,
        1,
        96,
        32,
        82,
        96,
        64,
        144,
        129,
        144,
        32,
        128,
        84,
        131,
        1,
        144,
        85,
        81,
        99,
        169,
        5,
        156,
        187,
        96,
        224,
        27,
        129,
        82,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        131,
        129,
        22,
        96,
        4,
        131,
        1,
        82,
        96,
        36,
        130,
        1,
        133,
        144,
        82,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        22,
        144,
        99,
        169,
        5,
        156,
        187,
        144,
        96,
        68,
        1,
        96,
        32,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        96,
        0,
        135,
        90,
        241,
        21,
        128,
        21,
        97,
        2,
        50,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        80,
        80,
        96,
        64,
        81,
        61,
        96,
        31,
        25,
        96,
        31,
        130,
        1,
        22,
        130,
        1,
        128,
        96,
        64,
        82,
        80,
        129,
        1,
        144,
        97,
        2,
        86,
        145,
        144,
        97,
        6,
        0,
        86,
        91,
        97,
        2,
        115,
        87,
        96,
        64,
        81,
        99,
        18,
        23,
        29,
        131,
        96,
        227,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        64,
        128,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        132,
        22,
        129,
        82,
        96,
        32,
        129,
        1,
        131,
        144,
        82,
        144,
        129,
        1,
        132,
        144,
        82,
        51,
        144,
        127,
        193,
        78,
        158,
        107,
        77,
        152,
        165,
        66,
        176,
        90,
        15,
        107,
        100,
        172,
        213,
        244,
        203,
        219,
        145,
        75,
        232,
        132,
        50,
        216,
        116,
        134,
        182,
        100,
        233,
        112,
        113,
        167,
        144,
        96,
        96,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        162,
        80,
        97,
        2,
        202,
        96,
        1,
        96,
        0,
        85,
        86,
        91,
        80,
        80,
        86,
        91,
        96,
        0,
        103,
        13,
        224,
        182,
        179,
        167,
        100,
        0,
        0,
        96,
        2,
        97,
        2,
        227,
        97,
        4,
        131,
        86,
        91,
        97,
        2,
        237,
        144,
        133,
        97,
        6,
        34,
        86,
        91,
        97,
        2,
        247,
        145,
        144,
        97,
        6,
        34,
        86,
        91,
        97,
        3,
        1,
        145,
        144,
        97,
        6,
        71,
        86,
        91,
        146,
        145,
        80,
        80,
        86,
        91,
        96,
        2,
        96,
        0,
        84,
        3,
        97,
        3,
        94,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        31,
        96,
        36,
        130,
        1,
        82,
        127,
        82,
        101,
        101,
        110,
        116,
        114,
        97,
        110,
        99,
        121,
        71,
        117,
        97,
        114,
        100,
        58,
        32,
        114,
        101,
        101,
        110,
        116,
        114,
        97,
        110,
        116,
        32,
        99,
        97,
        108,
        108,
        0,
        96,
        68,
        130,
        1,
        82,
        96,
        100,
        1,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        2,
        96,
        0,
        85,
        86,
        91,
        128,
        71,
        16,
        21,
        97,
        3,
        181,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        29,
        96,
        36,
        130,
        1,
        82,
        127,
        65,
        100,
        100,
        114,
        101,
        115,
        115,
        58,
        32,
        105,
        110,
        115,
        117,
        102,
        102,
        105,
        99,
        105,
        101,
        110,
        116,
        32,
        98,
        97,
        108,
        97,
        110,
        99,
        101,
        0,
        0,
        0,
        96,
        68,
        130,
        1,
        82,
        96,
        100,
        1,
        97,
        3,
        85,
        86,
        91,
        96,
        0,
        130,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        130,
        96,
        64,
        81,
        96,
        0,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        133,
        135,
        90,
        241,
        146,
        80,
        80,
        80,
        61,
        128,
        96,
        0,
        129,
        20,
        97,
        4,
        2,
        87,
        96,
        64,
        81,
        145,
        80,
        96,
        31,
        25,
        96,
        63,
        61,
        1,
        22,
        130,
        1,
        96,
        64,
        82,
        61,
        130,
        82,
        61,
        96,
        0,
        96,
        32,
        132,
        1,
        62,
        97,
        4,
        7,
        86,
        91,
        96,
        96,
        145,
        80,
        91,
        80,
        80,
        144,
        80,
        128,
        97,
        4,
        126,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        58,
        96,
        36,
        130,
        1,
        82,
        127,
        65,
        100,
        100,
        114,
        101,
        115,
        115,
        58,
        32,
        117,
        110,
        97,
        98,
        108,
        101,
        32,
        116,
        111,
        32,
        115,
        101,
        110,
        100,
        32,
        118,
        97,
        108,
        117,
        101,
        44,
        32,
        114,
        96,
        68,
        130,
        1,
        82,
        127,
        101,
        99,
        105,
        112,
        105,
        101,
        110,
        116,
        32,
        109,
        97,
        121,
        32,
        104,
        97,
        118,
        101,
        32,
        114,
        101,
        118,
        101,
        114,
        116,
        101,
        100,
        0,
        0,
        0,
        0,
        0,
        0,
        96,
        100,
        130,
        1,
        82,
        96,
        132,
        1,
        97,
        3,
        85,
        86,
        91,
        80,
        80,
        80,
        86,
        91,
        96,
        64,
        81,
        99,
        112,
        160,
        130,
        49,
        96,
        224,
        27,
        129,
        82,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        129,
        22,
        96,
        4,
        131,
        1,
        82,
        96,
        0,
        145,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        144,
        145,
        22,
        144,
        99,
        112,
        160,
        130,
        49,
        144,
        96,
        36,
        1,
        96,
        32,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        134,
        90,
        250,
        21,
        128,
        21,
        97,
        5,
        14,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        80,
        80,
        96,
        64,
        81,
        61,
        96,
        31,
        25,
        96,
        31,
        130,
        1,
        22,
        130,
        1,
        128,
        96,
        64,
        82,
        80,
        129,
        1,
        144,
        97,
        5,
        50,
        145,
        144,
        97,
        6,
        105,
        86,
        91,
        97,
        5,
        110,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        22,
        49,
        103,
        13,
        224,
        182,
        179,
        167,
        100,
        0,
        0,
        97,
        6,
        34,
        86,
        91,
        97,
        5,
        120,
        145,
        144,
        97,
        6,
        71,
        86,
        91,
        144,
        80,
        144,
        86,
        91,
        128,
        53,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        129,
        20,
        97,
        5,
        148,
        87,
        96,
        0,
        128,
        253,
        91,
        145,
        144,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        64,
        131,
        133,
        3,
        18,
        21,
        97,
        5,
        172,
        87,
        96,
        0,
        128,
        253,
        91,
        130,
        53,
        145,
        80,
        97,
        5,
        188,
        96,
        32,
        132,
        1,
        97,
        5,
        125,
        86,
        91,
        144,
        80,
        146,
        80,
        146,
        144,
        80,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        5,
        215,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        53,
        145,
        144,
        80,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        5,
        240,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        5,
        249,
        130,
        97,
        5,
        125,
        86,
        91,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        6,
        18,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        81,
        128,
        21,
        21,
        129,
        20,
        97,
        5,
        249,
        87,
        96,
        0,
        128,
        253,
        91,
        128,
        130,
        2,
        129,
        21,
        130,
        130,
        4,
        132,
        20,
        23,
        97,
        3,
        1,
        87,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        17,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        96,
        0,
        130,
        97,
        6,
        100,
        87,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        18,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        80,
        4,
        144,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        6,
        123,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        81,
        145,
        144,
        80,
        86,
        254,
        162,
        100,
        105,
        112,
        102,
        115,
        88,
        34,
        18,
        32,
        212,
        85,
        103,
        54,
        232,
        254,
        178,
        100,
        37,
        98,
        152,
        203,
        242,
        183,
        234,
        240,
        208,
        157,
        43,
        103,
        197,
        112,
        206,
        62,
        119,
        129,
        215,
        170,
        26,
        241,
        0,
        81,
        100,
        115,
        111,
        108,
        99,
        67,
        0,
        8,
        20,
        0,
        51,
    ];
    ///The bytecode of the contract.
    pub static PUPPETPOOL_BYTECODE: ::ethers::core::types::Bytes = ::ethers::core::types::Bytes::from_static(
        __BYTECODE,
    );
    #[rustfmt::skip]
    const __DEPLOYED_BYTECODE: &[u8] = &[
        96,
        128,
        96,
        64,
        82,
        96,
        4,
        54,
        16,
        97,
        0,
        85,
        87,
        96,
        0,
        53,
        96,
        224,
        28,
        128,
        99,
        75,
        63,
        209,
        72,
        20,
        97,
        0,
        90,
        87,
        128,
        99,
        93,
        72,
        226,
        85,
        20,
        97,
        0,
        111,
        87,
        128,
        99,
        188,
        85,
        76,
        40,
        20,
        97,
        0,
        151,
        87,
        128,
        99,
        200,
        22,
        132,
        27,
        20,
        97,
        0,
        183,
        87,
        128,
        99,
        252,
        12,
        84,
        106,
        20,
        97,
        1,
        3,
        87,
        128,
        99,
        252,
        126,
        40,
        109,
        20,
        97,
        1,
        55,
        87,
        91,
        96,
        0,
        128,
        253,
        91,
        97,
        0,
        109,
        97,
        0,
        104,
        54,
        96,
        4,
        97,
        5,
        153,
        86,
        91,
        97,
        1,
        100,
        86,
        91,
        0,
        91,
        52,
        128,
        21,
        97,
        0,
        123,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        0,
        132,
        96,
        2,
        129,
        86,
        91,
        96,
        64,
        81,
        144,
        129,
        82,
        96,
        32,
        1,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        243,
        91,
        52,
        128,
        21,
        97,
        0,
        163,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        0,
        132,
        97,
        0,
        178,
        54,
        96,
        4,
        97,
        5,
        197,
        86,
        91,
        97,
        2,
        206,
        86,
        91,
        52,
        128,
        21,
        97,
        0,
        195,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        0,
        235,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        129,
        86,
        91,
        96,
        64,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        144,
        145,
        22,
        129,
        82,
        96,
        32,
        1,
        97,
        0,
        142,
        86,
        91,
        52,
        128,
        21,
        97,
        1,
        15,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        0,
        235,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        129,
        86,
        91,
        52,
        128,
        21,
        97,
        1,
        67,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        0,
        132,
        97,
        1,
        82,
        54,
        96,
        4,
        97,
        5,
        222,
        86,
        91,
        96,
        1,
        96,
        32,
        82,
        96,
        0,
        144,
        129,
        82,
        96,
        64,
        144,
        32,
        84,
        129,
        86,
        91,
        97,
        1,
        108,
        97,
        3,
        7,
        86,
        91,
        96,
        0,
        97,
        1,
        119,
        131,
        97,
        2,
        206,
        86,
        91,
        144,
        80,
        128,
        52,
        16,
        21,
        97,
        1,
        153,
        87,
        96,
        64,
        81,
        98,
        209,
        29,
        243,
        96,
        230,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        128,
        52,
        17,
        21,
        97,
        1,
        174,
        87,
        97,
        1,
        174,
        51,
        52,
        131,
        144,
        3,
        97,
        3,
        101,
        86,
        91,
        51,
        96,
        0,
        144,
        129,
        82,
        96,
        1,
        96,
        32,
        82,
        96,
        64,
        144,
        129,
        144,
        32,
        128,
        84,
        131,
        1,
        144,
        85,
        81,
        99,
        169,
        5,
        156,
        187,
        96,
        224,
        27,
        129,
        82,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        131,
        129,
        22,
        96,
        4,
        131,
        1,
        82,
        96,
        36,
        130,
        1,
        133,
        144,
        82,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        22,
        144,
        99,
        169,
        5,
        156,
        187,
        144,
        96,
        68,
        1,
        96,
        32,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        96,
        0,
        135,
        90,
        241,
        21,
        128,
        21,
        97,
        2,
        50,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        80,
        80,
        96,
        64,
        81,
        61,
        96,
        31,
        25,
        96,
        31,
        130,
        1,
        22,
        130,
        1,
        128,
        96,
        64,
        82,
        80,
        129,
        1,
        144,
        97,
        2,
        86,
        145,
        144,
        97,
        6,
        0,
        86,
        91,
        97,
        2,
        115,
        87,
        96,
        64,
        81,
        99,
        18,
        23,
        29,
        131,
        96,
        227,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        64,
        128,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        132,
        22,
        129,
        82,
        96,
        32,
        129,
        1,
        131,
        144,
        82,
        144,
        129,
        1,
        132,
        144,
        82,
        51,
        144,
        127,
        193,
        78,
        158,
        107,
        77,
        152,
        165,
        66,
        176,
        90,
        15,
        107,
        100,
        172,
        213,
        244,
        203,
        219,
        145,
        75,
        232,
        132,
        50,
        216,
        116,
        134,
        182,
        100,
        233,
        112,
        113,
        167,
        144,
        96,
        96,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        162,
        80,
        97,
        2,
        202,
        96,
        1,
        96,
        0,
        85,
        86,
        91,
        80,
        80,
        86,
        91,
        96,
        0,
        103,
        13,
        224,
        182,
        179,
        167,
        100,
        0,
        0,
        96,
        2,
        97,
        2,
        227,
        97,
        4,
        131,
        86,
        91,
        97,
        2,
        237,
        144,
        133,
        97,
        6,
        34,
        86,
        91,
        97,
        2,
        247,
        145,
        144,
        97,
        6,
        34,
        86,
        91,
        97,
        3,
        1,
        145,
        144,
        97,
        6,
        71,
        86,
        91,
        146,
        145,
        80,
        80,
        86,
        91,
        96,
        2,
        96,
        0,
        84,
        3,
        97,
        3,
        94,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        31,
        96,
        36,
        130,
        1,
        82,
        127,
        82,
        101,
        101,
        110,
        116,
        114,
        97,
        110,
        99,
        121,
        71,
        117,
        97,
        114,
        100,
        58,
        32,
        114,
        101,
        101,
        110,
        116,
        114,
        97,
        110,
        116,
        32,
        99,
        97,
        108,
        108,
        0,
        96,
        68,
        130,
        1,
        82,
        96,
        100,
        1,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        2,
        96,
        0,
        85,
        86,
        91,
        128,
        71,
        16,
        21,
        97,
        3,
        181,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        29,
        96,
        36,
        130,
        1,
        82,
        127,
        65,
        100,
        100,
        114,
        101,
        115,
        115,
        58,
        32,
        105,
        110,
        115,
        117,
        102,
        102,
        105,
        99,
        105,
        101,
        110,
        116,
        32,
        98,
        97,
        108,
        97,
        110,
        99,
        101,
        0,
        0,
        0,
        96,
        68,
        130,
        1,
        82,
        96,
        100,
        1,
        97,
        3,
        85,
        86,
        91,
        96,
        0,
        130,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        130,
        96,
        64,
        81,
        96,
        0,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        133,
        135,
        90,
        241,
        146,
        80,
        80,
        80,
        61,
        128,
        96,
        0,
        129,
        20,
        97,
        4,
        2,
        87,
        96,
        64,
        81,
        145,
        80,
        96,
        31,
        25,
        96,
        63,
        61,
        1,
        22,
        130,
        1,
        96,
        64,
        82,
        61,
        130,
        82,
        61,
        96,
        0,
        96,
        32,
        132,
        1,
        62,
        97,
        4,
        7,
        86,
        91,
        96,
        96,
        145,
        80,
        91,
        80,
        80,
        144,
        80,
        128,
        97,
        4,
        126,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        58,
        96,
        36,
        130,
        1,
        82,
        127,
        65,
        100,
        100,
        114,
        101,
        115,
        115,
        58,
        32,
        117,
        110,
        97,
        98,
        108,
        101,
        32,
        116,
        111,
        32,
        115,
        101,
        110,
        100,
        32,
        118,
        97,
        108,
        117,
        101,
        44,
        32,
        114,
        96,
        68,
        130,
        1,
        82,
        127,
        101,
        99,
        105,
        112,
        105,
        101,
        110,
        116,
        32,
        109,
        97,
        121,
        32,
        104,
        97,
        118,
        101,
        32,
        114,
        101,
        118,
        101,
        114,
        116,
        101,
        100,
        0,
        0,
        0,
        0,
        0,
        0,
        96,
        100,
        130,
        1,
        82,
        96,
        132,
        1,
        97,
        3,
        85,
        86,
        91,
        80,
        80,
        80,
        86,
        91,
        96,
        64,
        81,
        99,
        112,
        160,
        130,
        49,
        96,
        224,
        27,
        129,
        82,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        129,
        22,
        96,
        4,
        131,
        1,
        82,
        96,
        0,
        145,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        144,
        145,
        22,
        144,
        99,
        112,
        160,
        130,
        49,
        144,
        96,
        36,
        1,
        96,
        32,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        134,
        90,
        250,
        21,
        128,
        21,
        97,
        5,
        14,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        80,
        80,
        96,
        64,
        81,
        61,
        96,
        31,
        25,
        96,
        31,
        130,
        1,
        22,
        130,
        1,
        128,
        96,
        64,
        82,
        80,
        129,
        1,
        144,
        97,
        5,
        50,
        145,
        144,
        97,
        6,
        105,
        86,
        91,
        97,
        5,
        110,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        22,
        49,
        103,
        13,
        224,
        182,
        179,
        167,
        100,
        0,
        0,
        97,
        6,
        34,
        86,
        91,
        97,
        5,
        120,
        145,
        144,
        97,
        6,
        71,
        86,
        91,
        144,
        80,
        144,
        86,
        91,
        128,
        53,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        129,
        20,
        97,
        5,
        148,
        87,
        96,
        0,
        128,
        253,
        91,
        145,
        144,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        64,
        131,
        133,
        3,
        18,
        21,
        97,
        5,
        172,
        87,
        96,
        0,
        128,
        253,
        91,
        130,
        53,
        145,
        80,
        97,
        5,
        188,
        96,
        32,
        132,
        1,
        97,
        5,
        125,
        86,
        91,
        144,
        80,
        146,
        80,
        146,
        144,
        80,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        5,
        215,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        53,
        145,
        144,
        80,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        5,
        240,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        5,
        249,
        130,
        97,
        5,
        125,
        86,
        91,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        6,
        18,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        81,
        128,
        21,
        21,
        129,
        20,
        97,
        5,
        249,
        87,
        96,
        0,
        128,
        253,
        91,
        128,
        130,
        2,
        129,
        21,
        130,
        130,
        4,
        132,
        20,
        23,
        97,
        3,
        1,
        87,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        17,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        96,
        0,
        130,
        97,
        6,
        100,
        87,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        18,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        80,
        4,
        144,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        6,
        123,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        81,
        145,
        144,
        80,
        86,
        254,
        162,
        100,
        105,
        112,
        102,
        115,
        88,
        34,
        18,
        32,
        212,
        85,
        103,
        54,
        232,
        254,
        178,
        100,
        37,
        98,
        152,
        203,
        242,
        183,
        234,
        240,
        208,
        157,
        43,
        103,
        197,
        112,
        206,
        62,
        119,
        129,
        215,
        170,
        26,
        241,
        0,
        81,
        100,
        115,
        111,
        108,
        99,
        67,
        0,
        8,
        20,
        0,
        51,
    ];
    ///The deployed bytecode of the contract.
    pub static PUPPETPOOL_DEPLOYED_BYTECODE: ::ethers::core::types::Bytes = ::ethers::core::types::Bytes::from_static(
        __DEPLOYED_BYTECODE,
    );
    pub struct PuppetPool<M>(::ethers::contract::Contract<M>);
    impl<M> ::core::clone::Clone for PuppetPool<M> {
        fn clone(&self) -> Self {
            Self(::core::clone::Clone::clone(&self.0))
        }
    }
    impl<M> ::core::ops::Deref for PuppetPool<M> {
        type Target = ::ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M> ::core::ops::DerefMut for PuppetPool<M> {
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl<M> ::core::fmt::Debug for PuppetPool<M> {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple(stringify!(PuppetPool)).field(&self.address()).finish()
        }
    }
    impl<M: ::ethers::providers::Middleware> PuppetPool<M> {
        /// Creates a new contract instance with the specified `ethers` client at
        /// `address`. The contract derefs to a `ethers::Contract` object.
        pub fn new<T: Into<::ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            Self(
                ::ethers::contract::Contract::new(
                    address.into(),
                    PUPPETPOOL_ABI.clone(),
                    client,
                ),
            )
        }
        /// Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it.
        /// Returns a new instance of a deployer that returns an instance of this contract after sending the transaction
        ///
        /// Notes:
        /// - If there are no constructor arguments, you should pass `()` as the argument.
        /// - The default poll duration is 7 seconds.
        /// - The default number of confirmations is 1 block.
        ///
        ///
        /// # Example
        ///
        /// Generate contract bindings with `abigen!` and deploy a new contract instance.
        ///
        /// *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact.
        ///
        /// ```ignore
        /// # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {
        ///     abigen!(Greeter, "../greeter.json");
        ///
        ///    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();
        ///    let msg = greeter_contract.greet().call().await.unwrap();
        /// # }
        /// ```
        pub fn deploy<T: ::ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::core::result::Result<
            ::ethers::contract::builders::ContractDeployer<M, Self>,
            ::ethers::contract::ContractError<M>,
        > {
            let factory = ::ethers::contract::ContractFactory::new(
                PUPPETPOOL_ABI.clone(),
                PUPPETPOOL_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ::ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        ///Calls the contract's `DEPOSIT_FACTOR` (0x5d48e255) function
        pub fn deposit_factor(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([93, 72, 226, 85], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `borrow` (0x4b3fd148) function
        pub fn borrow(
            &self,
            amount: ::ethers::core::types::U256,
            recipient: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([75, 63, 209, 72], (amount, recipient))
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `calculateDepositRequired` (0xbc554c28) function
        pub fn calculate_deposit_required(
            &self,
            amount: ::ethers::core::types::U256,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([188, 85, 76, 40], amount)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `deposits` (0xfc7e286d) function
        pub fn deposits(
            &self,
            p0: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([252, 126, 40, 109], p0)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `token` (0xfc0c546a) function
        pub fn token(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::ethers::core::types::Address,
        > {
            self.0
                .method_hash([252, 12, 84, 106], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `uniswapPair` (0xc816841b) function
        pub fn uniswap_pair(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::ethers::core::types::Address,
        > {
            self.0
                .method_hash([200, 22, 132, 27], ())
                .expect("method not found (this should never happen)")
        }
        ///Gets the contract's `Borrowed` event
        pub fn borrowed_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<
            ::std::sync::Arc<M>,
            M,
            BorrowedFilter,
        > {
            self.0.event()
        }
        /// Returns an `Event` builder for all the events of this contract.
        pub fn events(
            &self,
        ) -> ::ethers::contract::builders::Event<
            ::std::sync::Arc<M>,
            M,
            BorrowedFilter,
        > {
            self.0.event_with_filter(::core::default::Default::default())
        }
    }
    impl<M: ::ethers::providers::Middleware> From<::ethers::contract::Contract<M>>
    for PuppetPool<M> {
        fn from(contract: ::ethers::contract::Contract<M>) -> Self {
            Self::new(contract.address(), contract.client())
        }
    }
    ///Custom Error type `NotEnoughCollateral` with signature `NotEnoughCollateral()` and selector `0x34477cc0`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(name = "NotEnoughCollateral", abi = "NotEnoughCollateral()")]
    pub struct NotEnoughCollateral;
    ///Custom Error type `TransferFailed` with signature `TransferFailed()` and selector `0x90b8ec18`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(name = "TransferFailed", abi = "TransferFailed()")]
    pub struct TransferFailed;
    ///Container type for all of the contract's custom errors
    #[derive(Clone, ::ethers::contract::EthAbiType, Debug, PartialEq, Eq, Hash)]
    pub enum PuppetPoolErrors {
        NotEnoughCollateral(NotEnoughCollateral),
        TransferFailed(TransferFailed),
        /// The standard solidity revert string, with selector
        /// Error(string) -- 0x08c379a0
        RevertString(::std::string::String),
    }
    impl ::ethers::core::abi::AbiDecode for PuppetPoolErrors {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::core::result::Result<Self, ::ethers::core::abi::AbiError> {
            let data = data.as_ref();
            if let Ok(decoded)
                = <::std::string::String as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::RevertString(decoded));
            }
            if let Ok(decoded)
                = <NotEnoughCollateral as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::NotEnoughCollateral(decoded));
            }
            if let Ok(decoded)
                = <TransferFailed as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::TransferFailed(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ::ethers::core::abi::AbiEncode for PuppetPoolErrors {
        fn encode(self) -> ::std::vec::Vec<u8> {
            match self {
                Self::NotEnoughCollateral(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::TransferFailed(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::RevertString(s) => ::ethers::core::abi::AbiEncode::encode(s),
            }
        }
    }
    impl ::ethers::contract::ContractRevert for PuppetPoolErrors {
        fn valid_selector(selector: [u8; 4]) -> bool {
            match selector {
                [0x08, 0xc3, 0x79, 0xa0] => true,
                _ if selector
                    == <NotEnoughCollateral as ::ethers::contract::EthError>::selector() => {
                    true
                }
                _ if selector
                    == <TransferFailed as ::ethers::contract::EthError>::selector() => {
                    true
                }
                _ => false,
            }
        }
    }
    impl ::core::fmt::Display for PuppetPoolErrors {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                Self::NotEnoughCollateral(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::TransferFailed(element) => ::core::fmt::Display::fmt(element, f),
                Self::RevertString(s) => ::core::fmt::Display::fmt(s, f),
            }
        }
    }
    impl ::core::convert::From<::std::string::String> for PuppetPoolErrors {
        fn from(value: String) -> Self {
            Self::RevertString(value)
        }
    }
    impl ::core::convert::From<NotEnoughCollateral> for PuppetPoolErrors {
        fn from(value: NotEnoughCollateral) -> Self {
            Self::NotEnoughCollateral(value)
        }
    }
    impl ::core::convert::From<TransferFailed> for PuppetPoolErrors {
        fn from(value: TransferFailed) -> Self {
            Self::TransferFailed(value)
        }
    }
    #[derive(
        Clone,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethevent(name = "Borrowed", abi = "Borrowed(address,address,uint256,uint256)")]
    pub struct BorrowedFilter {
        #[ethevent(indexed)]
        pub account: ::ethers::core::types::Address,
        pub recipient: ::ethers::core::types::Address,
        pub deposit_required: ::ethers::core::types::U256,
        pub borrow_amount: ::ethers::core::types::U256,
    }
    ///Container type for all input parameters for the `DEPOSIT_FACTOR` function with signature `DEPOSIT_FACTOR()` and selector `0x5d48e255`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "DEPOSIT_FACTOR", abi = "DEPOSIT_FACTOR()")]
    pub struct DepositFactorCall;
    ///Container type for all input parameters for the `borrow` function with signature `borrow(uint256,address)` and selector `0x4b3fd148`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "borrow", abi = "borrow(uint256,address)")]
    pub struct BorrowCall {
        pub amount: ::ethers::core::types::U256,
        pub recipient: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `calculateDepositRequired` function with signature `calculateDepositRequired(uint256)` and selector `0xbc554c28`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(
        name = "calculateDepositRequired",
        abi = "calculateDepositRequired(uint256)"
    )]
    pub struct CalculateDepositRequiredCall {
        pub amount: ::ethers::core::types::U256,
    }
    ///Container type for all input parameters for the `deposits` function with signature `deposits(address)` and selector `0xfc7e286d`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "deposits", abi = "deposits(address)")]
    pub struct DepositsCall(pub ::ethers::core::types::Address);
    ///Container type for all input parameters for the `token` function with signature `token()` and selector `0xfc0c546a`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "token", abi = "token()")]
    pub struct TokenCall;
    ///Container type for all input parameters for the `uniswapPair` function with signature `uniswapPair()` and selector `0xc816841b`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "uniswapPair", abi = "uniswapPair()")]
    pub struct UniswapPairCall;
    ///Container type for all of the contract's call
    #[derive(Clone, ::ethers::contract::EthAbiType, Debug, PartialEq, Eq, Hash)]
    pub enum PuppetPoolCalls {
        DepositFactor(DepositFactorCall),
        Borrow(BorrowCall),
        CalculateDepositRequired(CalculateDepositRequiredCall),
        Deposits(DepositsCall),
        Token(TokenCall),
        UniswapPair(UniswapPairCall),
    }
    impl ::ethers::core::abi::AbiDecode for PuppetPoolCalls {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::core::result::Result<Self, ::ethers::core::abi::AbiError> {
            let data = data.as_ref();
            if let Ok(decoded)
                = <DepositFactorCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::DepositFactor(decoded));
            }
            if let Ok(decoded)
                = <BorrowCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::Borrow(decoded));
            }
            if let Ok(decoded)
                = <CalculateDepositRequiredCall as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::CalculateDepositRequired(decoded));
            }
            if let Ok(decoded)
                = <DepositsCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::Deposits(decoded));
            }
            if let Ok(decoded)
                = <TokenCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::Token(decoded));
            }
            if let Ok(decoded)
                = <UniswapPairCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::UniswapPair(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ::ethers::core::abi::AbiEncode for PuppetPoolCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                Self::DepositFactor(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::Borrow(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::CalculateDepositRequired(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::Deposits(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::Token(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::UniswapPair(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
            }
        }
    }
    impl ::core::fmt::Display for PuppetPoolCalls {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                Self::DepositFactor(element) => ::core::fmt::Display::fmt(element, f),
                Self::Borrow(element) => ::core::fmt::Display::fmt(element, f),
                Self::CalculateDepositRequired(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::Deposits(element) => ::core::fmt::Display::fmt(element, f),
                Self::Token(element) => ::core::fmt::Display::fmt(element, f),
                Self::UniswapPair(element) => ::core::fmt::Display::fmt(element, f),
            }
        }
    }
    impl ::core::convert::From<DepositFactorCall> for PuppetPoolCalls {
        fn from(value: DepositFactorCall) -> Self {
            Self::DepositFactor(value)
        }
    }
    impl ::core::convert::From<BorrowCall> for PuppetPoolCalls {
        fn from(value: BorrowCall) -> Self {
            Self::Borrow(value)
        }
    }
    impl ::core::convert::From<CalculateDepositRequiredCall> for PuppetPoolCalls {
        fn from(value: CalculateDepositRequiredCall) -> Self {
            Self::CalculateDepositRequired(value)
        }
    }
    impl ::core::convert::From<DepositsCall> for PuppetPoolCalls {
        fn from(value: DepositsCall) -> Self {
            Self::Deposits(value)
        }
    }
    impl ::core::convert::From<TokenCall> for PuppetPoolCalls {
        fn from(value: TokenCall) -> Self {
            Self::Token(value)
        }
    }
    impl ::core::convert::From<UniswapPairCall> for PuppetPoolCalls {
        fn from(value: UniswapPairCall) -> Self {
            Self::UniswapPair(value)
        }
    }
    ///Container type for all return fields from the `DEPOSIT_FACTOR` function with signature `DEPOSIT_FACTOR()` and selector `0x5d48e255`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct DepositFactorReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `calculateDepositRequired` function with signature `calculateDepositRequired(uint256)` and selector `0xbc554c28`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct CalculateDepositRequiredReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `deposits` function with signature `deposits(address)` and selector `0xfc7e286d`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct DepositsReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `token` function with signature `token()` and selector `0xfc0c546a`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct TokenReturn(pub ::ethers::core::types::Address);
    ///Container type for all return fields from the `uniswapPair` function with signature `uniswapPair()` and selector `0xc816841b`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct UniswapPairReturn(pub ::ethers::core::types::Address);
}
