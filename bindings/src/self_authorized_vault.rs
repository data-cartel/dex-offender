pub use self_authorized_vault::*;
/// This module was auto-generated with ethers-rs Abigen.
/// More information at: <https://github.com/gakonst/ethers-rs>
#[allow(
    clippy::enum_variant_names,
    clippy::too_many_arguments,
    clippy::upper_case_acronyms,
    clippy::type_complexity,
    dead_code,
    non_camel_case_types,
)]
pub mod self_authorized_vault {
    #[rustfmt::skip]
    const __ABI: &str = "[{\"inputs\":[],\"type\":\"error\",\"name\":\"AlreadyInitialized\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"CallerNotAllowed\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"InvalidWithdrawalAmount\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"NotAllowed\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"TargetNotAllowed\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"WithdrawalWaitingPeriodNotEnded\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\",\"components\":[],\"indexed\":false},{\"internalType\":\"bytes32[]\",\"name\":\"ids\",\"type\":\"bytes32[]\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"Initialized\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"WAITING_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"WITHDRAWAL_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"bytes\",\"name\":\"actionData\",\"type\":\"bytes\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"pure\",\"type\":\"function\",\"name\":\"getActionId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getLastWithdrawalTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"permissions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"ids\",\"type\":\"bytes32[]\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setPermissions\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"sweepFunds\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"withdraw\",\"outputs\":[]}]";
    ///The parsed JSON ABI of the contract.
    pub static SELFAUTHORIZEDVAULT_ABI: ::ethers::contract::Lazy<
        ::ethers::core::abi::Abi,
    > = ::ethers::contract::Lazy::new(|| {
        ::ethers::core::utils::__serde_json::from_str(__ABI)
            .expect("ABI is always valid")
    });
    #[rustfmt::skip]
    const __BYTECODE: &[u8] = &[
        96,
        128,
        96,
        64,
        82,
        66,
        96,
        3,
        85,
        52,
        128,
        21,
        97,
        0,
        20,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        1,
        96,
        0,
        85,
        97,
        10,
        254,
        128,
        97,
        0,
        41,
        96,
        0,
        57,
        96,
        0,
        243,
        254,
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        4,
        54,
        16,
        97,
        0,
        158,
        87,
        96,
        0,
        53,
        96,
        224,
        28,
        128,
        99,
        130,
        238,
        13,
        29,
        17,
        97,
        0,
        102,
        87,
        128,
        99,
        130,
        238,
        13,
        29,
        20,
        97,
        1,
        20,
        87,
        128,
        99,
        133,
        251,
        112,
        157,
        20,
        97,
        1,
        35,
        87,
        128,
        99,
        174,
        171,
        174,
        107,
        20,
        97,
        1,
        56,
        87,
        128,
        99,
        180,
        210,
        56,
        143,
        20,
        97,
        1,
        75,
        87,
        128,
        99,
        217,
        202,
        237,
        18,
        20,
        97,
        1,
        110,
        87,
        96,
        0,
        128,
        253,
        91,
        128,
        99,
        21,
        142,
        249,
        62,
        20,
        97,
        0,
        163,
        87,
        128,
        99,
        28,
        255,
        121,
        205,
        20,
        97,
        0,
        197,
        87,
        128,
        99,
        38,
        109,
        247,
        130,
        20,
        97,
        0,
        229,
        87,
        128,
        99,
        62,
        21,
        36,
        153,
        20,
        97,
        0,
        247,
        87,
        128,
        99,
        111,
        133,
        199,
        228,
        20,
        97,
        1,
        10,
        87,
        91,
        96,
        0,
        128,
        253,
        91,
        96,
        1,
        84,
        97,
        0,
        176,
        144,
        96,
        255,
        22,
        129,
        86,
        91,
        96,
        64,
        81,
        144,
        21,
        21,
        129,
        82,
        96,
        32,
        1,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        243,
        91,
        97,
        0,
        216,
        97,
        0,
        211,
        54,
        96,
        4,
        97,
        7,
        95,
        86,
        91,
        97,
        1,
        129,
        86,
        91,
        96,
        64,
        81,
        97,
        0,
        188,
        145,
        144,
        97,
        8,
        52,
        86,
        91,
        96,
        3,
        84,
        91,
        96,
        64,
        81,
        144,
        129,
        82,
        96,
        32,
        1,
        97,
        0,
        188,
        86,
        91,
        97,
        0,
        233,
        97,
        1,
        5,
        54,
        96,
        4,
        97,
        8,
        71,
        86,
        91,
        97,
        2,
        111,
        86,
        91,
        97,
        0,
        233,
        98,
        19,
        198,
        128,
        129,
        86,
        91,
        97,
        0,
        233,
        103,
        13,
        224,
        182,
        179,
        167,
        100,
        0,
        0,
        129,
        86,
        91,
        97,
        1,
        54,
        97,
        1,
        49,
        54,
        96,
        4,
        97,
        8,
        159,
        86,
        91,
        97,
        2,
        202,
        86,
        91,
        0,
        91,
        97,
        1,
        54,
        97,
        1,
        70,
        54,
        96,
        4,
        97,
        8,
        238,
        86,
        91,
        97,
        3,
        99,
        86,
        91,
        97,
        0,
        176,
        97,
        1,
        89,
        54,
        96,
        4,
        97,
        9,
        172,
        86,
        91,
        96,
        2,
        96,
        32,
        82,
        96,
        0,
        144,
        129,
        82,
        96,
        64,
        144,
        32,
        84,
        96,
        255,
        22,
        129,
        86,
        91,
        97,
        1,
        54,
        97,
        1,
        124,
        54,
        96,
        4,
        97,
        9,
        197,
        86,
        91,
        97,
        4,
        37,
        86,
        91,
        96,
        96,
        97,
        1,
        139,
        97,
        4,
        178,
        86,
        91,
        96,
        100,
        128,
        53,
        144,
        96,
        2,
        96,
        0,
        97,
        1,
        159,
        132,
        51,
        138,
        97,
        2,
        111,
        86,
        91,
        129,
        82,
        96,
        32,
        129,
        1,
        145,
        144,
        145,
        82,
        96,
        64,
        1,
        96,
        0,
        32,
        84,
        96,
        255,
        22,
        97,
        1,
        208,
        87,
        96,
        64,
        81,
        99,
        30,
        180,
        157,
        109,
        96,
        225,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        97,
        2,
        16,
        134,
        134,
        134,
        128,
        128,
        96,
        31,
        1,
        96,
        32,
        128,
        145,
        4,
        2,
        96,
        32,
        1,
        96,
        64,
        81,
        144,
        129,
        1,
        96,
        64,
        82,
        128,
        147,
        146,
        145,
        144,
        129,
        129,
        82,
        96,
        32,
        1,
        131,
        131,
        128,
        130,
        132,
        55,
        96,
        0,
        146,
        1,
        145,
        144,
        145,
        82,
        80,
        97,
        5,
        16,
        146,
        80,
        80,
        80,
        86,
        91,
        97,
        2,
        90,
        133,
        133,
        128,
        128,
        96,
        31,
        1,
        96,
        32,
        128,
        145,
        4,
        2,
        96,
        32,
        1,
        96,
        64,
        81,
        144,
        129,
        1,
        96,
        64,
        82,
        128,
        147,
        146,
        145,
        144,
        129,
        129,
        82,
        96,
        32,
        1,
        131,
        131,
        128,
        130,
        132,
        55,
        96,
        0,
        146,
        1,
        145,
        144,
        145,
        82,
        80,
        80,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        138,
        22,
        146,
        145,
        80,
        80,
        97,
        5,
        57,
        86,
        91,
        146,
        80,
        80,
        80,
        97,
        2,
        104,
        96,
        1,
        96,
        0,
        85,
        86,
        91,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        96,
        64,
        81,
        96,
        1,
        96,
        1,
        96,
        224,
        27,
        3,
        25,
        132,
        22,
        96,
        32,
        130,
        1,
        82,
        107,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        25,
        96,
        96,
        132,
        129,
        27,
        130,
        22,
        96,
        36,
        132,
        1,
        82,
        131,
        144,
        27,
        22,
        96,
        56,
        130,
        1,
        82,
        96,
        0,
        144,
        96,
        76,
        1,
        96,
        64,
        81,
        96,
        32,
        129,
        131,
        3,
        3,
        129,
        82,
        144,
        96,
        64,
        82,
        128,
        81,
        144,
        96,
        32,
        1,
        32,
        144,
        80,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        51,
        48,
        20,
        97,
        2,
        234,
        87,
        96,
        64,
        81,
        99,
        1,
        87,
        131,
        233,
        96,
        229,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        64,
        81,
        99,
        112,
        160,
        130,
        49,
        96,
        224,
        27,
        129,
        82,
        48,
        96,
        4,
        130,
        1,
        82,
        97,
        3,
        95,
        144,
        130,
        144,
        132,
        144,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        131,
        22,
        144,
        99,
        112,
        160,
        130,
        49,
        144,
        96,
        36,
        1,
        96,
        32,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        134,
        90,
        250,
        21,
        128,
        21,
        97,
        3,
        54,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        80,
        80,
        96,
        64,
        81,
        61,
        96,
        31,
        25,
        96,
        31,
        130,
        1,
        22,
        130,
        1,
        128,
        96,
        64,
        82,
        80,
        129,
        1,
        144,
        97,
        3,
        90,
        145,
        144,
        97,
        10,
        6,
        86,
        91,
        97,
        5,
        134,
        86,
        91,
        80,
        80,
        86,
        91,
        96,
        1,
        84,
        96,
        255,
        22,
        21,
        97,
        3,
        134,
        87,
        96,
        64,
        81,
        98,
        220,
        20,
        159,
        96,
        228,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        0,
        91,
        129,
        81,
        129,
        16,
        21,
        97,
        3,
        219,
        87,
        96,
        1,
        96,
        2,
        96,
        0,
        132,
        132,
        129,
        81,
        129,
        16,
        97,
        3,
        170,
        87,
        97,
        3,
        170,
        97,
        10,
        31,
        86,
        91,
        96,
        32,
        144,
        129,
        2,
        145,
        144,
        145,
        1,
        129,
        1,
        81,
        130,
        82,
        129,
        1,
        145,
        144,
        145,
        82,
        96,
        64,
        1,
        96,
        0,
        32,
        128,
        84,
        96,
        255,
        25,
        22,
        145,
        21,
        21,
        145,
        144,
        145,
        23,
        144,
        85,
        96,
        1,
        1,
        97,
        3,
        137,
        86,
        91,
        80,
        96,
        1,
        128,
        84,
        96,
        255,
        25,
        22,
        129,
        23,
        144,
        85,
        96,
        64,
        81,
        127,
        14,
        77,
        136,
        69,
        66,
        213,
        79,
        77,
        42,
        29,
        229,
        11,
        102,
        17,
        163,
        138,
        17,
        84,
        132,
        221,
        67,
        155,
        90,
        222,
        79,
        213,
        160,
        103,
        196,
        40,
        102,
        39,
        144,
        97,
        4,
        26,
        144,
        51,
        144,
        132,
        144,
        97,
        10,
        53,
        86,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        161,
        80,
        86,
        91,
        51,
        48,
        20,
        97,
        4,
        69,
        87,
        96,
        64,
        81,
        99,
        1,
        87,
        131,
        233,
        96,
        229,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        103,
        13,
        224,
        182,
        179,
        167,
        100,
        0,
        0,
        129,
        17,
        21,
        97,
        4,
        110,
        87,
        96,
        64,
        81,
        99,
        154,
        188,
        116,
        145,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        98,
        19,
        198,
        128,
        96,
        3,
        84,
        97,
        4,
        127,
        145,
        144,
        97,
        10,
        139,
        86,
        91,
        66,
        17,
        97,
        4,
        158,
        87,
        96,
        64,
        81,
        99,
        15,
        84,
        13,
        45,
        96,
        228,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        66,
        96,
        3,
        85,
        97,
        4,
        173,
        131,
        131,
        131,
        97,
        5,
        134,
        86,
        91,
        80,
        80,
        80,
        86,
        91,
        96,
        2,
        96,
        0,
        84,
        3,
        97,
        5,
        9,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        31,
        96,
        36,
        130,
        1,
        82,
        127,
        82,
        101,
        101,
        110,
        116,
        114,
        97,
        110,
        99,
        121,
        71,
        117,
        97,
        114,
        100,
        58,
        32,
        114,
        101,
        101,
        110,
        116,
        114,
        97,
        110,
        116,
        32,
        99,
        97,
        108,
        108,
        0,
        96,
        68,
        130,
        1,
        82,
        96,
        100,
        1,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        2,
        96,
        0,
        85,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        130,
        22,
        48,
        20,
        97,
        3,
        95,
        87,
        96,
        64,
        81,
        99,
        72,
        203,
        242,
        109,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        96,
        97,
        5,
        125,
        131,
        131,
        96,
        0,
        96,
        64,
        81,
        128,
        96,
        64,
        1,
        96,
        64,
        82,
        128,
        96,
        30,
        129,
        82,
        96,
        32,
        1,
        127,
        65,
        100,
        100,
        114,
        101,
        115,
        115,
        58,
        32,
        108,
        111,
        119,
        45,
        108,
        101,
        118,
        101,
        108,
        32,
        99,
        97,
        108,
        108,
        32,
        102,
        97,
        105,
        108,
        101,
        100,
        0,
        0,
        129,
        82,
        80,
        97,
        5,
        204,
        86,
        91,
        144,
        80,
        91,
        146,
        145,
        80,
        80,
        86,
        91,
        129,
        96,
        20,
        82,
        128,
        96,
        52,
        82,
        99,
        169,
        5,
        156,
        187,
        96,
        96,
        27,
        96,
        0,
        82,
        96,
        32,
        96,
        0,
        96,
        68,
        96,
        16,
        96,
        0,
        135,
        90,
        241,
        61,
        21,
        96,
        1,
        96,
        0,
        81,
        20,
        23,
        22,
        97,
        5,
        194,
        87,
        99,
        144,
        184,
        236,
        24,
        96,
        0,
        82,
        96,
        4,
        96,
        28,
        253,
        91,
        96,
        0,
        96,
        52,
        82,
        80,
        80,
        80,
        86,
        91,
        96,
        96,
        130,
        71,
        16,
        21,
        97,
        6,
        45,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        38,
        96,
        36,
        130,
        1,
        82,
        127,
        65,
        100,
        100,
        114,
        101,
        115,
        115,
        58,
        32,
        105,
        110,
        115,
        117,
        102,
        102,
        105,
        99,
        105,
        101,
        110,
        116,
        32,
        98,
        97,
        108,
        97,
        110,
        99,
        101,
        32,
        102,
        111,
        96,
        68,
        130,
        1,
        82,
        101,
        28,
        136,
        24,
        216,
        91,
        27,
        96,
        210,
        27,
        96,
        100,
        130,
        1,
        82,
        96,
        132,
        1,
        97,
        5,
        0,
        86,
        91,
        96,
        0,
        128,
        134,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        133,
        135,
        96,
        64,
        81,
        97,
        6,
        73,
        145,
        144,
        97,
        10,
        172,
        86,
        91,
        96,
        0,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        133,
        135,
        90,
        241,
        146,
        80,
        80,
        80,
        61,
        128,
        96,
        0,
        129,
        20,
        97,
        6,
        134,
        87,
        96,
        64,
        81,
        145,
        80,
        96,
        31,
        25,
        96,
        63,
        61,
        1,
        22,
        130,
        1,
        96,
        64,
        82,
        61,
        130,
        82,
        61,
        96,
        0,
        96,
        32,
        132,
        1,
        62,
        97,
        6,
        139,
        86,
        91,
        96,
        96,
        145,
        80,
        91,
        80,
        145,
        80,
        145,
        80,
        97,
        6,
        156,
        135,
        131,
        131,
        135,
        97,
        6,
        169,
        86,
        91,
        146,
        80,
        80,
        80,
        91,
        148,
        147,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        96,
        131,
        21,
        97,
        7,
        24,
        87,
        130,
        81,
        96,
        0,
        3,
        97,
        7,
        17,
        87,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        133,
        22,
        59,
        97,
        7,
        17,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        29,
        96,
        36,
        130,
        1,
        82,
        127,
        65,
        100,
        100,
        114,
        101,
        115,
        115,
        58,
        32,
        99,
        97,
        108,
        108,
        32,
        116,
        111,
        32,
        110,
        111,
        110,
        45,
        99,
        111,
        110,
        116,
        114,
        97,
        99,
        116,
        0,
        0,
        0,
        96,
        68,
        130,
        1,
        82,
        96,
        100,
        1,
        97,
        5,
        0,
        86,
        91,
        80,
        129,
        97,
        6,
        161,
        86,
        91,
        97,
        6,
        161,
        131,
        131,
        129,
        81,
        21,
        97,
        7,
        45,
        87,
        129,
        81,
        128,
        131,
        96,
        32,
        1,
        253,
        91,
        128,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        4,
        1,
        97,
        5,
        0,
        145,
        144,
        97,
        8,
        52,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        129,
        20,
        97,
        7,
        92,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        0,
        96,
        64,
        132,
        134,
        3,
        18,
        21,
        97,
        7,
        116,
        87,
        96,
        0,
        128,
        253,
        91,
        131,
        53,
        97,
        7,
        127,
        129,
        97,
        7,
        71,
        86,
        91,
        146,
        80,
        96,
        32,
        132,
        1,
        53,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        128,
        130,
        17,
        21,
        97,
        7,
        156,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        134,
        1,
        145,
        80,
        134,
        96,
        31,
        131,
        1,
        18,
        97,
        7,
        176,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        53,
        129,
        129,
        17,
        21,
        97,
        7,
        191,
        87,
        96,
        0,
        128,
        253,
        91,
        135,
        96,
        32,
        130,
        133,
        1,
        1,
        17,
        21,
        97,
        7,
        209,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        32,
        131,
        1,
        148,
        80,
        128,
        147,
        80,
        80,
        80,
        80,
        146,
        80,
        146,
        80,
        146,
        86,
        91,
        96,
        0,
        91,
        131,
        129,
        16,
        21,
        97,
        7,
        255,
        87,
        129,
        129,
        1,
        81,
        131,
        130,
        1,
        82,
        96,
        32,
        1,
        97,
        7,
        231,
        86,
        91,
        80,
        80,
        96,
        0,
        145,
        1,
        82,
        86,
        91,
        96,
        0,
        129,
        81,
        128,
        132,
        82,
        97,
        8,
        32,
        129,
        96,
        32,
        134,
        1,
        96,
        32,
        134,
        1,
        97,
        7,
        228,
        86,
        91,
        96,
        31,
        1,
        96,
        31,
        25,
        22,
        146,
        144,
        146,
        1,
        96,
        32,
        1,
        146,
        145,
        80,
        80,
        86,
        91,
        96,
        32,
        129,
        82,
        96,
        0,
        97,
        5,
        125,
        96,
        32,
        131,
        1,
        132,
        97,
        8,
        8,
        86,
        91,
        96,
        0,
        128,
        96,
        0,
        96,
        96,
        132,
        134,
        3,
        18,
        21,
        97,
        8,
        92,
        87,
        96,
        0,
        128,
        253,
        91,
        131,
        53,
        96,
        1,
        96,
        1,
        96,
        224,
        27,
        3,
        25,
        129,
        22,
        129,
        20,
        97,
        8,
        116,
        87,
        96,
        0,
        128,
        253,
        91,
        146,
        80,
        96,
        32,
        132,
        1,
        53,
        97,
        8,
        132,
        129,
        97,
        7,
        71,
        86,
        91,
        145,
        80,
        96,
        64,
        132,
        1,
        53,
        97,
        8,
        148,
        129,
        97,
        7,
        71,
        86,
        91,
        128,
        145,
        80,
        80,
        146,
        80,
        146,
        80,
        146,
        86,
        91,
        96,
        0,
        128,
        96,
        64,
        131,
        133,
        3,
        18,
        21,
        97,
        8,
        178,
        87,
        96,
        0,
        128,
        253,
        91,
        130,
        53,
        97,
        8,
        189,
        129,
        97,
        7,
        71,
        86,
        91,
        145,
        80,
        96,
        32,
        131,
        1,
        53,
        97,
        8,
        205,
        129,
        97,
        7,
        71,
        86,
        91,
        128,
        145,
        80,
        80,
        146,
        80,
        146,
        144,
        80,
        86,
        91,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        65,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        96,
        0,
        96,
        32,
        128,
        131,
        133,
        3,
        18,
        21,
        97,
        9,
        1,
        87,
        96,
        0,
        128,
        253,
        91,
        130,
        53,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        128,
        130,
        17,
        21,
        97,
        9,
        25,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        133,
        1,
        145,
        80,
        133,
        96,
        31,
        131,
        1,
        18,
        97,
        9,
        45,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        53,
        129,
        129,
        17,
        21,
        97,
        9,
        63,
        87,
        97,
        9,
        63,
        97,
        8,
        216,
        86,
        91,
        128,
        96,
        5,
        27,
        96,
        64,
        81,
        96,
        31,
        25,
        96,
        63,
        131,
        1,
        22,
        129,
        1,
        129,
        129,
        16,
        133,
        130,
        17,
        23,
        21,
        97,
        9,
        100,
        87,
        97,
        9,
        100,
        97,
        8,
        216,
        86,
        91,
        96,
        64,
        82,
        145,
        130,
        82,
        132,
        130,
        1,
        146,
        80,
        131,
        129,
        1,
        133,
        1,
        145,
        136,
        131,
        17,
        21,
        97,
        9,
        130,
        87,
        96,
        0,
        128,
        253,
        91,
        147,
        133,
        1,
        147,
        91,
        130,
        133,
        16,
        21,
        97,
        9,
        160,
        87,
        132,
        53,
        132,
        82,
        147,
        133,
        1,
        147,
        146,
        133,
        1,
        146,
        97,
        9,
        135,
        86,
        91,
        152,
        151,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        9,
        190,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        53,
        145,
        144,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        0,
        96,
        96,
        132,
        134,
        3,
        18,
        21,
        97,
        9,
        218,
        87,
        96,
        0,
        128,
        253,
        91,
        131,
        53,
        97,
        9,
        229,
        129,
        97,
        7,
        71,
        86,
        91,
        146,
        80,
        96,
        32,
        132,
        1,
        53,
        97,
        9,
        245,
        129,
        97,
        7,
        71,
        86,
        91,
        146,
        149,
        146,
        148,
        80,
        80,
        80,
        96,
        64,
        145,
        144,
        145,
        1,
        53,
        144,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        10,
        24,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        81,
        145,
        144,
        80,
        86,
        91,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        50,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        131,
        22,
        129,
        82,
        96,
        64,
        96,
        32,
        128,
        131,
        1,
        130,
        144,
        82,
        131,
        81,
        145,
        131,
        1,
        130,
        144,
        82,
        96,
        0,
        145,
        132,
        130,
        1,
        145,
        144,
        96,
        96,
        133,
        1,
        144,
        132,
        91,
        129,
        129,
        16,
        21,
        97,
        10,
        126,
        87,
        132,
        81,
        131,
        82,
        147,
        131,
        1,
        147,
        145,
        131,
        1,
        145,
        96,
        1,
        1,
        97,
        10,
        98,
        86,
        91,
        80,
        144,
        151,
        150,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        128,
        130,
        1,
        128,
        130,
        17,
        21,
        97,
        5,
        128,
        87,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        17,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        96,
        0,
        130,
        81,
        97,
        10,
        190,
        129,
        132,
        96,
        32,
        135,
        1,
        97,
        7,
        228,
        86,
        91,
        145,
        144,
        145,
        1,
        146,
        145,
        80,
        80,
        86,
        254,
        162,
        100,
        105,
        112,
        102,
        115,
        88,
        34,
        18,
        32,
        244,
        244,
        177,
        135,
        36,
        34,
        16,
        172,
        16,
        159,
        190,
        135,
        124,
        214,
        53,
        59,
        81,
        155,
        59,
        174,
        172,
        223,
        10,
        137,
        187,
        119,
        49,
        255,
        149,
        131,
        8,
        83,
        100,
        115,
        111,
        108,
        99,
        67,
        0,
        8,
        20,
        0,
        51,
    ];
    ///The bytecode of the contract.
    pub static SELFAUTHORIZEDVAULT_BYTECODE: ::ethers::core::types::Bytes = ::ethers::core::types::Bytes::from_static(
        __BYTECODE,
    );
    #[rustfmt::skip]
    const __DEPLOYED_BYTECODE: &[u8] = &[
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        4,
        54,
        16,
        97,
        0,
        158,
        87,
        96,
        0,
        53,
        96,
        224,
        28,
        128,
        99,
        130,
        238,
        13,
        29,
        17,
        97,
        0,
        102,
        87,
        128,
        99,
        130,
        238,
        13,
        29,
        20,
        97,
        1,
        20,
        87,
        128,
        99,
        133,
        251,
        112,
        157,
        20,
        97,
        1,
        35,
        87,
        128,
        99,
        174,
        171,
        174,
        107,
        20,
        97,
        1,
        56,
        87,
        128,
        99,
        180,
        210,
        56,
        143,
        20,
        97,
        1,
        75,
        87,
        128,
        99,
        217,
        202,
        237,
        18,
        20,
        97,
        1,
        110,
        87,
        96,
        0,
        128,
        253,
        91,
        128,
        99,
        21,
        142,
        249,
        62,
        20,
        97,
        0,
        163,
        87,
        128,
        99,
        28,
        255,
        121,
        205,
        20,
        97,
        0,
        197,
        87,
        128,
        99,
        38,
        109,
        247,
        130,
        20,
        97,
        0,
        229,
        87,
        128,
        99,
        62,
        21,
        36,
        153,
        20,
        97,
        0,
        247,
        87,
        128,
        99,
        111,
        133,
        199,
        228,
        20,
        97,
        1,
        10,
        87,
        91,
        96,
        0,
        128,
        253,
        91,
        96,
        1,
        84,
        97,
        0,
        176,
        144,
        96,
        255,
        22,
        129,
        86,
        91,
        96,
        64,
        81,
        144,
        21,
        21,
        129,
        82,
        96,
        32,
        1,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        243,
        91,
        97,
        0,
        216,
        97,
        0,
        211,
        54,
        96,
        4,
        97,
        7,
        95,
        86,
        91,
        97,
        1,
        129,
        86,
        91,
        96,
        64,
        81,
        97,
        0,
        188,
        145,
        144,
        97,
        8,
        52,
        86,
        91,
        96,
        3,
        84,
        91,
        96,
        64,
        81,
        144,
        129,
        82,
        96,
        32,
        1,
        97,
        0,
        188,
        86,
        91,
        97,
        0,
        233,
        97,
        1,
        5,
        54,
        96,
        4,
        97,
        8,
        71,
        86,
        91,
        97,
        2,
        111,
        86,
        91,
        97,
        0,
        233,
        98,
        19,
        198,
        128,
        129,
        86,
        91,
        97,
        0,
        233,
        103,
        13,
        224,
        182,
        179,
        167,
        100,
        0,
        0,
        129,
        86,
        91,
        97,
        1,
        54,
        97,
        1,
        49,
        54,
        96,
        4,
        97,
        8,
        159,
        86,
        91,
        97,
        2,
        202,
        86,
        91,
        0,
        91,
        97,
        1,
        54,
        97,
        1,
        70,
        54,
        96,
        4,
        97,
        8,
        238,
        86,
        91,
        97,
        3,
        99,
        86,
        91,
        97,
        0,
        176,
        97,
        1,
        89,
        54,
        96,
        4,
        97,
        9,
        172,
        86,
        91,
        96,
        2,
        96,
        32,
        82,
        96,
        0,
        144,
        129,
        82,
        96,
        64,
        144,
        32,
        84,
        96,
        255,
        22,
        129,
        86,
        91,
        97,
        1,
        54,
        97,
        1,
        124,
        54,
        96,
        4,
        97,
        9,
        197,
        86,
        91,
        97,
        4,
        37,
        86,
        91,
        96,
        96,
        97,
        1,
        139,
        97,
        4,
        178,
        86,
        91,
        96,
        100,
        128,
        53,
        144,
        96,
        2,
        96,
        0,
        97,
        1,
        159,
        132,
        51,
        138,
        97,
        2,
        111,
        86,
        91,
        129,
        82,
        96,
        32,
        129,
        1,
        145,
        144,
        145,
        82,
        96,
        64,
        1,
        96,
        0,
        32,
        84,
        96,
        255,
        22,
        97,
        1,
        208,
        87,
        96,
        64,
        81,
        99,
        30,
        180,
        157,
        109,
        96,
        225,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        97,
        2,
        16,
        134,
        134,
        134,
        128,
        128,
        96,
        31,
        1,
        96,
        32,
        128,
        145,
        4,
        2,
        96,
        32,
        1,
        96,
        64,
        81,
        144,
        129,
        1,
        96,
        64,
        82,
        128,
        147,
        146,
        145,
        144,
        129,
        129,
        82,
        96,
        32,
        1,
        131,
        131,
        128,
        130,
        132,
        55,
        96,
        0,
        146,
        1,
        145,
        144,
        145,
        82,
        80,
        97,
        5,
        16,
        146,
        80,
        80,
        80,
        86,
        91,
        97,
        2,
        90,
        133,
        133,
        128,
        128,
        96,
        31,
        1,
        96,
        32,
        128,
        145,
        4,
        2,
        96,
        32,
        1,
        96,
        64,
        81,
        144,
        129,
        1,
        96,
        64,
        82,
        128,
        147,
        146,
        145,
        144,
        129,
        129,
        82,
        96,
        32,
        1,
        131,
        131,
        128,
        130,
        132,
        55,
        96,
        0,
        146,
        1,
        145,
        144,
        145,
        82,
        80,
        80,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        138,
        22,
        146,
        145,
        80,
        80,
        97,
        5,
        57,
        86,
        91,
        146,
        80,
        80,
        80,
        97,
        2,
        104,
        96,
        1,
        96,
        0,
        85,
        86,
        91,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        96,
        64,
        81,
        96,
        1,
        96,
        1,
        96,
        224,
        27,
        3,
        25,
        132,
        22,
        96,
        32,
        130,
        1,
        82,
        107,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        25,
        96,
        96,
        132,
        129,
        27,
        130,
        22,
        96,
        36,
        132,
        1,
        82,
        131,
        144,
        27,
        22,
        96,
        56,
        130,
        1,
        82,
        96,
        0,
        144,
        96,
        76,
        1,
        96,
        64,
        81,
        96,
        32,
        129,
        131,
        3,
        3,
        129,
        82,
        144,
        96,
        64,
        82,
        128,
        81,
        144,
        96,
        32,
        1,
        32,
        144,
        80,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        51,
        48,
        20,
        97,
        2,
        234,
        87,
        96,
        64,
        81,
        99,
        1,
        87,
        131,
        233,
        96,
        229,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        64,
        81,
        99,
        112,
        160,
        130,
        49,
        96,
        224,
        27,
        129,
        82,
        48,
        96,
        4,
        130,
        1,
        82,
        97,
        3,
        95,
        144,
        130,
        144,
        132,
        144,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        131,
        22,
        144,
        99,
        112,
        160,
        130,
        49,
        144,
        96,
        36,
        1,
        96,
        32,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        134,
        90,
        250,
        21,
        128,
        21,
        97,
        3,
        54,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        80,
        80,
        96,
        64,
        81,
        61,
        96,
        31,
        25,
        96,
        31,
        130,
        1,
        22,
        130,
        1,
        128,
        96,
        64,
        82,
        80,
        129,
        1,
        144,
        97,
        3,
        90,
        145,
        144,
        97,
        10,
        6,
        86,
        91,
        97,
        5,
        134,
        86,
        91,
        80,
        80,
        86,
        91,
        96,
        1,
        84,
        96,
        255,
        22,
        21,
        97,
        3,
        134,
        87,
        96,
        64,
        81,
        98,
        220,
        20,
        159,
        96,
        228,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        0,
        91,
        129,
        81,
        129,
        16,
        21,
        97,
        3,
        219,
        87,
        96,
        1,
        96,
        2,
        96,
        0,
        132,
        132,
        129,
        81,
        129,
        16,
        97,
        3,
        170,
        87,
        97,
        3,
        170,
        97,
        10,
        31,
        86,
        91,
        96,
        32,
        144,
        129,
        2,
        145,
        144,
        145,
        1,
        129,
        1,
        81,
        130,
        82,
        129,
        1,
        145,
        144,
        145,
        82,
        96,
        64,
        1,
        96,
        0,
        32,
        128,
        84,
        96,
        255,
        25,
        22,
        145,
        21,
        21,
        145,
        144,
        145,
        23,
        144,
        85,
        96,
        1,
        1,
        97,
        3,
        137,
        86,
        91,
        80,
        96,
        1,
        128,
        84,
        96,
        255,
        25,
        22,
        129,
        23,
        144,
        85,
        96,
        64,
        81,
        127,
        14,
        77,
        136,
        69,
        66,
        213,
        79,
        77,
        42,
        29,
        229,
        11,
        102,
        17,
        163,
        138,
        17,
        84,
        132,
        221,
        67,
        155,
        90,
        222,
        79,
        213,
        160,
        103,
        196,
        40,
        102,
        39,
        144,
        97,
        4,
        26,
        144,
        51,
        144,
        132,
        144,
        97,
        10,
        53,
        86,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        161,
        80,
        86,
        91,
        51,
        48,
        20,
        97,
        4,
        69,
        87,
        96,
        64,
        81,
        99,
        1,
        87,
        131,
        233,
        96,
        229,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        103,
        13,
        224,
        182,
        179,
        167,
        100,
        0,
        0,
        129,
        17,
        21,
        97,
        4,
        110,
        87,
        96,
        64,
        81,
        99,
        154,
        188,
        116,
        145,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        98,
        19,
        198,
        128,
        96,
        3,
        84,
        97,
        4,
        127,
        145,
        144,
        97,
        10,
        139,
        86,
        91,
        66,
        17,
        97,
        4,
        158,
        87,
        96,
        64,
        81,
        99,
        15,
        84,
        13,
        45,
        96,
        228,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        66,
        96,
        3,
        85,
        97,
        4,
        173,
        131,
        131,
        131,
        97,
        5,
        134,
        86,
        91,
        80,
        80,
        80,
        86,
        91,
        96,
        2,
        96,
        0,
        84,
        3,
        97,
        5,
        9,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        31,
        96,
        36,
        130,
        1,
        82,
        127,
        82,
        101,
        101,
        110,
        116,
        114,
        97,
        110,
        99,
        121,
        71,
        117,
        97,
        114,
        100,
        58,
        32,
        114,
        101,
        101,
        110,
        116,
        114,
        97,
        110,
        116,
        32,
        99,
        97,
        108,
        108,
        0,
        96,
        68,
        130,
        1,
        82,
        96,
        100,
        1,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        2,
        96,
        0,
        85,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        130,
        22,
        48,
        20,
        97,
        3,
        95,
        87,
        96,
        64,
        81,
        99,
        72,
        203,
        242,
        109,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        96,
        97,
        5,
        125,
        131,
        131,
        96,
        0,
        96,
        64,
        81,
        128,
        96,
        64,
        1,
        96,
        64,
        82,
        128,
        96,
        30,
        129,
        82,
        96,
        32,
        1,
        127,
        65,
        100,
        100,
        114,
        101,
        115,
        115,
        58,
        32,
        108,
        111,
        119,
        45,
        108,
        101,
        118,
        101,
        108,
        32,
        99,
        97,
        108,
        108,
        32,
        102,
        97,
        105,
        108,
        101,
        100,
        0,
        0,
        129,
        82,
        80,
        97,
        5,
        204,
        86,
        91,
        144,
        80,
        91,
        146,
        145,
        80,
        80,
        86,
        91,
        129,
        96,
        20,
        82,
        128,
        96,
        52,
        82,
        99,
        169,
        5,
        156,
        187,
        96,
        96,
        27,
        96,
        0,
        82,
        96,
        32,
        96,
        0,
        96,
        68,
        96,
        16,
        96,
        0,
        135,
        90,
        241,
        61,
        21,
        96,
        1,
        96,
        0,
        81,
        20,
        23,
        22,
        97,
        5,
        194,
        87,
        99,
        144,
        184,
        236,
        24,
        96,
        0,
        82,
        96,
        4,
        96,
        28,
        253,
        91,
        96,
        0,
        96,
        52,
        82,
        80,
        80,
        80,
        86,
        91,
        96,
        96,
        130,
        71,
        16,
        21,
        97,
        6,
        45,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        38,
        96,
        36,
        130,
        1,
        82,
        127,
        65,
        100,
        100,
        114,
        101,
        115,
        115,
        58,
        32,
        105,
        110,
        115,
        117,
        102,
        102,
        105,
        99,
        105,
        101,
        110,
        116,
        32,
        98,
        97,
        108,
        97,
        110,
        99,
        101,
        32,
        102,
        111,
        96,
        68,
        130,
        1,
        82,
        101,
        28,
        136,
        24,
        216,
        91,
        27,
        96,
        210,
        27,
        96,
        100,
        130,
        1,
        82,
        96,
        132,
        1,
        97,
        5,
        0,
        86,
        91,
        96,
        0,
        128,
        134,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        133,
        135,
        96,
        64,
        81,
        97,
        6,
        73,
        145,
        144,
        97,
        10,
        172,
        86,
        91,
        96,
        0,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        133,
        135,
        90,
        241,
        146,
        80,
        80,
        80,
        61,
        128,
        96,
        0,
        129,
        20,
        97,
        6,
        134,
        87,
        96,
        64,
        81,
        145,
        80,
        96,
        31,
        25,
        96,
        63,
        61,
        1,
        22,
        130,
        1,
        96,
        64,
        82,
        61,
        130,
        82,
        61,
        96,
        0,
        96,
        32,
        132,
        1,
        62,
        97,
        6,
        139,
        86,
        91,
        96,
        96,
        145,
        80,
        91,
        80,
        145,
        80,
        145,
        80,
        97,
        6,
        156,
        135,
        131,
        131,
        135,
        97,
        6,
        169,
        86,
        91,
        146,
        80,
        80,
        80,
        91,
        148,
        147,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        96,
        131,
        21,
        97,
        7,
        24,
        87,
        130,
        81,
        96,
        0,
        3,
        97,
        7,
        17,
        87,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        133,
        22,
        59,
        97,
        7,
        17,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        29,
        96,
        36,
        130,
        1,
        82,
        127,
        65,
        100,
        100,
        114,
        101,
        115,
        115,
        58,
        32,
        99,
        97,
        108,
        108,
        32,
        116,
        111,
        32,
        110,
        111,
        110,
        45,
        99,
        111,
        110,
        116,
        114,
        97,
        99,
        116,
        0,
        0,
        0,
        96,
        68,
        130,
        1,
        82,
        96,
        100,
        1,
        97,
        5,
        0,
        86,
        91,
        80,
        129,
        97,
        6,
        161,
        86,
        91,
        97,
        6,
        161,
        131,
        131,
        129,
        81,
        21,
        97,
        7,
        45,
        87,
        129,
        81,
        128,
        131,
        96,
        32,
        1,
        253,
        91,
        128,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        4,
        1,
        97,
        5,
        0,
        145,
        144,
        97,
        8,
        52,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        129,
        20,
        97,
        7,
        92,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        0,
        96,
        64,
        132,
        134,
        3,
        18,
        21,
        97,
        7,
        116,
        87,
        96,
        0,
        128,
        253,
        91,
        131,
        53,
        97,
        7,
        127,
        129,
        97,
        7,
        71,
        86,
        91,
        146,
        80,
        96,
        32,
        132,
        1,
        53,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        128,
        130,
        17,
        21,
        97,
        7,
        156,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        134,
        1,
        145,
        80,
        134,
        96,
        31,
        131,
        1,
        18,
        97,
        7,
        176,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        53,
        129,
        129,
        17,
        21,
        97,
        7,
        191,
        87,
        96,
        0,
        128,
        253,
        91,
        135,
        96,
        32,
        130,
        133,
        1,
        1,
        17,
        21,
        97,
        7,
        209,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        32,
        131,
        1,
        148,
        80,
        128,
        147,
        80,
        80,
        80,
        80,
        146,
        80,
        146,
        80,
        146,
        86,
        91,
        96,
        0,
        91,
        131,
        129,
        16,
        21,
        97,
        7,
        255,
        87,
        129,
        129,
        1,
        81,
        131,
        130,
        1,
        82,
        96,
        32,
        1,
        97,
        7,
        231,
        86,
        91,
        80,
        80,
        96,
        0,
        145,
        1,
        82,
        86,
        91,
        96,
        0,
        129,
        81,
        128,
        132,
        82,
        97,
        8,
        32,
        129,
        96,
        32,
        134,
        1,
        96,
        32,
        134,
        1,
        97,
        7,
        228,
        86,
        91,
        96,
        31,
        1,
        96,
        31,
        25,
        22,
        146,
        144,
        146,
        1,
        96,
        32,
        1,
        146,
        145,
        80,
        80,
        86,
        91,
        96,
        32,
        129,
        82,
        96,
        0,
        97,
        5,
        125,
        96,
        32,
        131,
        1,
        132,
        97,
        8,
        8,
        86,
        91,
        96,
        0,
        128,
        96,
        0,
        96,
        96,
        132,
        134,
        3,
        18,
        21,
        97,
        8,
        92,
        87,
        96,
        0,
        128,
        253,
        91,
        131,
        53,
        96,
        1,
        96,
        1,
        96,
        224,
        27,
        3,
        25,
        129,
        22,
        129,
        20,
        97,
        8,
        116,
        87,
        96,
        0,
        128,
        253,
        91,
        146,
        80,
        96,
        32,
        132,
        1,
        53,
        97,
        8,
        132,
        129,
        97,
        7,
        71,
        86,
        91,
        145,
        80,
        96,
        64,
        132,
        1,
        53,
        97,
        8,
        148,
        129,
        97,
        7,
        71,
        86,
        91,
        128,
        145,
        80,
        80,
        146,
        80,
        146,
        80,
        146,
        86,
        91,
        96,
        0,
        128,
        96,
        64,
        131,
        133,
        3,
        18,
        21,
        97,
        8,
        178,
        87,
        96,
        0,
        128,
        253,
        91,
        130,
        53,
        97,
        8,
        189,
        129,
        97,
        7,
        71,
        86,
        91,
        145,
        80,
        96,
        32,
        131,
        1,
        53,
        97,
        8,
        205,
        129,
        97,
        7,
        71,
        86,
        91,
        128,
        145,
        80,
        80,
        146,
        80,
        146,
        144,
        80,
        86,
        91,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        65,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        96,
        0,
        96,
        32,
        128,
        131,
        133,
        3,
        18,
        21,
        97,
        9,
        1,
        87,
        96,
        0,
        128,
        253,
        91,
        130,
        53,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        128,
        130,
        17,
        21,
        97,
        9,
        25,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        133,
        1,
        145,
        80,
        133,
        96,
        31,
        131,
        1,
        18,
        97,
        9,
        45,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        53,
        129,
        129,
        17,
        21,
        97,
        9,
        63,
        87,
        97,
        9,
        63,
        97,
        8,
        216,
        86,
        91,
        128,
        96,
        5,
        27,
        96,
        64,
        81,
        96,
        31,
        25,
        96,
        63,
        131,
        1,
        22,
        129,
        1,
        129,
        129,
        16,
        133,
        130,
        17,
        23,
        21,
        97,
        9,
        100,
        87,
        97,
        9,
        100,
        97,
        8,
        216,
        86,
        91,
        96,
        64,
        82,
        145,
        130,
        82,
        132,
        130,
        1,
        146,
        80,
        131,
        129,
        1,
        133,
        1,
        145,
        136,
        131,
        17,
        21,
        97,
        9,
        130,
        87,
        96,
        0,
        128,
        253,
        91,
        147,
        133,
        1,
        147,
        91,
        130,
        133,
        16,
        21,
        97,
        9,
        160,
        87,
        132,
        53,
        132,
        82,
        147,
        133,
        1,
        147,
        146,
        133,
        1,
        146,
        97,
        9,
        135,
        86,
        91,
        152,
        151,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        9,
        190,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        53,
        145,
        144,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        0,
        96,
        96,
        132,
        134,
        3,
        18,
        21,
        97,
        9,
        218,
        87,
        96,
        0,
        128,
        253,
        91,
        131,
        53,
        97,
        9,
        229,
        129,
        97,
        7,
        71,
        86,
        91,
        146,
        80,
        96,
        32,
        132,
        1,
        53,
        97,
        9,
        245,
        129,
        97,
        7,
        71,
        86,
        91,
        146,
        149,
        146,
        148,
        80,
        80,
        80,
        96,
        64,
        145,
        144,
        145,
        1,
        53,
        144,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        10,
        24,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        81,
        145,
        144,
        80,
        86,
        91,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        50,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        131,
        22,
        129,
        82,
        96,
        64,
        96,
        32,
        128,
        131,
        1,
        130,
        144,
        82,
        131,
        81,
        145,
        131,
        1,
        130,
        144,
        82,
        96,
        0,
        145,
        132,
        130,
        1,
        145,
        144,
        96,
        96,
        133,
        1,
        144,
        132,
        91,
        129,
        129,
        16,
        21,
        97,
        10,
        126,
        87,
        132,
        81,
        131,
        82,
        147,
        131,
        1,
        147,
        145,
        131,
        1,
        145,
        96,
        1,
        1,
        97,
        10,
        98,
        86,
        91,
        80,
        144,
        151,
        150,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        128,
        130,
        1,
        128,
        130,
        17,
        21,
        97,
        5,
        128,
        87,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        17,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        96,
        0,
        130,
        81,
        97,
        10,
        190,
        129,
        132,
        96,
        32,
        135,
        1,
        97,
        7,
        228,
        86,
        91,
        145,
        144,
        145,
        1,
        146,
        145,
        80,
        80,
        86,
        254,
        162,
        100,
        105,
        112,
        102,
        115,
        88,
        34,
        18,
        32,
        244,
        244,
        177,
        135,
        36,
        34,
        16,
        172,
        16,
        159,
        190,
        135,
        124,
        214,
        53,
        59,
        81,
        155,
        59,
        174,
        172,
        223,
        10,
        137,
        187,
        119,
        49,
        255,
        149,
        131,
        8,
        83,
        100,
        115,
        111,
        108,
        99,
        67,
        0,
        8,
        20,
        0,
        51,
    ];
    ///The deployed bytecode of the contract.
    pub static SELFAUTHORIZEDVAULT_DEPLOYED_BYTECODE: ::ethers::core::types::Bytes = ::ethers::core::types::Bytes::from_static(
        __DEPLOYED_BYTECODE,
    );
    pub struct SelfAuthorizedVault<M>(::ethers::contract::Contract<M>);
    impl<M> ::core::clone::Clone for SelfAuthorizedVault<M> {
        fn clone(&self) -> Self {
            Self(::core::clone::Clone::clone(&self.0))
        }
    }
    impl<M> ::core::ops::Deref for SelfAuthorizedVault<M> {
        type Target = ::ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M> ::core::ops::DerefMut for SelfAuthorizedVault<M> {
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl<M> ::core::fmt::Debug for SelfAuthorizedVault<M> {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple(stringify!(SelfAuthorizedVault))
                .field(&self.address())
                .finish()
        }
    }
    impl<M: ::ethers::providers::Middleware> SelfAuthorizedVault<M> {
        /// Creates a new contract instance with the specified `ethers` client at
        /// `address`. The contract derefs to a `ethers::Contract` object.
        pub fn new<T: Into<::ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            Self(
                ::ethers::contract::Contract::new(
                    address.into(),
                    SELFAUTHORIZEDVAULT_ABI.clone(),
                    client,
                ),
            )
        }
        /// Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it.
        /// Returns a new instance of a deployer that returns an instance of this contract after sending the transaction
        ///
        /// Notes:
        /// - If there are no constructor arguments, you should pass `()` as the argument.
        /// - The default poll duration is 7 seconds.
        /// - The default number of confirmations is 1 block.
        ///
        ///
        /// # Example
        ///
        /// Generate contract bindings with `abigen!` and deploy a new contract instance.
        ///
        /// *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact.
        ///
        /// ```ignore
        /// # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {
        ///     abigen!(Greeter, "../greeter.json");
        ///
        ///    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();
        ///    let msg = greeter_contract.greet().call().await.unwrap();
        /// # }
        /// ```
        pub fn deploy<T: ::ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::core::result::Result<
            ::ethers::contract::builders::ContractDeployer<M, Self>,
            ::ethers::contract::ContractError<M>,
        > {
            let factory = ::ethers::contract::ContractFactory::new(
                SELFAUTHORIZEDVAULT_ABI.clone(),
                SELFAUTHORIZEDVAULT_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ::ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        ///Calls the contract's `WAITING_PERIOD` (0x6f85c7e4) function
        pub fn waiting_period(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([111, 133, 199, 228], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `WITHDRAWAL_LIMIT` (0x82ee0d1d) function
        pub fn withdrawal_limit(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([130, 238, 13, 29], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `execute` (0x1cff79cd) function
        pub fn execute(
            &self,
            target: ::ethers::core::types::Address,
            action_data: ::ethers::core::types::Bytes,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::ethers::core::types::Bytes,
        > {
            self.0
                .method_hash([28, 255, 121, 205], (target, action_data))
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `getActionId` (0x3e152499) function
        pub fn get_action_id(
            &self,
            selector: [u8; 4],
            executor: ::ethers::core::types::Address,
            target: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, [u8; 32]> {
            self.0
                .method_hash([62, 21, 36, 153], (selector, executor, target))
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `getLastWithdrawalTimestamp` (0x266df782) function
        pub fn get_last_withdrawal_timestamp(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([38, 109, 247, 130], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `initialized` (0x158ef93e) function
        pub fn initialized(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([21, 142, 249, 62], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `permissions` (0xb4d2388f) function
        pub fn permissions(
            &self,
            p0: [u8; 32],
        ) -> ::ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([180, 210, 56, 143], p0)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `setPermissions` (0xaeabae6b) function
        pub fn set_permissions(
            &self,
            ids: ::std::vec::Vec<[u8; 32]>,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([174, 171, 174, 107], ids)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `sweepFunds` (0x85fb709d) function
        pub fn sweep_funds(
            &self,
            receiver: ::ethers::core::types::Address,
            token: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([133, 251, 112, 157], (receiver, token))
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `withdraw` (0xd9caed12) function
        pub fn withdraw(
            &self,
            token: ::ethers::core::types::Address,
            recipient: ::ethers::core::types::Address,
            amount: ::ethers::core::types::U256,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([217, 202, 237, 18], (token, recipient, amount))
                .expect("method not found (this should never happen)")
        }
        ///Gets the contract's `Initialized` event
        pub fn initialized_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<
            ::std::sync::Arc<M>,
            M,
            InitializedFilter,
        > {
            self.0.event()
        }
        /// Returns an `Event` builder for all the events of this contract.
        pub fn events(
            &self,
        ) -> ::ethers::contract::builders::Event<
            ::std::sync::Arc<M>,
            M,
            InitializedFilter,
        > {
            self.0.event_with_filter(::core::default::Default::default())
        }
    }
    impl<M: ::ethers::providers::Middleware> From<::ethers::contract::Contract<M>>
    for SelfAuthorizedVault<M> {
        fn from(contract: ::ethers::contract::Contract<M>) -> Self {
            Self::new(contract.address(), contract.client())
        }
    }
    ///Custom Error type `AlreadyInitialized` with signature `AlreadyInitialized()` and selector `0x0dc149f0`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(name = "AlreadyInitialized", abi = "AlreadyInitialized()")]
    pub struct AlreadyInitialized;
    ///Custom Error type `CallerNotAllowed` with signature `CallerNotAllowed()` and selector `0x2af07d20`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(name = "CallerNotAllowed", abi = "CallerNotAllowed()")]
    pub struct CallerNotAllowed;
    ///Custom Error type `InvalidWithdrawalAmount` with signature `InvalidWithdrawalAmount()` and selector `0x9abc7491`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(name = "InvalidWithdrawalAmount", abi = "InvalidWithdrawalAmount()")]
    pub struct InvalidWithdrawalAmount;
    ///Custom Error type `NotAllowed` with signature `NotAllowed()` and selector `0x3d693ada`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(name = "NotAllowed", abi = "NotAllowed()")]
    pub struct NotAllowed;
    ///Custom Error type `TargetNotAllowed` with signature `TargetNotAllowed()` and selector `0x48cbf26d`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(name = "TargetNotAllowed", abi = "TargetNotAllowed()")]
    pub struct TargetNotAllowed;
    ///Custom Error type `WithdrawalWaitingPeriodNotEnded` with signature `WithdrawalWaitingPeriodNotEnded()` and selector `0xf540d2d0`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(
        name = "WithdrawalWaitingPeriodNotEnded",
        abi = "WithdrawalWaitingPeriodNotEnded()"
    )]
    pub struct WithdrawalWaitingPeriodNotEnded;
    ///Container type for all of the contract's custom errors
    #[derive(Clone, ::ethers::contract::EthAbiType, Debug, PartialEq, Eq, Hash)]
    pub enum SelfAuthorizedVaultErrors {
        AlreadyInitialized(AlreadyInitialized),
        CallerNotAllowed(CallerNotAllowed),
        InvalidWithdrawalAmount(InvalidWithdrawalAmount),
        NotAllowed(NotAllowed),
        TargetNotAllowed(TargetNotAllowed),
        WithdrawalWaitingPeriodNotEnded(WithdrawalWaitingPeriodNotEnded),
        /// The standard solidity revert string, with selector
        /// Error(string) -- 0x08c379a0
        RevertString(::std::string::String),
    }
    impl ::ethers::core::abi::AbiDecode for SelfAuthorizedVaultErrors {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::core::result::Result<Self, ::ethers::core::abi::AbiError> {
            let data = data.as_ref();
            if let Ok(decoded)
                = <::std::string::String as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::RevertString(decoded));
            }
            if let Ok(decoded)
                = <AlreadyInitialized as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::AlreadyInitialized(decoded));
            }
            if let Ok(decoded)
                = <CallerNotAllowed as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::CallerNotAllowed(decoded));
            }
            if let Ok(decoded)
                = <InvalidWithdrawalAmount as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::InvalidWithdrawalAmount(decoded));
            }
            if let Ok(decoded)
                = <NotAllowed as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::NotAllowed(decoded));
            }
            if let Ok(decoded)
                = <TargetNotAllowed as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::TargetNotAllowed(decoded));
            }
            if let Ok(decoded)
                = <WithdrawalWaitingPeriodNotEnded as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::WithdrawalWaitingPeriodNotEnded(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ::ethers::core::abi::AbiEncode for SelfAuthorizedVaultErrors {
        fn encode(self) -> ::std::vec::Vec<u8> {
            match self {
                Self::AlreadyInitialized(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::CallerNotAllowed(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::InvalidWithdrawalAmount(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::NotAllowed(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::TargetNotAllowed(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::WithdrawalWaitingPeriodNotEnded(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::RevertString(s) => ::ethers::core::abi::AbiEncode::encode(s),
            }
        }
    }
    impl ::ethers::contract::ContractRevert for SelfAuthorizedVaultErrors {
        fn valid_selector(selector: [u8; 4]) -> bool {
            match selector {
                [0x08, 0xc3, 0x79, 0xa0] => true,
                _ if selector
                    == <AlreadyInitialized as ::ethers::contract::EthError>::selector() => {
                    true
                }
                _ if selector
                    == <CallerNotAllowed as ::ethers::contract::EthError>::selector() => {
                    true
                }
                _ if selector
                    == <InvalidWithdrawalAmount as ::ethers::contract::EthError>::selector() => {
                    true
                }
                _ if selector
                    == <NotAllowed as ::ethers::contract::EthError>::selector() => true,
                _ if selector
                    == <TargetNotAllowed as ::ethers::contract::EthError>::selector() => {
                    true
                }
                _ if selector
                    == <WithdrawalWaitingPeriodNotEnded as ::ethers::contract::EthError>::selector() => {
                    true
                }
                _ => false,
            }
        }
    }
    impl ::core::fmt::Display for SelfAuthorizedVaultErrors {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                Self::AlreadyInitialized(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::CallerNotAllowed(element) => ::core::fmt::Display::fmt(element, f),
                Self::InvalidWithdrawalAmount(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::NotAllowed(element) => ::core::fmt::Display::fmt(element, f),
                Self::TargetNotAllowed(element) => ::core::fmt::Display::fmt(element, f),
                Self::WithdrawalWaitingPeriodNotEnded(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::RevertString(s) => ::core::fmt::Display::fmt(s, f),
            }
        }
    }
    impl ::core::convert::From<::std::string::String> for SelfAuthorizedVaultErrors {
        fn from(value: String) -> Self {
            Self::RevertString(value)
        }
    }
    impl ::core::convert::From<AlreadyInitialized> for SelfAuthorizedVaultErrors {
        fn from(value: AlreadyInitialized) -> Self {
            Self::AlreadyInitialized(value)
        }
    }
    impl ::core::convert::From<CallerNotAllowed> for SelfAuthorizedVaultErrors {
        fn from(value: CallerNotAllowed) -> Self {
            Self::CallerNotAllowed(value)
        }
    }
    impl ::core::convert::From<InvalidWithdrawalAmount> for SelfAuthorizedVaultErrors {
        fn from(value: InvalidWithdrawalAmount) -> Self {
            Self::InvalidWithdrawalAmount(value)
        }
    }
    impl ::core::convert::From<NotAllowed> for SelfAuthorizedVaultErrors {
        fn from(value: NotAllowed) -> Self {
            Self::NotAllowed(value)
        }
    }
    impl ::core::convert::From<TargetNotAllowed> for SelfAuthorizedVaultErrors {
        fn from(value: TargetNotAllowed) -> Self {
            Self::TargetNotAllowed(value)
        }
    }
    impl ::core::convert::From<WithdrawalWaitingPeriodNotEnded>
    for SelfAuthorizedVaultErrors {
        fn from(value: WithdrawalWaitingPeriodNotEnded) -> Self {
            Self::WithdrawalWaitingPeriodNotEnded(value)
        }
    }
    #[derive(
        Clone,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethevent(name = "Initialized", abi = "Initialized(address,bytes32[])")]
    pub struct InitializedFilter {
        pub who: ::ethers::core::types::Address,
        pub ids: ::std::vec::Vec<[u8; 32]>,
    }
    ///Container type for all input parameters for the `WAITING_PERIOD` function with signature `WAITING_PERIOD()` and selector `0x6f85c7e4`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "WAITING_PERIOD", abi = "WAITING_PERIOD()")]
    pub struct WaitingPeriodCall;
    ///Container type for all input parameters for the `WITHDRAWAL_LIMIT` function with signature `WITHDRAWAL_LIMIT()` and selector `0x82ee0d1d`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "WITHDRAWAL_LIMIT", abi = "WITHDRAWAL_LIMIT()")]
    pub struct WithdrawalLimitCall;
    ///Container type for all input parameters for the `execute` function with signature `execute(address,bytes)` and selector `0x1cff79cd`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "execute", abi = "execute(address,bytes)")]
    pub struct ExecuteCall {
        pub target: ::ethers::core::types::Address,
        pub action_data: ::ethers::core::types::Bytes,
    }
    ///Container type for all input parameters for the `getActionId` function with signature `getActionId(bytes4,address,address)` and selector `0x3e152499`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "getActionId", abi = "getActionId(bytes4,address,address)")]
    pub struct GetActionIdCall {
        pub selector: [u8; 4],
        pub executor: ::ethers::core::types::Address,
        pub target: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `getLastWithdrawalTimestamp` function with signature `getLastWithdrawalTimestamp()` and selector `0x266df782`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "getLastWithdrawalTimestamp", abi = "getLastWithdrawalTimestamp()")]
    pub struct GetLastWithdrawalTimestampCall;
    ///Container type for all input parameters for the `initialized` function with signature `initialized()` and selector `0x158ef93e`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "initialized", abi = "initialized()")]
    pub struct InitializedCall;
    ///Container type for all input parameters for the `permissions` function with signature `permissions(bytes32)` and selector `0xb4d2388f`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "permissions", abi = "permissions(bytes32)")]
    pub struct PermissionsCall(pub [u8; 32]);
    ///Container type for all input parameters for the `setPermissions` function with signature `setPermissions(bytes32[])` and selector `0xaeabae6b`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "setPermissions", abi = "setPermissions(bytes32[])")]
    pub struct SetPermissionsCall {
        pub ids: ::std::vec::Vec<[u8; 32]>,
    }
    ///Container type for all input parameters for the `sweepFunds` function with signature `sweepFunds(address,address)` and selector `0x85fb709d`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "sweepFunds", abi = "sweepFunds(address,address)")]
    pub struct SweepFundsCall {
        pub receiver: ::ethers::core::types::Address,
        pub token: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `withdraw` function with signature `withdraw(address,address,uint256)` and selector `0xd9caed12`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "withdraw", abi = "withdraw(address,address,uint256)")]
    pub struct WithdrawCall {
        pub token: ::ethers::core::types::Address,
        pub recipient: ::ethers::core::types::Address,
        pub amount: ::ethers::core::types::U256,
    }
    ///Container type for all of the contract's call
    #[derive(Clone, ::ethers::contract::EthAbiType, Debug, PartialEq, Eq, Hash)]
    pub enum SelfAuthorizedVaultCalls {
        WaitingPeriod(WaitingPeriodCall),
        WithdrawalLimit(WithdrawalLimitCall),
        Execute(ExecuteCall),
        GetActionId(GetActionIdCall),
        GetLastWithdrawalTimestamp(GetLastWithdrawalTimestampCall),
        Initialized(InitializedCall),
        Permissions(PermissionsCall),
        SetPermissions(SetPermissionsCall),
        SweepFunds(SweepFundsCall),
        Withdraw(WithdrawCall),
    }
    impl ::ethers::core::abi::AbiDecode for SelfAuthorizedVaultCalls {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::core::result::Result<Self, ::ethers::core::abi::AbiError> {
            let data = data.as_ref();
            if let Ok(decoded)
                = <WaitingPeriodCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::WaitingPeriod(decoded));
            }
            if let Ok(decoded)
                = <WithdrawalLimitCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::WithdrawalLimit(decoded));
            }
            if let Ok(decoded)
                = <ExecuteCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::Execute(decoded));
            }
            if let Ok(decoded)
                = <GetActionIdCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::GetActionId(decoded));
            }
            if let Ok(decoded)
                = <GetLastWithdrawalTimestampCall as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::GetLastWithdrawalTimestamp(decoded));
            }
            if let Ok(decoded)
                = <InitializedCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::Initialized(decoded));
            }
            if let Ok(decoded)
                = <PermissionsCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::Permissions(decoded));
            }
            if let Ok(decoded)
                = <SetPermissionsCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::SetPermissions(decoded));
            }
            if let Ok(decoded)
                = <SweepFundsCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::SweepFunds(decoded));
            }
            if let Ok(decoded)
                = <WithdrawCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::Withdraw(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ::ethers::core::abi::AbiEncode for SelfAuthorizedVaultCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                Self::WaitingPeriod(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::WithdrawalLimit(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::Execute(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::GetActionId(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::GetLastWithdrawalTimestamp(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::Initialized(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::Permissions(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::SetPermissions(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::SweepFunds(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::Withdraw(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
            }
        }
    }
    impl ::core::fmt::Display for SelfAuthorizedVaultCalls {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                Self::WaitingPeriod(element) => ::core::fmt::Display::fmt(element, f),
                Self::WithdrawalLimit(element) => ::core::fmt::Display::fmt(element, f),
                Self::Execute(element) => ::core::fmt::Display::fmt(element, f),
                Self::GetActionId(element) => ::core::fmt::Display::fmt(element, f),
                Self::GetLastWithdrawalTimestamp(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::Initialized(element) => ::core::fmt::Display::fmt(element, f),
                Self::Permissions(element) => ::core::fmt::Display::fmt(element, f),
                Self::SetPermissions(element) => ::core::fmt::Display::fmt(element, f),
                Self::SweepFunds(element) => ::core::fmt::Display::fmt(element, f),
                Self::Withdraw(element) => ::core::fmt::Display::fmt(element, f),
            }
        }
    }
    impl ::core::convert::From<WaitingPeriodCall> for SelfAuthorizedVaultCalls {
        fn from(value: WaitingPeriodCall) -> Self {
            Self::WaitingPeriod(value)
        }
    }
    impl ::core::convert::From<WithdrawalLimitCall> for SelfAuthorizedVaultCalls {
        fn from(value: WithdrawalLimitCall) -> Self {
            Self::WithdrawalLimit(value)
        }
    }
    impl ::core::convert::From<ExecuteCall> for SelfAuthorizedVaultCalls {
        fn from(value: ExecuteCall) -> Self {
            Self::Execute(value)
        }
    }
    impl ::core::convert::From<GetActionIdCall> for SelfAuthorizedVaultCalls {
        fn from(value: GetActionIdCall) -> Self {
            Self::GetActionId(value)
        }
    }
    impl ::core::convert::From<GetLastWithdrawalTimestampCall>
    for SelfAuthorizedVaultCalls {
        fn from(value: GetLastWithdrawalTimestampCall) -> Self {
            Self::GetLastWithdrawalTimestamp(value)
        }
    }
    impl ::core::convert::From<InitializedCall> for SelfAuthorizedVaultCalls {
        fn from(value: InitializedCall) -> Self {
            Self::Initialized(value)
        }
    }
    impl ::core::convert::From<PermissionsCall> for SelfAuthorizedVaultCalls {
        fn from(value: PermissionsCall) -> Self {
            Self::Permissions(value)
        }
    }
    impl ::core::convert::From<SetPermissionsCall> for SelfAuthorizedVaultCalls {
        fn from(value: SetPermissionsCall) -> Self {
            Self::SetPermissions(value)
        }
    }
    impl ::core::convert::From<SweepFundsCall> for SelfAuthorizedVaultCalls {
        fn from(value: SweepFundsCall) -> Self {
            Self::SweepFunds(value)
        }
    }
    impl ::core::convert::From<WithdrawCall> for SelfAuthorizedVaultCalls {
        fn from(value: WithdrawCall) -> Self {
            Self::Withdraw(value)
        }
    }
    ///Container type for all return fields from the `WAITING_PERIOD` function with signature `WAITING_PERIOD()` and selector `0x6f85c7e4`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct WaitingPeriodReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `WITHDRAWAL_LIMIT` function with signature `WITHDRAWAL_LIMIT()` and selector `0x82ee0d1d`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct WithdrawalLimitReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `execute` function with signature `execute(address,bytes)` and selector `0x1cff79cd`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct ExecuteReturn(pub ::ethers::core::types::Bytes);
    ///Container type for all return fields from the `getActionId` function with signature `getActionId(bytes4,address,address)` and selector `0x3e152499`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct GetActionIdReturn(pub [u8; 32]);
    ///Container type for all return fields from the `getLastWithdrawalTimestamp` function with signature `getLastWithdrawalTimestamp()` and selector `0x266df782`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct GetLastWithdrawalTimestampReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `initialized` function with signature `initialized()` and selector `0x158ef93e`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct InitializedReturn(pub bool);
    ///Container type for all return fields from the `permissions` function with signature `permissions(bytes32)` and selector `0xb4d2388f`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct PermissionsReturn(pub bool);
}
