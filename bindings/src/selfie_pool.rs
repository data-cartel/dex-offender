pub use selfie_pool::*;
/// This module was auto-generated with ethers-rs Abigen.
/// More information at: <https://github.com/gakonst/ethers-rs>
#[allow(
    clippy::enum_variant_names,
    clippy::too_many_arguments,
    clippy::upper_case_acronyms,
    clippy::type_complexity,
    dead_code,
    non_camel_case_types,
)]
pub mod selfie_pool {
    #[rustfmt::skip]
    const __ABI: &str = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"CallbackFailed\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"CallerNotGovernance\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"RepayFailed\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"UnsupportedCurrency\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"FundsDrained\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"emergencyExit\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"flashFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"contract IERC3156FlashBorrower\",\"name\":\"_receiver\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"flashLoan\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"governance\",\"outputs\":[{\"internalType\":\"contract SimpleGovernance\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"maxFlashLoan\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract ERC20Snapshot\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]}]";
    ///The parsed JSON ABI of the contract.
    pub static SELFIEPOOL_ABI: ::ethers::contract::Lazy<::ethers::core::abi::Abi> = ::ethers::contract::Lazy::new(||
    ::ethers::core::utils::__serde_json::from_str(__ABI).expect("ABI is always valid"));
    #[rustfmt::skip]
    const __BYTECODE: &[u8] = &[
        96,
        192,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        64,
        81,
        97,
        9,
        196,
        56,
        3,
        128,
        97,
        9,
        196,
        131,
        57,
        129,
        1,
        96,
        64,
        129,
        144,
        82,
        97,
        0,
        47,
        145,
        97,
        0,
        103,
        86,
        91,
        96,
        1,
        96,
        0,
        85,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        145,
        130,
        22,
        96,
        128,
        82,
        22,
        96,
        160,
        82,
        97,
        0,
        154,
        86,
        91,
        128,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        129,
        20,
        97,
        0,
        98,
        87,
        96,
        0,
        128,
        253,
        91,
        145,
        144,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        64,
        131,
        133,
        3,
        18,
        21,
        97,
        0,
        122,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        0,
        131,
        131,
        97,
        0,
        75,
        86,
        91,
        145,
        80,
        97,
        0,
        145,
        96,
        32,
        132,
        1,
        97,
        0,
        75,
        86,
        91,
        144,
        80,
        146,
        80,
        146,
        144,
        80,
        86,
        91,
        96,
        128,
        81,
        96,
        160,
        81,
        97,
        8,
        199,
        97,
        0,
        253,
        96,
        0,
        57,
        96,
        0,
        129,
        129,
        96,
        108,
        1,
        82,
        97,
        4,
        144,
        1,
        82,
        96,
        0,
        129,
        129,
        97,
        1,
        28,
        1,
        82,
        129,
        129,
        97,
        1,
        74,
        1,
        82,
        129,
        129,
        97,
        1,
        192,
        1,
        82,
        129,
        129,
        97,
        3,
        20,
        1,
        82,
        129,
        129,
        97,
        3,
        194,
        1,
        82,
        129,
        129,
        97,
        4,
        4,
        1,
        82,
        129,
        129,
        97,
        4,
        230,
        1,
        82,
        129,
        129,
        97,
        5,
        130,
        1,
        82,
        97,
        6,
        71,
        1,
        82,
        97,
        8,
        199,
        96,
        0,
        243,
        254,
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        4,
        54,
        16,
        97,
        0,
        98,
        87,
        96,
        0,
        53,
        96,
        224,
        28,
        128,
        99,
        90,
        166,
        230,
        117,
        20,
        97,
        0,
        103,
        87,
        128,
        99,
        92,
        255,
        233,
        222,
        20,
        97,
        0,
        171,
        87,
        128,
        99,
        97,
        50,
        85,
        171,
        20,
        97,
        0,
        206,
        87,
        128,
        99,
        164,
        65,
        208,
        103,
        20,
        97,
        0,
        239,
        87,
        128,
        99,
        217,
        217,
        140,
        228,
        20,
        97,
        1,
        4,
        87,
        128,
        99,
        252,
        12,
        84,
        106,
        20,
        97,
        1,
        23,
        87,
        91,
        96,
        0,
        128,
        253,
        91,
        97,
        0,
        142,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        129,
        86,
        91,
        96,
        64,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        144,
        145,
        22,
        129,
        82,
        96,
        32,
        1,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        243,
        91,
        97,
        0,
        190,
        97,
        0,
        185,
        54,
        96,
        4,
        97,
        7,
        11,
        86,
        91,
        97,
        1,
        62,
        86,
        91,
        96,
        64,
        81,
        144,
        21,
        21,
        129,
        82,
        96,
        32,
        1,
        97,
        0,
        162,
        86,
        91,
        97,
        0,
        225,
        97,
        0,
        220,
        54,
        96,
        4,
        97,
        7,
        170,
        86,
        91,
        97,
        3,
        180,
        86,
        91,
        96,
        64,
        81,
        144,
        129,
        82,
        96,
        32,
        1,
        97,
        0,
        162,
        86,
        91,
        97,
        1,
        2,
        97,
        0,
        253,
        54,
        96,
        4,
        97,
        7,
        170,
        86,
        91,
        97,
        4,
        133,
        86,
        91,
        0,
        91,
        97,
        0,
        225,
        97,
        1,
        18,
        54,
        96,
        4,
        97,
        7,
        206,
        86,
        91,
        97,
        6,
        57,
        86,
        91,
        97,
        0,
        142,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        129,
        86,
        91,
        96,
        0,
        97,
        1,
        72,
        97,
        6,
        150,
        86,
        91,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        133,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        20,
        97,
        1,
        154,
        87,
        96,
        64,
        81,
        99,
        17,
        49,
        250,
        113,
        96,
        225,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        64,
        81,
        99,
        169,
        5,
        156,
        187,
        96,
        224,
        27,
        129,
        82,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        135,
        129,
        22,
        96,
        4,
        131,
        1,
        82,
        96,
        36,
        130,
        1,
        134,
        144,
        82,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        22,
        144,
        99,
        169,
        5,
        156,
        187,
        144,
        96,
        68,
        1,
        96,
        32,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        96,
        0,
        135,
        90,
        241,
        21,
        128,
        21,
        97,
        2,
        9,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        80,
        80,
        96,
        64,
        81,
        61,
        96,
        31,
        25,
        96,
        31,
        130,
        1,
        22,
        130,
        1,
        128,
        96,
        64,
        82,
        80,
        129,
        1,
        144,
        97,
        2,
        45,
        145,
        144,
        97,
        7,
        250,
        86,
        91,
        80,
        96,
        64,
        81,
        99,
        35,
        227,
        12,
        139,
        96,
        224,
        27,
        129,
        82,
        127,
        67,
        145,
        72,
        240,
        187,
        198,
        130,
        202,
        7,
        158,
        70,
        214,
        226,
        194,
        240,
        193,
        227,
        184,
        32,
        241,
        162,
        145,
        176,
        105,
        216,
        136,
        42,
        191,
        140,
        241,
        141,
        217,
        144,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        136,
        22,
        144,
        99,
        35,
        227,
        12,
        139,
        144,
        97,
        2,
        135,
        144,
        51,
        144,
        138,
        144,
        138,
        144,
        96,
        0,
        144,
        139,
        144,
        139,
        144,
        96,
        4,
        1,
        97,
        8,
        28,
        86,
        91,
        96,
        32,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        96,
        0,
        135,
        90,
        241,
        21,
        128,
        21,
        97,
        2,
        166,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        80,
        80,
        96,
        64,
        81,
        61,
        96,
        31,
        25,
        96,
        31,
        130,
        1,
        22,
        130,
        1,
        128,
        96,
        64,
        82,
        80,
        129,
        1,
        144,
        97,
        2,
        202,
        145,
        144,
        97,
        8,
        120,
        86,
        91,
        20,
        97,
        2,
        232,
        87,
        96,
        64,
        81,
        99,
        4,
        67,
        236,
        43,
        96,
        227,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        64,
        81,
        99,
        35,
        184,
        114,
        221,
        96,
        224,
        27,
        129,
        82,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        135,
        129,
        22,
        96,
        4,
        131,
        1,
        82,
        48,
        96,
        36,
        131,
        1,
        82,
        96,
        68,
        130,
        1,
        134,
        144,
        82,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        22,
        144,
        99,
        35,
        184,
        114,
        221,
        144,
        96,
        100,
        1,
        96,
        32,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        96,
        0,
        135,
        90,
        241,
        21,
        128,
        21,
        97,
        3,
        93,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        80,
        80,
        96,
        64,
        81,
        61,
        96,
        31,
        25,
        96,
        31,
        130,
        1,
        22,
        130,
        1,
        128,
        96,
        64,
        82,
        80,
        129,
        1,
        144,
        97,
        3,
        129,
        145,
        144,
        97,
        7,
        250,
        86,
        91,
        97,
        3,
        158,
        87,
        96,
        64,
        81,
        99,
        158,
        112,
        58,
        5,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        80,
        96,
        1,
        97,
        3,
        171,
        96,
        1,
        96,
        0,
        85,
        86,
        91,
        149,
        148,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        129,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        3,
        97,
        4,
        125,
        87,
        96,
        64,
        81,
        99,
        112,
        160,
        130,
        49,
        96,
        224,
        27,
        129,
        82,
        48,
        96,
        4,
        130,
        1,
        82,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        144,
        99,
        112,
        160,
        130,
        49,
        144,
        96,
        36,
        1,
        96,
        32,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        134,
        90,
        250,
        21,
        128,
        21,
        97,
        4,
        83,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        80,
        80,
        96,
        64,
        81,
        61,
        96,
        31,
        25,
        96,
        31,
        130,
        1,
        22,
        130,
        1,
        128,
        96,
        64,
        82,
        80,
        129,
        1,
        144,
        97,
        4,
        119,
        145,
        144,
        97,
        8,
        120,
        86,
        91,
        146,
        145,
        80,
        80,
        86,
        91,
        80,
        96,
        0,
        145,
        144,
        80,
        86,
        91,
        51,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        22,
        20,
        97,
        4,
        206,
        87,
        96,
        64,
        81,
        99,
        242,
        190,
        48,
        251,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        64,
        81,
        99,
        112,
        160,
        130,
        49,
        96,
        224,
        27,
        129,
        82,
        48,
        96,
        4,
        130,
        1,
        82,
        96,
        0,
        144,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        144,
        99,
        112,
        160,
        130,
        49,
        144,
        96,
        36,
        1,
        96,
        32,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        134,
        90,
        250,
        21,
        128,
        21,
        97,
        5,
        53,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        80,
        80,
        96,
        64,
        81,
        61,
        96,
        31,
        25,
        96,
        31,
        130,
        1,
        22,
        130,
        1,
        128,
        96,
        64,
        82,
        80,
        129,
        1,
        144,
        97,
        5,
        89,
        145,
        144,
        97,
        8,
        120,
        86,
        91,
        96,
        64,
        81,
        99,
        169,
        5,
        156,
        187,
        96,
        224,
        27,
        129,
        82,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        132,
        129,
        22,
        96,
        4,
        131,
        1,
        82,
        96,
        36,
        130,
        1,
        131,
        144,
        82,
        145,
        146,
        80,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        144,
        145,
        22,
        144,
        99,
        169,
        5,
        156,
        187,
        144,
        96,
        68,
        1,
        96,
        32,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        96,
        0,
        135,
        90,
        241,
        21,
        128,
        21,
        97,
        5,
        205,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        80,
        80,
        96,
        64,
        81,
        61,
        96,
        31,
        25,
        96,
        31,
        130,
        1,
        22,
        130,
        1,
        128,
        96,
        64,
        82,
        80,
        129,
        1,
        144,
        97,
        5,
        241,
        145,
        144,
        97,
        7,
        250,
        86,
        91,
        80,
        129,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        127,
        1,
        41,
        155,
        213,
        175,
        132,
        226,
        60,
        76,
        130,
        193,
        212,
        237,
        223,
        42,
        156,
        0,
        231,
        11,
        139,
        136,
        96,
        118,
        208,
        108,
        219,
        231,
        198,
        252,
        128,
        168,
        125,
        130,
        96,
        64,
        81,
        97,
        6,
        45,
        145,
        129,
        82,
        96,
        32,
        1,
        144,
        86,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        162,
        80,
        80,
        86,
        91,
        96,
        0,
        130,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        20,
        97,
        6,
        141,
        87,
        96,
        64,
        81,
        99,
        17,
        49,
        250,
        113,
        96,
        225,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        80,
        96,
        0,
        146,
        145,
        80,
        80,
        86,
        91,
        96,
        2,
        96,
        0,
        84,
        3,
        97,
        6,
        236,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        31,
        96,
        36,
        130,
        1,
        82,
        127,
        82,
        101,
        101,
        110,
        116,
        114,
        97,
        110,
        99,
        121,
        71,
        117,
        97,
        114,
        100,
        58,
        32,
        114,
        101,
        101,
        110,
        116,
        114,
        97,
        110,
        116,
        32,
        99,
        97,
        108,
        108,
        0,
        96,
        68,
        130,
        1,
        82,
        96,
        100,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        2,
        96,
        0,
        85,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        129,
        20,
        97,
        7,
        8,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        0,
        128,
        96,
        0,
        96,
        128,
        134,
        136,
        3,
        18,
        21,
        97,
        7,
        35,
        87,
        96,
        0,
        128,
        253,
        91,
        133,
        53,
        97,
        7,
        46,
        129,
        97,
        6,
        243,
        86,
        91,
        148,
        80,
        96,
        32,
        134,
        1,
        53,
        97,
        7,
        62,
        129,
        97,
        6,
        243,
        86,
        91,
        147,
        80,
        96,
        64,
        134,
        1,
        53,
        146,
        80,
        96,
        96,
        134,
        1,
        53,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        128,
        130,
        17,
        21,
        97,
        7,
        98,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        136,
        1,
        145,
        80,
        136,
        96,
        31,
        131,
        1,
        18,
        97,
        7,
        118,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        53,
        129,
        129,
        17,
        21,
        97,
        7,
        133,
        87,
        96,
        0,
        128,
        253,
        91,
        137,
        96,
        32,
        130,
        133,
        1,
        1,
        17,
        21,
        97,
        7,
        151,
        87,
        96,
        0,
        128,
        253,
        91,
        150,
        153,
        149,
        152,
        80,
        147,
        150,
        80,
        96,
        32,
        1,
        148,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        7,
        188,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        53,
        97,
        7,
        199,
        129,
        97,
        6,
        243,
        86,
        91,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        64,
        131,
        133,
        3,
        18,
        21,
        97,
        7,
        225,
        87,
        96,
        0,
        128,
        253,
        91,
        130,
        53,
        97,
        7,
        236,
        129,
        97,
        6,
        243,
        86,
        91,
        148,
        96,
        32,
        147,
        144,
        147,
        1,
        53,
        147,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        8,
        12,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        81,
        128,
        21,
        21,
        129,
        20,
        97,
        7,
        199,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        135,
        129,
        22,
        130,
        82,
        134,
        22,
        96,
        32,
        130,
        1,
        82,
        96,
        64,
        129,
        1,
        133,
        144,
        82,
        96,
        96,
        129,
        1,
        132,
        144,
        82,
        96,
        160,
        96,
        128,
        130,
        1,
        129,
        144,
        82,
        129,
        1,
        130,
        144,
        82,
        96,
        0,
        130,
        132,
        96,
        192,
        132,
        1,
        55,
        96,
        0,
        96,
        192,
        132,
        132,
        1,
        1,
        82,
        96,
        192,
        96,
        31,
        25,
        96,
        31,
        133,
        1,
        22,
        131,
        1,
        1,
        144,
        80,
        151,
        150,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        8,
        138,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        81,
        145,
        144,
        80,
        86,
        254,
        162,
        100,
        105,
        112,
        102,
        115,
        88,
        34,
        18,
        32,
        254,
        182,
        199,
        107,
        207,
        90,
        203,
        196,
        77,
        208,
        58,
        254,
        12,
        186,
        124,
        158,
        124,
        166,
        207,
        9,
        233,
        143,
        173,
        207,
        21,
        80,
        250,
        133,
        12,
        185,
        160,
        218,
        100,
        115,
        111,
        108,
        99,
        67,
        0,
        8,
        20,
        0,
        51,
    ];
    ///The bytecode of the contract.
    pub static SELFIEPOOL_BYTECODE: ::ethers::core::types::Bytes = ::ethers::core::types::Bytes::from_static(
        __BYTECODE,
    );
    #[rustfmt::skip]
    const __DEPLOYED_BYTECODE: &[u8] = &[
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        4,
        54,
        16,
        97,
        0,
        98,
        87,
        96,
        0,
        53,
        96,
        224,
        28,
        128,
        99,
        90,
        166,
        230,
        117,
        20,
        97,
        0,
        103,
        87,
        128,
        99,
        92,
        255,
        233,
        222,
        20,
        97,
        0,
        171,
        87,
        128,
        99,
        97,
        50,
        85,
        171,
        20,
        97,
        0,
        206,
        87,
        128,
        99,
        164,
        65,
        208,
        103,
        20,
        97,
        0,
        239,
        87,
        128,
        99,
        217,
        217,
        140,
        228,
        20,
        97,
        1,
        4,
        87,
        128,
        99,
        252,
        12,
        84,
        106,
        20,
        97,
        1,
        23,
        87,
        91,
        96,
        0,
        128,
        253,
        91,
        97,
        0,
        142,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        129,
        86,
        91,
        96,
        64,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        144,
        145,
        22,
        129,
        82,
        96,
        32,
        1,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        243,
        91,
        97,
        0,
        190,
        97,
        0,
        185,
        54,
        96,
        4,
        97,
        7,
        11,
        86,
        91,
        97,
        1,
        62,
        86,
        91,
        96,
        64,
        81,
        144,
        21,
        21,
        129,
        82,
        96,
        32,
        1,
        97,
        0,
        162,
        86,
        91,
        97,
        0,
        225,
        97,
        0,
        220,
        54,
        96,
        4,
        97,
        7,
        170,
        86,
        91,
        97,
        3,
        180,
        86,
        91,
        96,
        64,
        81,
        144,
        129,
        82,
        96,
        32,
        1,
        97,
        0,
        162,
        86,
        91,
        97,
        1,
        2,
        97,
        0,
        253,
        54,
        96,
        4,
        97,
        7,
        170,
        86,
        91,
        97,
        4,
        133,
        86,
        91,
        0,
        91,
        97,
        0,
        225,
        97,
        1,
        18,
        54,
        96,
        4,
        97,
        7,
        206,
        86,
        91,
        97,
        6,
        57,
        86,
        91,
        97,
        0,
        142,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        129,
        86,
        91,
        96,
        0,
        97,
        1,
        72,
        97,
        6,
        150,
        86,
        91,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        133,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        20,
        97,
        1,
        154,
        87,
        96,
        64,
        81,
        99,
        17,
        49,
        250,
        113,
        96,
        225,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        64,
        81,
        99,
        169,
        5,
        156,
        187,
        96,
        224,
        27,
        129,
        82,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        135,
        129,
        22,
        96,
        4,
        131,
        1,
        82,
        96,
        36,
        130,
        1,
        134,
        144,
        82,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        22,
        144,
        99,
        169,
        5,
        156,
        187,
        144,
        96,
        68,
        1,
        96,
        32,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        96,
        0,
        135,
        90,
        241,
        21,
        128,
        21,
        97,
        2,
        9,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        80,
        80,
        96,
        64,
        81,
        61,
        96,
        31,
        25,
        96,
        31,
        130,
        1,
        22,
        130,
        1,
        128,
        96,
        64,
        82,
        80,
        129,
        1,
        144,
        97,
        2,
        45,
        145,
        144,
        97,
        7,
        250,
        86,
        91,
        80,
        96,
        64,
        81,
        99,
        35,
        227,
        12,
        139,
        96,
        224,
        27,
        129,
        82,
        127,
        67,
        145,
        72,
        240,
        187,
        198,
        130,
        202,
        7,
        158,
        70,
        214,
        226,
        194,
        240,
        193,
        227,
        184,
        32,
        241,
        162,
        145,
        176,
        105,
        216,
        136,
        42,
        191,
        140,
        241,
        141,
        217,
        144,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        136,
        22,
        144,
        99,
        35,
        227,
        12,
        139,
        144,
        97,
        2,
        135,
        144,
        51,
        144,
        138,
        144,
        138,
        144,
        96,
        0,
        144,
        139,
        144,
        139,
        144,
        96,
        4,
        1,
        97,
        8,
        28,
        86,
        91,
        96,
        32,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        96,
        0,
        135,
        90,
        241,
        21,
        128,
        21,
        97,
        2,
        166,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        80,
        80,
        96,
        64,
        81,
        61,
        96,
        31,
        25,
        96,
        31,
        130,
        1,
        22,
        130,
        1,
        128,
        96,
        64,
        82,
        80,
        129,
        1,
        144,
        97,
        2,
        202,
        145,
        144,
        97,
        8,
        120,
        86,
        91,
        20,
        97,
        2,
        232,
        87,
        96,
        64,
        81,
        99,
        4,
        67,
        236,
        43,
        96,
        227,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        64,
        81,
        99,
        35,
        184,
        114,
        221,
        96,
        224,
        27,
        129,
        82,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        135,
        129,
        22,
        96,
        4,
        131,
        1,
        82,
        48,
        96,
        36,
        131,
        1,
        82,
        96,
        68,
        130,
        1,
        134,
        144,
        82,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        22,
        144,
        99,
        35,
        184,
        114,
        221,
        144,
        96,
        100,
        1,
        96,
        32,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        96,
        0,
        135,
        90,
        241,
        21,
        128,
        21,
        97,
        3,
        93,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        80,
        80,
        96,
        64,
        81,
        61,
        96,
        31,
        25,
        96,
        31,
        130,
        1,
        22,
        130,
        1,
        128,
        96,
        64,
        82,
        80,
        129,
        1,
        144,
        97,
        3,
        129,
        145,
        144,
        97,
        7,
        250,
        86,
        91,
        97,
        3,
        158,
        87,
        96,
        64,
        81,
        99,
        158,
        112,
        58,
        5,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        80,
        96,
        1,
        97,
        3,
        171,
        96,
        1,
        96,
        0,
        85,
        86,
        91,
        149,
        148,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        129,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        3,
        97,
        4,
        125,
        87,
        96,
        64,
        81,
        99,
        112,
        160,
        130,
        49,
        96,
        224,
        27,
        129,
        82,
        48,
        96,
        4,
        130,
        1,
        82,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        144,
        99,
        112,
        160,
        130,
        49,
        144,
        96,
        36,
        1,
        96,
        32,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        134,
        90,
        250,
        21,
        128,
        21,
        97,
        4,
        83,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        80,
        80,
        96,
        64,
        81,
        61,
        96,
        31,
        25,
        96,
        31,
        130,
        1,
        22,
        130,
        1,
        128,
        96,
        64,
        82,
        80,
        129,
        1,
        144,
        97,
        4,
        119,
        145,
        144,
        97,
        8,
        120,
        86,
        91,
        146,
        145,
        80,
        80,
        86,
        91,
        80,
        96,
        0,
        145,
        144,
        80,
        86,
        91,
        51,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        22,
        20,
        97,
        4,
        206,
        87,
        96,
        64,
        81,
        99,
        242,
        190,
        48,
        251,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        64,
        81,
        99,
        112,
        160,
        130,
        49,
        96,
        224,
        27,
        129,
        82,
        48,
        96,
        4,
        130,
        1,
        82,
        96,
        0,
        144,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        144,
        99,
        112,
        160,
        130,
        49,
        144,
        96,
        36,
        1,
        96,
        32,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        134,
        90,
        250,
        21,
        128,
        21,
        97,
        5,
        53,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        80,
        80,
        96,
        64,
        81,
        61,
        96,
        31,
        25,
        96,
        31,
        130,
        1,
        22,
        130,
        1,
        128,
        96,
        64,
        82,
        80,
        129,
        1,
        144,
        97,
        5,
        89,
        145,
        144,
        97,
        8,
        120,
        86,
        91,
        96,
        64,
        81,
        99,
        169,
        5,
        156,
        187,
        96,
        224,
        27,
        129,
        82,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        132,
        129,
        22,
        96,
        4,
        131,
        1,
        82,
        96,
        36,
        130,
        1,
        131,
        144,
        82,
        145,
        146,
        80,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        144,
        145,
        22,
        144,
        99,
        169,
        5,
        156,
        187,
        144,
        96,
        68,
        1,
        96,
        32,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        96,
        0,
        135,
        90,
        241,
        21,
        128,
        21,
        97,
        5,
        205,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        80,
        80,
        96,
        64,
        81,
        61,
        96,
        31,
        25,
        96,
        31,
        130,
        1,
        22,
        130,
        1,
        128,
        96,
        64,
        82,
        80,
        129,
        1,
        144,
        97,
        5,
        241,
        145,
        144,
        97,
        7,
        250,
        86,
        91,
        80,
        129,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        127,
        1,
        41,
        155,
        213,
        175,
        132,
        226,
        60,
        76,
        130,
        193,
        212,
        237,
        223,
        42,
        156,
        0,
        231,
        11,
        139,
        136,
        96,
        118,
        208,
        108,
        219,
        231,
        198,
        252,
        128,
        168,
        125,
        130,
        96,
        64,
        81,
        97,
        6,
        45,
        145,
        129,
        82,
        96,
        32,
        1,
        144,
        86,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        162,
        80,
        80,
        86,
        91,
        96,
        0,
        130,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        20,
        97,
        6,
        141,
        87,
        96,
        64,
        81,
        99,
        17,
        49,
        250,
        113,
        96,
        225,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        80,
        96,
        0,
        146,
        145,
        80,
        80,
        86,
        91,
        96,
        2,
        96,
        0,
        84,
        3,
        97,
        6,
        236,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        31,
        96,
        36,
        130,
        1,
        82,
        127,
        82,
        101,
        101,
        110,
        116,
        114,
        97,
        110,
        99,
        121,
        71,
        117,
        97,
        114,
        100,
        58,
        32,
        114,
        101,
        101,
        110,
        116,
        114,
        97,
        110,
        116,
        32,
        99,
        97,
        108,
        108,
        0,
        96,
        68,
        130,
        1,
        82,
        96,
        100,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        2,
        96,
        0,
        85,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        129,
        20,
        97,
        7,
        8,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        0,
        128,
        96,
        0,
        96,
        128,
        134,
        136,
        3,
        18,
        21,
        97,
        7,
        35,
        87,
        96,
        0,
        128,
        253,
        91,
        133,
        53,
        97,
        7,
        46,
        129,
        97,
        6,
        243,
        86,
        91,
        148,
        80,
        96,
        32,
        134,
        1,
        53,
        97,
        7,
        62,
        129,
        97,
        6,
        243,
        86,
        91,
        147,
        80,
        96,
        64,
        134,
        1,
        53,
        146,
        80,
        96,
        96,
        134,
        1,
        53,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        128,
        130,
        17,
        21,
        97,
        7,
        98,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        136,
        1,
        145,
        80,
        136,
        96,
        31,
        131,
        1,
        18,
        97,
        7,
        118,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        53,
        129,
        129,
        17,
        21,
        97,
        7,
        133,
        87,
        96,
        0,
        128,
        253,
        91,
        137,
        96,
        32,
        130,
        133,
        1,
        1,
        17,
        21,
        97,
        7,
        151,
        87,
        96,
        0,
        128,
        253,
        91,
        150,
        153,
        149,
        152,
        80,
        147,
        150,
        80,
        96,
        32,
        1,
        148,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        7,
        188,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        53,
        97,
        7,
        199,
        129,
        97,
        6,
        243,
        86,
        91,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        64,
        131,
        133,
        3,
        18,
        21,
        97,
        7,
        225,
        87,
        96,
        0,
        128,
        253,
        91,
        130,
        53,
        97,
        7,
        236,
        129,
        97,
        6,
        243,
        86,
        91,
        148,
        96,
        32,
        147,
        144,
        147,
        1,
        53,
        147,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        8,
        12,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        81,
        128,
        21,
        21,
        129,
        20,
        97,
        7,
        199,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        135,
        129,
        22,
        130,
        82,
        134,
        22,
        96,
        32,
        130,
        1,
        82,
        96,
        64,
        129,
        1,
        133,
        144,
        82,
        96,
        96,
        129,
        1,
        132,
        144,
        82,
        96,
        160,
        96,
        128,
        130,
        1,
        129,
        144,
        82,
        129,
        1,
        130,
        144,
        82,
        96,
        0,
        130,
        132,
        96,
        192,
        132,
        1,
        55,
        96,
        0,
        96,
        192,
        132,
        132,
        1,
        1,
        82,
        96,
        192,
        96,
        31,
        25,
        96,
        31,
        133,
        1,
        22,
        131,
        1,
        1,
        144,
        80,
        151,
        150,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        8,
        138,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        81,
        145,
        144,
        80,
        86,
        254,
        162,
        100,
        105,
        112,
        102,
        115,
        88,
        34,
        18,
        32,
        254,
        182,
        199,
        107,
        207,
        90,
        203,
        196,
        77,
        208,
        58,
        254,
        12,
        186,
        124,
        158,
        124,
        166,
        207,
        9,
        233,
        143,
        173,
        207,
        21,
        80,
        250,
        133,
        12,
        185,
        160,
        218,
        100,
        115,
        111,
        108,
        99,
        67,
        0,
        8,
        20,
        0,
        51,
    ];
    ///The deployed bytecode of the contract.
    pub static SELFIEPOOL_DEPLOYED_BYTECODE: ::ethers::core::types::Bytes = ::ethers::core::types::Bytes::from_static(
        __DEPLOYED_BYTECODE,
    );
    pub struct SelfiePool<M>(::ethers::contract::Contract<M>);
    impl<M> ::core::clone::Clone for SelfiePool<M> {
        fn clone(&self) -> Self {
            Self(::core::clone::Clone::clone(&self.0))
        }
    }
    impl<M> ::core::ops::Deref for SelfiePool<M> {
        type Target = ::ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M> ::core::ops::DerefMut for SelfiePool<M> {
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl<M> ::core::fmt::Debug for SelfiePool<M> {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple(stringify!(SelfiePool)).field(&self.address()).finish()
        }
    }
    impl<M: ::ethers::providers::Middleware> SelfiePool<M> {
        /// Creates a new contract instance with the specified `ethers` client at
        /// `address`. The contract derefs to a `ethers::Contract` object.
        pub fn new<T: Into<::ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            Self(
                ::ethers::contract::Contract::new(
                    address.into(),
                    SELFIEPOOL_ABI.clone(),
                    client,
                ),
            )
        }
        /// Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it.
        /// Returns a new instance of a deployer that returns an instance of this contract after sending the transaction
        ///
        /// Notes:
        /// - If there are no constructor arguments, you should pass `()` as the argument.
        /// - The default poll duration is 7 seconds.
        /// - The default number of confirmations is 1 block.
        ///
        ///
        /// # Example
        ///
        /// Generate contract bindings with `abigen!` and deploy a new contract instance.
        ///
        /// *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact.
        ///
        /// ```ignore
        /// # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {
        ///     abigen!(Greeter, "../greeter.json");
        ///
        ///    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();
        ///    let msg = greeter_contract.greet().call().await.unwrap();
        /// # }
        /// ```
        pub fn deploy<T: ::ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::core::result::Result<
            ::ethers::contract::builders::ContractDeployer<M, Self>,
            ::ethers::contract::ContractError<M>,
        > {
            let factory = ::ethers::contract::ContractFactory::new(
                SELFIEPOOL_ABI.clone(),
                SELFIEPOOL_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ::ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        ///Calls the contract's `emergencyExit` (0xa441d067) function
        pub fn emergency_exit(
            &self,
            receiver: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([164, 65, 208, 103], receiver)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `flashFee` (0xd9d98ce4) function
        pub fn flash_fee(
            &self,
            token: ::ethers::core::types::Address,
            p1: ::ethers::core::types::U256,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([217, 217, 140, 228], (token, p1))
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `flashLoan` (0x5cffe9de) function
        pub fn flash_loan(
            &self,
            receiver: ::ethers::core::types::Address,
            token: ::ethers::core::types::Address,
            amount: ::ethers::core::types::U256,
            data: ::ethers::core::types::Bytes,
        ) -> ::ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([92, 255, 233, 222], (receiver, token, amount, data))
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `governance` (0x5aa6e675) function
        pub fn governance(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::ethers::core::types::Address,
        > {
            self.0
                .method_hash([90, 166, 230, 117], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `maxFlashLoan` (0x613255ab) function
        pub fn max_flash_loan(
            &self,
            token: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([97, 50, 85, 171], token)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `token` (0xfc0c546a) function
        pub fn token(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::ethers::core::types::Address,
        > {
            self.0
                .method_hash([252, 12, 84, 106], ())
                .expect("method not found (this should never happen)")
        }
        ///Gets the contract's `FundsDrained` event
        pub fn funds_drained_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<
            ::std::sync::Arc<M>,
            M,
            FundsDrainedFilter,
        > {
            self.0.event()
        }
        /// Returns an `Event` builder for all the events of this contract.
        pub fn events(
            &self,
        ) -> ::ethers::contract::builders::Event<
            ::std::sync::Arc<M>,
            M,
            FundsDrainedFilter,
        > {
            self.0.event_with_filter(::core::default::Default::default())
        }
    }
    impl<M: ::ethers::providers::Middleware> From<::ethers::contract::Contract<M>>
    for SelfiePool<M> {
        fn from(contract: ::ethers::contract::Contract<M>) -> Self {
            Self::new(contract.address(), contract.client())
        }
    }
    ///Custom Error type `CallbackFailed` with signature `CallbackFailed()` and selector `0x221f6158`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(name = "CallbackFailed", abi = "CallbackFailed()")]
    pub struct CallbackFailed;
    ///Custom Error type `CallerNotGovernance` with signature `CallerNotGovernance()` and selector `0xf2be30fb`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(name = "CallerNotGovernance", abi = "CallerNotGovernance()")]
    pub struct CallerNotGovernance;
    ///Custom Error type `RepayFailed` with signature `RepayFailed()` and selector `0x9e703a05`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(name = "RepayFailed", abi = "RepayFailed()")]
    pub struct RepayFailed;
    ///Custom Error type `UnsupportedCurrency` with signature `UnsupportedCurrency()` and selector `0x2263f4e2`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(name = "UnsupportedCurrency", abi = "UnsupportedCurrency()")]
    pub struct UnsupportedCurrency;
    ///Container type for all of the contract's custom errors
    #[derive(Clone, ::ethers::contract::EthAbiType, Debug, PartialEq, Eq, Hash)]
    pub enum SelfiePoolErrors {
        CallbackFailed(CallbackFailed),
        CallerNotGovernance(CallerNotGovernance),
        RepayFailed(RepayFailed),
        UnsupportedCurrency(UnsupportedCurrency),
        /// The standard solidity revert string, with selector
        /// Error(string) -- 0x08c379a0
        RevertString(::std::string::String),
    }
    impl ::ethers::core::abi::AbiDecode for SelfiePoolErrors {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::core::result::Result<Self, ::ethers::core::abi::AbiError> {
            let data = data.as_ref();
            if let Ok(decoded)
                = <::std::string::String as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::RevertString(decoded));
            }
            if let Ok(decoded)
                = <CallbackFailed as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::CallbackFailed(decoded));
            }
            if let Ok(decoded)
                = <CallerNotGovernance as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::CallerNotGovernance(decoded));
            }
            if let Ok(decoded)
                = <RepayFailed as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::RepayFailed(decoded));
            }
            if let Ok(decoded)
                = <UnsupportedCurrency as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::UnsupportedCurrency(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ::ethers::core::abi::AbiEncode for SelfiePoolErrors {
        fn encode(self) -> ::std::vec::Vec<u8> {
            match self {
                Self::CallbackFailed(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::CallerNotGovernance(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::RepayFailed(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::UnsupportedCurrency(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::RevertString(s) => ::ethers::core::abi::AbiEncode::encode(s),
            }
        }
    }
    impl ::ethers::contract::ContractRevert for SelfiePoolErrors {
        fn valid_selector(selector: [u8; 4]) -> bool {
            match selector {
                [0x08, 0xc3, 0x79, 0xa0] => true,
                _ if selector
                    == <CallbackFailed as ::ethers::contract::EthError>::selector() => {
                    true
                }
                _ if selector
                    == <CallerNotGovernance as ::ethers::contract::EthError>::selector() => {
                    true
                }
                _ if selector
                    == <RepayFailed as ::ethers::contract::EthError>::selector() => true,
                _ if selector
                    == <UnsupportedCurrency as ::ethers::contract::EthError>::selector() => {
                    true
                }
                _ => false,
            }
        }
    }
    impl ::core::fmt::Display for SelfiePoolErrors {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                Self::CallbackFailed(element) => ::core::fmt::Display::fmt(element, f),
                Self::CallerNotGovernance(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::RepayFailed(element) => ::core::fmt::Display::fmt(element, f),
                Self::UnsupportedCurrency(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::RevertString(s) => ::core::fmt::Display::fmt(s, f),
            }
        }
    }
    impl ::core::convert::From<::std::string::String> for SelfiePoolErrors {
        fn from(value: String) -> Self {
            Self::RevertString(value)
        }
    }
    impl ::core::convert::From<CallbackFailed> for SelfiePoolErrors {
        fn from(value: CallbackFailed) -> Self {
            Self::CallbackFailed(value)
        }
    }
    impl ::core::convert::From<CallerNotGovernance> for SelfiePoolErrors {
        fn from(value: CallerNotGovernance) -> Self {
            Self::CallerNotGovernance(value)
        }
    }
    impl ::core::convert::From<RepayFailed> for SelfiePoolErrors {
        fn from(value: RepayFailed) -> Self {
            Self::RepayFailed(value)
        }
    }
    impl ::core::convert::From<UnsupportedCurrency> for SelfiePoolErrors {
        fn from(value: UnsupportedCurrency) -> Self {
            Self::UnsupportedCurrency(value)
        }
    }
    #[derive(
        Clone,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethevent(name = "FundsDrained", abi = "FundsDrained(address,uint256)")]
    pub struct FundsDrainedFilter {
        #[ethevent(indexed)]
        pub receiver: ::ethers::core::types::Address,
        pub amount: ::ethers::core::types::U256,
    }
    ///Container type for all input parameters for the `emergencyExit` function with signature `emergencyExit(address)` and selector `0xa441d067`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "emergencyExit", abi = "emergencyExit(address)")]
    pub struct EmergencyExitCall {
        pub receiver: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `flashFee` function with signature `flashFee(address,uint256)` and selector `0xd9d98ce4`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "flashFee", abi = "flashFee(address,uint256)")]
    pub struct FlashFeeCall {
        pub token: ::ethers::core::types::Address,
        pub p1: ::ethers::core::types::U256,
    }
    ///Container type for all input parameters for the `flashLoan` function with signature `flashLoan(address,address,uint256,bytes)` and selector `0x5cffe9de`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "flashLoan", abi = "flashLoan(address,address,uint256,bytes)")]
    pub struct FlashLoanCall {
        pub receiver: ::ethers::core::types::Address,
        pub token: ::ethers::core::types::Address,
        pub amount: ::ethers::core::types::U256,
        pub data: ::ethers::core::types::Bytes,
    }
    ///Container type for all input parameters for the `governance` function with signature `governance()` and selector `0x5aa6e675`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "governance", abi = "governance()")]
    pub struct GovernanceCall;
    ///Container type for all input parameters for the `maxFlashLoan` function with signature `maxFlashLoan(address)` and selector `0x613255ab`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "maxFlashLoan", abi = "maxFlashLoan(address)")]
    pub struct MaxFlashLoanCall {
        pub token: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `token` function with signature `token()` and selector `0xfc0c546a`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "token", abi = "token()")]
    pub struct TokenCall;
    ///Container type for all of the contract's call
    #[derive(Clone, ::ethers::contract::EthAbiType, Debug, PartialEq, Eq, Hash)]
    pub enum SelfiePoolCalls {
        EmergencyExit(EmergencyExitCall),
        FlashFee(FlashFeeCall),
        FlashLoan(FlashLoanCall),
        Governance(GovernanceCall),
        MaxFlashLoan(MaxFlashLoanCall),
        Token(TokenCall),
    }
    impl ::ethers::core::abi::AbiDecode for SelfiePoolCalls {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::core::result::Result<Self, ::ethers::core::abi::AbiError> {
            let data = data.as_ref();
            if let Ok(decoded)
                = <EmergencyExitCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::EmergencyExit(decoded));
            }
            if let Ok(decoded)
                = <FlashFeeCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::FlashFee(decoded));
            }
            if let Ok(decoded)
                = <FlashLoanCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::FlashLoan(decoded));
            }
            if let Ok(decoded)
                = <GovernanceCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::Governance(decoded));
            }
            if let Ok(decoded)
                = <MaxFlashLoanCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::MaxFlashLoan(decoded));
            }
            if let Ok(decoded)
                = <TokenCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::Token(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ::ethers::core::abi::AbiEncode for SelfiePoolCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                Self::EmergencyExit(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::FlashFee(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::FlashLoan(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::Governance(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::MaxFlashLoan(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::Token(element) => ::ethers::core::abi::AbiEncode::encode(element),
            }
        }
    }
    impl ::core::fmt::Display for SelfiePoolCalls {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                Self::EmergencyExit(element) => ::core::fmt::Display::fmt(element, f),
                Self::FlashFee(element) => ::core::fmt::Display::fmt(element, f),
                Self::FlashLoan(element) => ::core::fmt::Display::fmt(element, f),
                Self::Governance(element) => ::core::fmt::Display::fmt(element, f),
                Self::MaxFlashLoan(element) => ::core::fmt::Display::fmt(element, f),
                Self::Token(element) => ::core::fmt::Display::fmt(element, f),
            }
        }
    }
    impl ::core::convert::From<EmergencyExitCall> for SelfiePoolCalls {
        fn from(value: EmergencyExitCall) -> Self {
            Self::EmergencyExit(value)
        }
    }
    impl ::core::convert::From<FlashFeeCall> for SelfiePoolCalls {
        fn from(value: FlashFeeCall) -> Self {
            Self::FlashFee(value)
        }
    }
    impl ::core::convert::From<FlashLoanCall> for SelfiePoolCalls {
        fn from(value: FlashLoanCall) -> Self {
            Self::FlashLoan(value)
        }
    }
    impl ::core::convert::From<GovernanceCall> for SelfiePoolCalls {
        fn from(value: GovernanceCall) -> Self {
            Self::Governance(value)
        }
    }
    impl ::core::convert::From<MaxFlashLoanCall> for SelfiePoolCalls {
        fn from(value: MaxFlashLoanCall) -> Self {
            Self::MaxFlashLoan(value)
        }
    }
    impl ::core::convert::From<TokenCall> for SelfiePoolCalls {
        fn from(value: TokenCall) -> Self {
            Self::Token(value)
        }
    }
    ///Container type for all return fields from the `flashFee` function with signature `flashFee(address,uint256)` and selector `0xd9d98ce4`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct FlashFeeReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `flashLoan` function with signature `flashLoan(address,address,uint256,bytes)` and selector `0x5cffe9de`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct FlashLoanReturn(pub bool);
    ///Container type for all return fields from the `governance` function with signature `governance()` and selector `0x5aa6e675`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct GovernanceReturn(pub ::ethers::core::types::Address);
    ///Container type for all return fields from the `maxFlashLoan` function with signature `maxFlashLoan(address)` and selector `0x613255ab`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct MaxFlashLoanReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `token` function with signature `token()` and selector `0xfc0c546a`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct TokenReturn(pub ::ethers::core::types::Address);
}
