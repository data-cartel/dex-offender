pub use side_entrance_lender_pool::*;
/// This module was auto-generated with ethers-rs Abigen.
/// More information at: <https://github.com/gakonst/ethers-rs>
#[allow(
    clippy::enum_variant_names,
    clippy::too_many_arguments,
    clippy::upper_case_acronyms,
    clippy::type_complexity,
    dead_code,
    non_camel_case_types,
)]
pub mod side_entrance_lender_pool {
    #[rustfmt::skip]
    const __ABI: &str = "[{\"inputs\":[],\"type\":\"error\",\"name\":\"RepayFailed\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"Deposit\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"Withdraw\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\",\"name\":\"deposit\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"flashLoan\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"withdraw\",\"outputs\":[]}]";
    ///The parsed JSON ABI of the contract.
    pub static SIDEENTRANCELENDERPOOL_ABI: ::ethers::contract::Lazy<
        ::ethers::core::abi::Abi,
    > = ::ethers::contract::Lazy::new(|| {
        ::ethers::core::utils::__serde_json::from_str(__ABI)
            .expect("ABI is always valid")
    });
    #[rustfmt::skip]
    const __BYTECODE: &[u8] = &[
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        2,
        1,
        128,
        97,
        0,
        32,
        96,
        0,
        57,
        96,
        0,
        243,
        254,
        96,
        128,
        96,
        64,
        82,
        96,
        4,
        54,
        16,
        97,
        0,
        52,
        87,
        96,
        0,
        53,
        96,
        224,
        28,
        128,
        99,
        60,
        207,
        214,
        11,
        20,
        97,
        0,
        57,
        87,
        128,
        99,
        154,
        182,
        3,
        185,
        20,
        97,
        0,
        80,
        87,
        128,
        99,
        208,
        227,
        13,
        176,
        20,
        97,
        0,
        112,
        87,
        91,
        96,
        0,
        128,
        253,
        91,
        52,
        128,
        21,
        97,
        0,
        69,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        0,
        78,
        97,
        0,
        120,
        86,
        91,
        0,
        91,
        52,
        128,
        21,
        97,
        0,
        92,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        0,
        78,
        97,
        0,
        107,
        54,
        96,
        4,
        97,
        1,
        178,
        86,
        91,
        97,
        0,
        204,
        86,
        91,
        97,
        0,
        78,
        97,
        1,
        74,
        86,
        91,
        51,
        96,
        0,
        129,
        129,
        82,
        96,
        32,
        129,
        129,
        82,
        96,
        64,
        128,
        131,
        32,
        128,
        84,
        147,
        144,
        85,
        81,
        130,
        129,
        82,
        145,
        146,
        145,
        127,
        136,
        78,
        218,
        217,
        206,
        111,
        162,
        68,
        13,
        138,
        84,
        204,
        18,
        52,
        144,
        235,
        150,
        210,
        118,
        132,
        121,
        212,
        159,
        249,
        199,
        54,
        97,
        37,
        169,
        66,
        67,
        100,
        145,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        162,
        97,
        0,
        201,
        51,
        130,
        97,
        1,
        150,
        86,
        91,
        80,
        86,
        91,
        96,
        0,
        71,
        144,
        80,
        51,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        99,
        97,
        70,
        25,
        84,
        131,
        96,
        64,
        81,
        130,
        99,
        255,
        255,
        255,
        255,
        22,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        0,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        133,
        136,
        128,
        59,
        21,
        128,
        21,
        97,
        1,
        12,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        90,
        241,
        21,
        128,
        21,
        97,
        1,
        32,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        80,
        80,
        80,
        128,
        71,
        16,
        21,
        97,
        1,
        70,
        87,
        96,
        64,
        81,
        99,
        158,
        112,
        58,
        5,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        80,
        80,
        86,
        91,
        51,
        96,
        0,
        129,
        129,
        82,
        96,
        32,
        129,
        129,
        82,
        96,
        64,
        145,
        130,
        144,
        32,
        128,
        84,
        52,
        144,
        129,
        1,
        144,
        145,
        85,
        145,
        81,
        145,
        130,
        82,
        127,
        225,
        255,
        252,
        196,
        146,
        61,
        4,
        181,
        89,
        244,
        210,
        154,
        139,
        252,
        108,
        218,
        4,
        235,
        91,
        13,
        60,
        70,
        7,
        81,
        194,
        64,
        44,
        92,
        92,
        201,
        16,
        156,
        145,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        162,
        86,
        91,
        96,
        0,
        128,
        96,
        0,
        128,
        132,
        134,
        90,
        241,
        97,
        1,
        70,
        87,
        99,
        177,
        45,
        19,
        235,
        96,
        0,
        82,
        96,
        4,
        96,
        28,
        253,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        1,
        196,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        53,
        145,
        144,
        80,
        86,
        254,
        162,
        100,
        105,
        112,
        102,
        115,
        88,
        34,
        18,
        32,
        112,
        107,
        194,
        8,
        56,
        218,
        124,
        37,
        5,
        132,
        54,
        37,
        26,
        167,
        8,
        190,
        249,
        208,
        44,
        38,
        58,
        33,
        60,
        12,
        117,
        175,
        145,
        202,
        123,
        81,
        181,
        77,
        100,
        115,
        111,
        108,
        99,
        67,
        0,
        8,
        20,
        0,
        51,
    ];
    ///The bytecode of the contract.
    pub static SIDEENTRANCELENDERPOOL_BYTECODE: ::ethers::core::types::Bytes = ::ethers::core::types::Bytes::from_static(
        __BYTECODE,
    );
    #[rustfmt::skip]
    const __DEPLOYED_BYTECODE: &[u8] = &[
        96,
        128,
        96,
        64,
        82,
        96,
        4,
        54,
        16,
        97,
        0,
        52,
        87,
        96,
        0,
        53,
        96,
        224,
        28,
        128,
        99,
        60,
        207,
        214,
        11,
        20,
        97,
        0,
        57,
        87,
        128,
        99,
        154,
        182,
        3,
        185,
        20,
        97,
        0,
        80,
        87,
        128,
        99,
        208,
        227,
        13,
        176,
        20,
        97,
        0,
        112,
        87,
        91,
        96,
        0,
        128,
        253,
        91,
        52,
        128,
        21,
        97,
        0,
        69,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        0,
        78,
        97,
        0,
        120,
        86,
        91,
        0,
        91,
        52,
        128,
        21,
        97,
        0,
        92,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        0,
        78,
        97,
        0,
        107,
        54,
        96,
        4,
        97,
        1,
        178,
        86,
        91,
        97,
        0,
        204,
        86,
        91,
        97,
        0,
        78,
        97,
        1,
        74,
        86,
        91,
        51,
        96,
        0,
        129,
        129,
        82,
        96,
        32,
        129,
        129,
        82,
        96,
        64,
        128,
        131,
        32,
        128,
        84,
        147,
        144,
        85,
        81,
        130,
        129,
        82,
        145,
        146,
        145,
        127,
        136,
        78,
        218,
        217,
        206,
        111,
        162,
        68,
        13,
        138,
        84,
        204,
        18,
        52,
        144,
        235,
        150,
        210,
        118,
        132,
        121,
        212,
        159,
        249,
        199,
        54,
        97,
        37,
        169,
        66,
        67,
        100,
        145,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        162,
        97,
        0,
        201,
        51,
        130,
        97,
        1,
        150,
        86,
        91,
        80,
        86,
        91,
        96,
        0,
        71,
        144,
        80,
        51,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        99,
        97,
        70,
        25,
        84,
        131,
        96,
        64,
        81,
        130,
        99,
        255,
        255,
        255,
        255,
        22,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        0,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        133,
        136,
        128,
        59,
        21,
        128,
        21,
        97,
        1,
        12,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        90,
        241,
        21,
        128,
        21,
        97,
        1,
        32,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        80,
        80,
        80,
        128,
        71,
        16,
        21,
        97,
        1,
        70,
        87,
        96,
        64,
        81,
        99,
        158,
        112,
        58,
        5,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        80,
        80,
        86,
        91,
        51,
        96,
        0,
        129,
        129,
        82,
        96,
        32,
        129,
        129,
        82,
        96,
        64,
        145,
        130,
        144,
        32,
        128,
        84,
        52,
        144,
        129,
        1,
        144,
        145,
        85,
        145,
        81,
        145,
        130,
        82,
        127,
        225,
        255,
        252,
        196,
        146,
        61,
        4,
        181,
        89,
        244,
        210,
        154,
        139,
        252,
        108,
        218,
        4,
        235,
        91,
        13,
        60,
        70,
        7,
        81,
        194,
        64,
        44,
        92,
        92,
        201,
        16,
        156,
        145,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        162,
        86,
        91,
        96,
        0,
        128,
        96,
        0,
        128,
        132,
        134,
        90,
        241,
        97,
        1,
        70,
        87,
        99,
        177,
        45,
        19,
        235,
        96,
        0,
        82,
        96,
        4,
        96,
        28,
        253,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        1,
        196,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        53,
        145,
        144,
        80,
        86,
        254,
        162,
        100,
        105,
        112,
        102,
        115,
        88,
        34,
        18,
        32,
        112,
        107,
        194,
        8,
        56,
        218,
        124,
        37,
        5,
        132,
        54,
        37,
        26,
        167,
        8,
        190,
        249,
        208,
        44,
        38,
        58,
        33,
        60,
        12,
        117,
        175,
        145,
        202,
        123,
        81,
        181,
        77,
        100,
        115,
        111,
        108,
        99,
        67,
        0,
        8,
        20,
        0,
        51,
    ];
    ///The deployed bytecode of the contract.
    pub static SIDEENTRANCELENDERPOOL_DEPLOYED_BYTECODE: ::ethers::core::types::Bytes = ::ethers::core::types::Bytes::from_static(
        __DEPLOYED_BYTECODE,
    );
    pub struct SideEntranceLenderPool<M>(::ethers::contract::Contract<M>);
    impl<M> ::core::clone::Clone for SideEntranceLenderPool<M> {
        fn clone(&self) -> Self {
            Self(::core::clone::Clone::clone(&self.0))
        }
    }
    impl<M> ::core::ops::Deref for SideEntranceLenderPool<M> {
        type Target = ::ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M> ::core::ops::DerefMut for SideEntranceLenderPool<M> {
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl<M> ::core::fmt::Debug for SideEntranceLenderPool<M> {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple(stringify!(SideEntranceLenderPool))
                .field(&self.address())
                .finish()
        }
    }
    impl<M: ::ethers::providers::Middleware> SideEntranceLenderPool<M> {
        /// Creates a new contract instance with the specified `ethers` client at
        /// `address`. The contract derefs to a `ethers::Contract` object.
        pub fn new<T: Into<::ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            Self(
                ::ethers::contract::Contract::new(
                    address.into(),
                    SIDEENTRANCELENDERPOOL_ABI.clone(),
                    client,
                ),
            )
        }
        /// Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it.
        /// Returns a new instance of a deployer that returns an instance of this contract after sending the transaction
        ///
        /// Notes:
        /// - If there are no constructor arguments, you should pass `()` as the argument.
        /// - The default poll duration is 7 seconds.
        /// - The default number of confirmations is 1 block.
        ///
        ///
        /// # Example
        ///
        /// Generate contract bindings with `abigen!` and deploy a new contract instance.
        ///
        /// *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact.
        ///
        /// ```ignore
        /// # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {
        ///     abigen!(Greeter, "../greeter.json");
        ///
        ///    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();
        ///    let msg = greeter_contract.greet().call().await.unwrap();
        /// # }
        /// ```
        pub fn deploy<T: ::ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::core::result::Result<
            ::ethers::contract::builders::ContractDeployer<M, Self>,
            ::ethers::contract::ContractError<M>,
        > {
            let factory = ::ethers::contract::ContractFactory::new(
                SIDEENTRANCELENDERPOOL_ABI.clone(),
                SIDEENTRANCELENDERPOOL_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ::ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        ///Calls the contract's `deposit` (0xd0e30db0) function
        pub fn deposit(&self) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([208, 227, 13, 176], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `flashLoan` (0x9ab603b9) function
        pub fn flash_loan(
            &self,
            amount: ::ethers::core::types::U256,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([154, 182, 3, 185], amount)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `withdraw` (0x3ccfd60b) function
        pub fn withdraw(&self) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([60, 207, 214, 11], ())
                .expect("method not found (this should never happen)")
        }
        ///Gets the contract's `Deposit` event
        pub fn deposit_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<::std::sync::Arc<M>, M, DepositFilter> {
            self.0.event()
        }
        ///Gets the contract's `Withdraw` event
        pub fn withdraw_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<
            ::std::sync::Arc<M>,
            M,
            WithdrawFilter,
        > {
            self.0.event()
        }
        /// Returns an `Event` builder for all the events of this contract.
        pub fn events(
            &self,
        ) -> ::ethers::contract::builders::Event<
            ::std::sync::Arc<M>,
            M,
            SideEntranceLenderPoolEvents,
        > {
            self.0.event_with_filter(::core::default::Default::default())
        }
    }
    impl<M: ::ethers::providers::Middleware> From<::ethers::contract::Contract<M>>
    for SideEntranceLenderPool<M> {
        fn from(contract: ::ethers::contract::Contract<M>) -> Self {
            Self::new(contract.address(), contract.client())
        }
    }
    ///Custom Error type `RepayFailed` with signature `RepayFailed()` and selector `0x9e703a05`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(name = "RepayFailed", abi = "RepayFailed()")]
    pub struct RepayFailed;
    #[derive(
        Clone,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethevent(name = "Deposit", abi = "Deposit(address,uint256)")]
    pub struct DepositFilter {
        #[ethevent(indexed)]
        pub who: ::ethers::core::types::Address,
        pub amount: ::ethers::core::types::U256,
    }
    #[derive(
        Clone,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethevent(name = "Withdraw", abi = "Withdraw(address,uint256)")]
    pub struct WithdrawFilter {
        #[ethevent(indexed)]
        pub who: ::ethers::core::types::Address,
        pub amount: ::ethers::core::types::U256,
    }
    ///Container type for all of the contract's events
    #[derive(Clone, ::ethers::contract::EthAbiType, Debug, PartialEq, Eq, Hash)]
    pub enum SideEntranceLenderPoolEvents {
        DepositFilter(DepositFilter),
        WithdrawFilter(WithdrawFilter),
    }
    impl ::ethers::contract::EthLogDecode for SideEntranceLenderPoolEvents {
        fn decode_log(
            log: &::ethers::core::abi::RawLog,
        ) -> ::core::result::Result<Self, ::ethers::core::abi::Error> {
            if let Ok(decoded) = DepositFilter::decode_log(log) {
                return Ok(SideEntranceLenderPoolEvents::DepositFilter(decoded));
            }
            if let Ok(decoded) = WithdrawFilter::decode_log(log) {
                return Ok(SideEntranceLenderPoolEvents::WithdrawFilter(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData)
        }
    }
    impl ::core::fmt::Display for SideEntranceLenderPoolEvents {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                Self::DepositFilter(element) => ::core::fmt::Display::fmt(element, f),
                Self::WithdrawFilter(element) => ::core::fmt::Display::fmt(element, f),
            }
        }
    }
    impl ::core::convert::From<DepositFilter> for SideEntranceLenderPoolEvents {
        fn from(value: DepositFilter) -> Self {
            Self::DepositFilter(value)
        }
    }
    impl ::core::convert::From<WithdrawFilter> for SideEntranceLenderPoolEvents {
        fn from(value: WithdrawFilter) -> Self {
            Self::WithdrawFilter(value)
        }
    }
    ///Container type for all input parameters for the `deposit` function with signature `deposit()` and selector `0xd0e30db0`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "deposit", abi = "deposit()")]
    pub struct DepositCall;
    ///Container type for all input parameters for the `flashLoan` function with signature `flashLoan(uint256)` and selector `0x9ab603b9`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "flashLoan", abi = "flashLoan(uint256)")]
    pub struct FlashLoanCall {
        pub amount: ::ethers::core::types::U256,
    }
    ///Container type for all input parameters for the `withdraw` function with signature `withdraw()` and selector `0x3ccfd60b`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "withdraw", abi = "withdraw()")]
    pub struct WithdrawCall;
    ///Container type for all of the contract's call
    #[derive(Clone, ::ethers::contract::EthAbiType, Debug, PartialEq, Eq, Hash)]
    pub enum SideEntranceLenderPoolCalls {
        Deposit(DepositCall),
        FlashLoan(FlashLoanCall),
        Withdraw(WithdrawCall),
    }
    impl ::ethers::core::abi::AbiDecode for SideEntranceLenderPoolCalls {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::core::result::Result<Self, ::ethers::core::abi::AbiError> {
            let data = data.as_ref();
            if let Ok(decoded)
                = <DepositCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::Deposit(decoded));
            }
            if let Ok(decoded)
                = <FlashLoanCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::FlashLoan(decoded));
            }
            if let Ok(decoded)
                = <WithdrawCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::Withdraw(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ::ethers::core::abi::AbiEncode for SideEntranceLenderPoolCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                Self::Deposit(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::FlashLoan(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::Withdraw(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
            }
        }
    }
    impl ::core::fmt::Display for SideEntranceLenderPoolCalls {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                Self::Deposit(element) => ::core::fmt::Display::fmt(element, f),
                Self::FlashLoan(element) => ::core::fmt::Display::fmt(element, f),
                Self::Withdraw(element) => ::core::fmt::Display::fmt(element, f),
            }
        }
    }
    impl ::core::convert::From<DepositCall> for SideEntranceLenderPoolCalls {
        fn from(value: DepositCall) -> Self {
            Self::Deposit(value)
        }
    }
    impl ::core::convert::From<FlashLoanCall> for SideEntranceLenderPoolCalls {
        fn from(value: FlashLoanCall) -> Self {
            Self::FlashLoan(value)
        }
    }
    impl ::core::convert::From<WithdrawCall> for SideEntranceLenderPoolCalls {
        fn from(value: WithdrawCall) -> Self {
            Self::Withdraw(value)
        }
    }
}
