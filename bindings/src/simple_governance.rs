pub use simple_governance::*;
/// This module was auto-generated with ethers-rs Abigen.
/// More information at: <https://github.com/gakonst/ethers-rs>
#[allow(
    clippy::enum_variant_names,
    clippy::too_many_arguments,
    clippy::upper_case_acronyms,
    clippy::type_complexity,
    dead_code,
    non_camel_case_types,
)]
pub mod simple_governance {
    pub use super::super::shared_types::*;
    #[rustfmt::skip]
    const __ABI: &str = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"governanceToken\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"actionId\",\"type\":\"uint256\",\"components\":[]}],\"type\":\"error\",\"name\":\"ActionFailed\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"actionId\",\"type\":\"uint256\",\"components\":[]}],\"type\":\"error\",\"name\":\"CannotExecute\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"InvalidTarget\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\",\"components\":[]}],\"type\":\"error\",\"name\":\"NotEnoughVotes\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"TargetMustHaveCode\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"actionId\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"ActionExecuted\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"actionId\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"ActionQueued\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"actionId\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"payable\",\"type\":\"function\",\"name\":\"executeAction\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"actionId\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getAction\",\"outputs\":[{\"internalType\":\"struct ISimpleGovernance.GovernanceAction\",\"name\":\"\",\"type\":\"tuple\",\"components\":[{\"internalType\":\"uint128\",\"name\":\"value\",\"type\":\"uint128\",\"components\":[]},{\"internalType\":\"uint64\",\"name\":\"proposedAt\",\"type\":\"uint64\",\"components\":[]},{\"internalType\":\"uint64\",\"name\":\"executedAt\",\"type\":\"uint64\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\",\"components\":[]}]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getActionCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\",\"name\":\"getActionDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getGovernanceToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint128\",\"name\":\"value\",\"type\":\"uint128\",\"components\":[]},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"queueAction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"actionId\",\"type\":\"uint256\",\"components\":[]}]}]";
    ///The parsed JSON ABI of the contract.
    pub static SIMPLEGOVERNANCE_ABI: ::ethers::contract::Lazy<
        ::ethers::core::abi::Abi,
    > = ::ethers::contract::Lazy::new(|| {
        ::ethers::core::utils::__serde_json::from_str(__ABI)
            .expect("ABI is always valid")
    });
    #[rustfmt::skip]
    const __BYTECODE: &[u8] = &[
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        64,
        81,
        97,
        12,
        83,
        56,
        3,
        128,
        97,
        12,
        83,
        131,
        57,
        129,
        1,
        96,
        64,
        129,
        144,
        82,
        97,
        0,
        47,
        145,
        97,
        0,
        88,
        86,
        91,
        96,
        0,
        128,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        25,
        22,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        146,
        144,
        146,
        22,
        145,
        144,
        145,
        23,
        144,
        85,
        96,
        1,
        128,
        85,
        97,
        0,
        136,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        0,
        106,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        129,
        20,
        97,
        0,
        129,
        87,
        96,
        0,
        128,
        253,
        91,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        97,
        11,
        188,
        128,
        97,
        0,
        151,
        96,
        0,
        57,
        96,
        0,
        243,
        254,
        96,
        128,
        96,
        64,
        82,
        96,
        4,
        54,
        16,
        97,
        0,
        85,
        87,
        96,
        0,
        53,
        96,
        224,
        28,
        128,
        99,
        18,
        5,
        122,
        20,
        20,
        97,
        0,
        90,
        87,
        128,
        99,
        63,
        138,
        3,
        125,
        20,
        97,
        0,
        127,
        87,
        128,
        99,
        82,
        236,
        185,
        10,
        20,
        97,
        0,
        167,
        87,
        128,
        99,
        154,
        202,
        8,
        212,
        20,
        97,
        0,
        199,
        87,
        128,
        99,
        182,
        231,
        104,
        115,
        20,
        97,
        0,
        220,
        87,
        128,
        99,
        192,
        193,
        207,
        85,
        20,
        97,
        1,
        9,
        87,
        91,
        96,
        0,
        128,
        253,
        91,
        52,
        128,
        21,
        97,
        0,
        102,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        98,
        2,
        163,
        0,
        91,
        96,
        64,
        81,
        144,
        129,
        82,
        96,
        32,
        1,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        243,
        91,
        52,
        128,
        21,
        97,
        0,
        139,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        0,
        84,
        96,
        64,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        144,
        145,
        22,
        129,
        82,
        96,
        32,
        1,
        97,
        0,
        118,
        86,
        91,
        52,
        128,
        21,
        97,
        0,
        179,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        0,
        108,
        97,
        0,
        194,
        54,
        96,
        4,
        97,
        7,
        239,
        86,
        91,
        97,
        1,
        41,
        86,
        91,
        52,
        128,
        21,
        97,
        0,
        211,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        1,
        84,
        97,
        0,
        108,
        86,
        91,
        52,
        128,
        21,
        97,
        0,
        232,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        0,
        252,
        97,
        0,
        247,
        54,
        96,
        4,
        97,
        8,
        153,
        86,
        91,
        97,
        3,
        35,
        86,
        91,
        96,
        64,
        81,
        97,
        0,
        118,
        145,
        144,
        97,
        8,
        248,
        86,
        91,
        97,
        1,
        28,
        97,
        1,
        23,
        54,
        96,
        4,
        97,
        8,
        153,
        86,
        91,
        97,
        4,
        85,
        86,
        91,
        96,
        64,
        81,
        97,
        0,
        118,
        145,
        144,
        97,
        9,
        92,
        86,
        91,
        96,
        0,
        97,
        1,
        52,
        51,
        97,
        5,
        151,
        86,
        91,
        97,
        1,
        88,
        87,
        96,
        64,
        81,
        99,
        125,
        137,
        37,
        117,
        96,
        225,
        27,
        129,
        82,
        51,
        96,
        4,
        130,
        1,
        82,
        96,
        36,
        1,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        48,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        134,
        22,
        3,
        97,
        1,
        129,
        87,
        96,
        64,
        81,
        99,
        65,
        106,
        235,
        181,
        96,
        225,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        129,
        21,
        128,
        21,
        144,
        97,
        1,
        152,
        87,
        80,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        133,
        22,
        59,
        21,
        91,
        21,
        97,
        1,
        182,
        87,
        96,
        64,
        81,
        99,
        109,
        212,
        170,
        101,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        1,
        84,
        144,
        80,
        96,
        64,
        81,
        128,
        96,
        160,
        1,
        96,
        64,
        82,
        128,
        133,
        96,
        1,
        96,
        1,
        96,
        128,
        27,
        3,
        22,
        129,
        82,
        96,
        32,
        1,
        66,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        22,
        129,
        82,
        96,
        32,
        1,
        96,
        0,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        22,
        129,
        82,
        96,
        32,
        1,
        134,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        129,
        82,
        96,
        32,
        1,
        132,
        132,
        128,
        128,
        96,
        31,
        1,
        96,
        32,
        128,
        145,
        4,
        2,
        96,
        32,
        1,
        96,
        64,
        81,
        144,
        129,
        1,
        96,
        64,
        82,
        128,
        147,
        146,
        145,
        144,
        129,
        129,
        82,
        96,
        32,
        1,
        131,
        131,
        128,
        130,
        132,
        55,
        96,
        0,
        146,
        1,
        130,
        144,
        82,
        80,
        147,
        144,
        148,
        82,
        80,
        80,
        131,
        129,
        82,
        96,
        2,
        96,
        32,
        129,
        129,
        82,
        96,
        64,
        146,
        131,
        144,
        32,
        133,
        81,
        129,
        84,
        146,
        135,
        1,
        81,
        148,
        135,
        1,
        81,
        96,
        1,
        96,
        1,
        96,
        128,
        27,
        3,
        144,
        145,
        22,
        96,
        1,
        96,
        1,
        96,
        192,
        27,
        3,
        25,
        144,
        147,
        22,
        146,
        144,
        146,
        23,
        96,
        1,
        96,
        128,
        27,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        149,
        134,
        22,
        2,
        23,
        96,
        1,
        96,
        1,
        96,
        192,
        27,
        3,
        22,
        96,
        1,
        96,
        192,
        27,
        148,
        144,
        146,
        22,
        147,
        144,
        147,
        2,
        23,
        130,
        85,
        96,
        96,
        132,
        1,
        81,
        96,
        1,
        131,
        1,
        128,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        25,
        22,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        144,
        146,
        22,
        145,
        144,
        145,
        23,
        144,
        85,
        96,
        128,
        132,
        1,
        81,
        145,
        146,
        80,
        130,
        1,
        144,
        97,
        2,
        219,
        144,
        130,
        97,
        10,
        21,
        86,
        91,
        80,
        80,
        96,
        1,
        128,
        84,
        129,
        1,
        144,
        85,
        80,
        96,
        64,
        81,
        129,
        129,
        82,
        51,
        144,
        127,
        77,
        253,
        146,
        246,
        158,
        2,
        248,
        44,
        143,
        103,
        5,
        178,
        228,
        163,
        100,
        70,
        91,
        88,
        143,
        164,
        119,
        60,
        218,
        38,
        120,
        108,
        60,
        168,
        223,
        67,
        161,
        149,
        144,
        96,
        32,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        162,
        148,
        147,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        64,
        128,
        81,
        96,
        160,
        129,
        1,
        130,
        82,
        96,
        0,
        128,
        130,
        82,
        96,
        32,
        130,
        1,
        129,
        144,
        82,
        145,
        129,
        1,
        130,
        144,
        82,
        96,
        96,
        128,
        130,
        1,
        146,
        144,
        146,
        82,
        96,
        128,
        129,
        1,
        145,
        144,
        145,
        82,
        96,
        0,
        130,
        129,
        82,
        96,
        2,
        96,
        32,
        129,
        129,
        82,
        96,
        64,
        146,
        131,
        144,
        32,
        131,
        81,
        96,
        160,
        129,
        1,
        133,
        82,
        129,
        84,
        96,
        1,
        96,
        1,
        96,
        128,
        27,
        3,
        129,
        22,
        130,
        82,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        96,
        1,
        96,
        128,
        27,
        130,
        4,
        129,
        22,
        148,
        131,
        1,
        148,
        144,
        148,
        82,
        96,
        1,
        96,
        192,
        27,
        144,
        4,
        144,
        146,
        22,
        147,
        130,
        1,
        147,
        144,
        147,
        82,
        96,
        1,
        131,
        1,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        96,
        96,
        130,
        1,
        82,
        144,
        130,
        1,
        128,
        84,
        145,
        146,
        145,
        96,
        128,
        132,
        1,
        145,
        144,
        97,
        3,
        204,
        144,
        97,
        9,
        140,
        86,
        91,
        128,
        96,
        31,
        1,
        96,
        32,
        128,
        145,
        4,
        2,
        96,
        32,
        1,
        96,
        64,
        81,
        144,
        129,
        1,
        96,
        64,
        82,
        128,
        146,
        145,
        144,
        129,
        129,
        82,
        96,
        32,
        1,
        130,
        128,
        84,
        97,
        3,
        248,
        144,
        97,
        9,
        140,
        86,
        91,
        128,
        21,
        97,
        4,
        69,
        87,
        128,
        96,
        31,
        16,
        97,
        4,
        26,
        87,
        97,
        1,
        0,
        128,
        131,
        84,
        4,
        2,
        131,
        82,
        145,
        96,
        32,
        1,
        145,
        97,
        4,
        69,
        86,
        91,
        130,
        1,
        145,
        144,
        96,
        0,
        82,
        96,
        32,
        96,
        0,
        32,
        144,
        91,
        129,
        84,
        129,
        82,
        144,
        96,
        1,
        1,
        144,
        96,
        32,
        1,
        128,
        131,
        17,
        97,
        4,
        40,
        87,
        130,
        144,
        3,
        96,
        31,
        22,
        130,
        1,
        145,
        91,
        80,
        80,
        80,
        80,
        80,
        129,
        82,
        80,
        80,
        144,
        80,
        145,
        144,
        80,
        86,
        91,
        96,
        96,
        97,
        4,
        96,
        130,
        97,
        6,
        149,
        86,
        91,
        97,
        4,
        128,
        87,
        96,
        64,
        81,
        99,
        180,
        82,
        250,
        175,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        129,
        1,
        131,
        144,
        82,
        96,
        36,
        1,
        97,
        1,
        79,
        86,
        91,
        96,
        0,
        130,
        129,
        82,
        96,
        2,
        96,
        32,
        144,
        129,
        82,
        96,
        64,
        145,
        130,
        144,
        32,
        128,
        84,
        96,
        1,
        96,
        1,
        96,
        192,
        27,
        3,
        22,
        96,
        1,
        96,
        192,
        27,
        66,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        22,
        2,
        23,
        129,
        85,
        145,
        81,
        132,
        129,
        82,
        51,
        145,
        127,
        120,
        167,
        214,
        79,
        100,
        239,
        104,
        145,
        190,
        223,
        193,
        182,
        133,
        68,
        71,
        17,
        60,
        202,
        7,
        172,
        232,
        116,
        123,
        138,
        108,
        243,
        42,
        15,
        213,
        168,
        11,
        23,
        145,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        162,
        96,
        1,
        129,
        1,
        84,
        129,
        84,
        96,
        64,
        81,
        96,
        0,
        146,
        131,
        146,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        144,
        145,
        22,
        145,
        96,
        1,
        96,
        1,
        96,
        128,
        27,
        3,
        144,
        145,
        22,
        144,
        97,
        5,
        24,
        144,
        96,
        2,
        135,
        1,
        144,
        97,
        10,
        213,
        86,
        91,
        96,
        0,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        133,
        135,
        90,
        241,
        146,
        80,
        80,
        80,
        61,
        128,
        96,
        0,
        129,
        20,
        97,
        5,
        85,
        87,
        96,
        64,
        81,
        145,
        80,
        96,
        31,
        25,
        96,
        63,
        61,
        1,
        22,
        130,
        1,
        96,
        64,
        82,
        61,
        130,
        82,
        61,
        96,
        0,
        96,
        32,
        132,
        1,
        62,
        97,
        5,
        90,
        86,
        91,
        96,
        96,
        145,
        80,
        91,
        80,
        145,
        80,
        145,
        80,
        129,
        97,
        5,
        143,
        87,
        128,
        81,
        21,
        97,
        5,
        115,
        87,
        128,
        81,
        129,
        96,
        32,
        1,
        253,
        91,
        96,
        64,
        81,
        99,
        166,
        167,
        219,
        189,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        129,
        1,
        134,
        144,
        82,
        96,
        36,
        1,
        97,
        1,
        79,
        86,
        91,
        148,
        147,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        128,
        84,
        96,
        64,
        81,
        99,
        34,
        200,
        139,
        39,
        96,
        225,
        27,
        129,
        82,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        132,
        129,
        22,
        96,
        4,
        131,
        1,
        82,
        131,
        146,
        22,
        144,
        99,
        69,
        145,
        22,
        78,
        144,
        96,
        36,
        1,
        96,
        32,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        134,
        90,
        250,
        21,
        128,
        21,
        97,
        5,
        226,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        80,
        80,
        96,
        64,
        81,
        61,
        96,
        31,
        25,
        96,
        31,
        130,
        1,
        22,
        130,
        1,
        128,
        96,
        64,
        82,
        80,
        129,
        1,
        144,
        97,
        6,
        6,
        145,
        144,
        97,
        11,
        75,
        86,
        91,
        144,
        80,
        96,
        0,
        96,
        2,
        96,
        0,
        128,
        84,
        144,
        97,
        1,
        0,
        10,
        144,
        4,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        99,
        163,
        236,
        115,
        251,
        96,
        64,
        81,
        129,
        99,
        255,
        255,
        255,
        255,
        22,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        32,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        134,
        90,
        250,
        21,
        128,
        21,
        97,
        6,
        93,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        80,
        80,
        96,
        64,
        81,
        61,
        96,
        31,
        25,
        96,
        31,
        130,
        1,
        22,
        130,
        1,
        128,
        96,
        64,
        82,
        80,
        129,
        1,
        144,
        97,
        6,
        129,
        145,
        144,
        97,
        11,
        75,
        86,
        91,
        97,
        6,
        139,
        145,
        144,
        97,
        11,
        100,
        86,
        91,
        144,
        145,
        17,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        129,
        129,
        82,
        96,
        2,
        96,
        32,
        129,
        129,
        82,
        96,
        64,
        128,
        132,
        32,
        129,
        81,
        96,
        160,
        129,
        1,
        131,
        82,
        129,
        84,
        96,
        1,
        96,
        1,
        96,
        128,
        27,
        3,
        129,
        22,
        130,
        82,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        96,
        1,
        96,
        128,
        27,
        130,
        4,
        129,
        22,
        149,
        131,
        1,
        149,
        144,
        149,
        82,
        96,
        1,
        96,
        192,
        27,
        144,
        4,
        144,
        147,
        22,
        145,
        131,
        1,
        145,
        144,
        145,
        82,
        96,
        1,
        129,
        1,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        96,
        96,
        131,
        1,
        82,
        145,
        130,
        1,
        128,
        84,
        132,
        147,
        145,
        96,
        128,
        132,
        1,
        145,
        97,
        7,
        15,
        144,
        97,
        9,
        140,
        86,
        91,
        128,
        96,
        31,
        1,
        96,
        32,
        128,
        145,
        4,
        2,
        96,
        32,
        1,
        96,
        64,
        81,
        144,
        129,
        1,
        96,
        64,
        82,
        128,
        146,
        145,
        144,
        129,
        129,
        82,
        96,
        32,
        1,
        130,
        128,
        84,
        97,
        7,
        59,
        144,
        97,
        9,
        140,
        86,
        91,
        128,
        21,
        97,
        7,
        136,
        87,
        128,
        96,
        31,
        16,
        97,
        7,
        93,
        87,
        97,
        1,
        0,
        128,
        131,
        84,
        4,
        2,
        131,
        82,
        145,
        96,
        32,
        1,
        145,
        97,
        7,
        136,
        86,
        91,
        130,
        1,
        145,
        144,
        96,
        0,
        82,
        96,
        32,
        96,
        0,
        32,
        144,
        91,
        129,
        84,
        129,
        82,
        144,
        96,
        1,
        1,
        144,
        96,
        32,
        1,
        128,
        131,
        17,
        97,
        7,
        107,
        87,
        130,
        144,
        3,
        96,
        31,
        22,
        130,
        1,
        145,
        91,
        80,
        80,
        80,
        80,
        80,
        129,
        82,
        80,
        80,
        144,
        80,
        128,
        96,
        32,
        1,
        81,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        22,
        96,
        0,
        3,
        97,
        7,
        178,
        87,
        80,
        96,
        0,
        146,
        145,
        80,
        80,
        86,
        91,
        96,
        0,
        129,
        96,
        32,
        1,
        81,
        66,
        3,
        144,
        80,
        129,
        96,
        64,
        1,
        81,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        22,
        96,
        0,
        20,
        128,
        21,
        97,
        5,
        143,
        87,
        80,
        98,
        2,
        163,
        0,
        129,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        22,
        16,
        21,
        148,
        147,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        0,
        128,
        96,
        96,
        133,
        135,
        3,
        18,
        21,
        97,
        8,
        5,
        87,
        96,
        0,
        128,
        253,
        91,
        132,
        53,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        129,
        20,
        97,
        8,
        28,
        87,
        96,
        0,
        128,
        253,
        91,
        147,
        80,
        96,
        32,
        133,
        1,
        53,
        96,
        1,
        96,
        1,
        96,
        128,
        27,
        3,
        129,
        22,
        129,
        20,
        97,
        8,
        56,
        87,
        96,
        0,
        128,
        253,
        91,
        146,
        80,
        96,
        64,
        133,
        1,
        53,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        128,
        130,
        17,
        21,
        97,
        8,
        85,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        135,
        1,
        145,
        80,
        135,
        96,
        31,
        131,
        1,
        18,
        97,
        8,
        105,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        53,
        129,
        129,
        17,
        21,
        97,
        8,
        120,
        87,
        96,
        0,
        128,
        253,
        91,
        136,
        96,
        32,
        130,
        133,
        1,
        1,
        17,
        21,
        97,
        8,
        138,
        87,
        96,
        0,
        128,
        253,
        91,
        149,
        152,
        148,
        151,
        80,
        80,
        96,
        32,
        1,
        148,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        8,
        171,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        53,
        145,
        144,
        80,
        86,
        91,
        96,
        0,
        129,
        81,
        128,
        132,
        82,
        96,
        0,
        91,
        129,
        129,
        16,
        21,
        97,
        8,
        216,
        87,
        96,
        32,
        129,
        133,
        1,
        129,
        1,
        81,
        134,
        131,
        1,
        130,
        1,
        82,
        1,
        97,
        8,
        188,
        86,
        91,
        80,
        96,
        0,
        96,
        32,
        130,
        134,
        1,
        1,
        82,
        96,
        32,
        96,
        31,
        25,
        96,
        31,
        131,
        1,
        22,
        133,
        1,
        1,
        145,
        80,
        80,
        146,
        145,
        80,
        80,
        86,
        91,
        96,
        32,
        129,
        82,
        96,
        1,
        96,
        1,
        96,
        128,
        27,
        3,
        130,
        81,
        22,
        96,
        32,
        130,
        1,
        82,
        96,
        0,
        96,
        32,
        131,
        1,
        81,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        128,
        130,
        22,
        96,
        64,
        133,
        1,
        82,
        128,
        96,
        64,
        134,
        1,
        81,
        22,
        96,
        96,
        133,
        1,
        82,
        80,
        80,
        96,
        1,
        128,
        96,
        160,
        27,
        3,
        96,
        96,
        132,
        1,
        81,
        22,
        96,
        128,
        131,
        1,
        82,
        96,
        128,
        131,
        1,
        81,
        96,
        160,
        128,
        132,
        1,
        82,
        97,
        5,
        143,
        96,
        192,
        132,
        1,
        130,
        97,
        8,
        178,
        86,
        91,
        96,
        32,
        129,
        82,
        96,
        0,
        97,
        9,
        111,
        96,
        32,
        131,
        1,
        132,
        97,
        8,
        178,
        86,
        91,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        65,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        96,
        1,
        129,
        129,
        28,
        144,
        130,
        22,
        128,
        97,
        9,
        160,
        87,
        96,
        127,
        130,
        22,
        145,
        80,
        91,
        96,
        32,
        130,
        16,
        129,
        3,
        97,
        9,
        192,
        87,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        34,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        80,
        145,
        144,
        80,
        86,
        91,
        96,
        31,
        130,
        17,
        21,
        97,
        10,
        16,
        87,
        96,
        0,
        129,
        129,
        82,
        96,
        32,
        129,
        32,
        96,
        31,
        133,
        1,
        96,
        5,
        28,
        129,
        1,
        96,
        32,
        134,
        16,
        21,
        97,
        9,
        237,
        87,
        80,
        128,
        91,
        96,
        31,
        133,
        1,
        96,
        5,
        28,
        130,
        1,
        145,
        80,
        91,
        129,
        129,
        16,
        21,
        97,
        10,
        12,
        87,
        130,
        129,
        85,
        96,
        1,
        1,
        97,
        9,
        249,
        86,
        91,
        80,
        80,
        80,
        91,
        80,
        80,
        80,
        86,
        91,
        129,
        81,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        129,
        17,
        21,
        97,
        10,
        47,
        87,
        97,
        10,
        47,
        97,
        9,
        118,
        86,
        91,
        97,
        10,
        67,
        129,
        97,
        10,
        61,
        132,
        84,
        97,
        9,
        140,
        86,
        91,
        132,
        97,
        9,
        198,
        86,
        91,
        96,
        32,
        128,
        96,
        31,
        131,
        17,
        96,
        1,
        129,
        20,
        97,
        10,
        120,
        87,
        96,
        0,
        132,
        21,
        97,
        10,
        96,
        87,
        80,
        133,
        131,
        1,
        81,
        91,
        96,
        0,
        25,
        96,
        3,
        134,
        144,
        27,
        28,
        25,
        22,
        96,
        1,
        133,
        144,
        27,
        23,
        133,
        85,
        97,
        10,
        12,
        86,
        91,
        96,
        0,
        133,
        129,
        82,
        96,
        32,
        129,
        32,
        96,
        31,
        25,
        134,
        22,
        145,
        91,
        130,
        129,
        16,
        21,
        97,
        10,
        167,
        87,
        136,
        134,
        1,
        81,
        130,
        85,
        148,
        132,
        1,
        148,
        96,
        1,
        144,
        145,
        1,
        144,
        132,
        1,
        97,
        10,
        136,
        86,
        91,
        80,
        133,
        130,
        16,
        21,
        97,
        10,
        197,
        87,
        135,
        133,
        1,
        81,
        96,
        0,
        25,
        96,
        3,
        136,
        144,
        27,
        96,
        248,
        22,
        28,
        25,
        22,
        129,
        85,
        91,
        80,
        80,
        80,
        80,
        80,
        96,
        1,
        144,
        129,
        27,
        1,
        144,
        85,
        80,
        86,
        91,
        96,
        0,
        128,
        131,
        84,
        97,
        10,
        227,
        129,
        97,
        9,
        140,
        86,
        91,
        96,
        1,
        130,
        129,
        22,
        128,
        21,
        97,
        10,
        251,
        87,
        96,
        1,
        129,
        20,
        97,
        11,
        16,
        87,
        97,
        11,
        63,
        86,
        91,
        96,
        255,
        25,
        132,
        22,
        135,
        82,
        130,
        21,
        21,
        131,
        2,
        135,
        1,
        148,
        80,
        97,
        11,
        63,
        86,
        91,
        135,
        96,
        0,
        82,
        96,
        32,
        128,
        96,
        0,
        32,
        96,
        0,
        91,
        133,
        129,
        16,
        21,
        97,
        11,
        54,
        87,
        129,
        84,
        138,
        130,
        1,
        82,
        144,
        132,
        1,
        144,
        130,
        1,
        97,
        11,
        29,
        86,
        91,
        80,
        80,
        80,
        130,
        135,
        1,
        148,
        80,
        91,
        80,
        146,
        150,
        149,
        80,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        11,
        93,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        81,
        145,
        144,
        80,
        86,
        91,
        96,
        0,
        130,
        97,
        11,
        129,
        87,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        18,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        80,
        4,
        144,
        86,
        254,
        162,
        100,
        105,
        112,
        102,
        115,
        88,
        34,
        18,
        32,
        65,
        136,
        185,
        83,
        46,
        51,
        7,
        56,
        94,
        23,
        123,
        30,
        198,
        119,
        77,
        194,
        115,
        128,
        54,
        226,
        169,
        93,
        18,
        215,
        235,
        216,
        45,
        28,
        15,
        191,
        14,
        35,
        100,
        115,
        111,
        108,
        99,
        67,
        0,
        8,
        20,
        0,
        51,
    ];
    ///The bytecode of the contract.
    pub static SIMPLEGOVERNANCE_BYTECODE: ::ethers::core::types::Bytes = ::ethers::core::types::Bytes::from_static(
        __BYTECODE,
    );
    #[rustfmt::skip]
    const __DEPLOYED_BYTECODE: &[u8] = &[
        96,
        128,
        96,
        64,
        82,
        96,
        4,
        54,
        16,
        97,
        0,
        85,
        87,
        96,
        0,
        53,
        96,
        224,
        28,
        128,
        99,
        18,
        5,
        122,
        20,
        20,
        97,
        0,
        90,
        87,
        128,
        99,
        63,
        138,
        3,
        125,
        20,
        97,
        0,
        127,
        87,
        128,
        99,
        82,
        236,
        185,
        10,
        20,
        97,
        0,
        167,
        87,
        128,
        99,
        154,
        202,
        8,
        212,
        20,
        97,
        0,
        199,
        87,
        128,
        99,
        182,
        231,
        104,
        115,
        20,
        97,
        0,
        220,
        87,
        128,
        99,
        192,
        193,
        207,
        85,
        20,
        97,
        1,
        9,
        87,
        91,
        96,
        0,
        128,
        253,
        91,
        52,
        128,
        21,
        97,
        0,
        102,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        98,
        2,
        163,
        0,
        91,
        96,
        64,
        81,
        144,
        129,
        82,
        96,
        32,
        1,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        243,
        91,
        52,
        128,
        21,
        97,
        0,
        139,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        0,
        84,
        96,
        64,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        144,
        145,
        22,
        129,
        82,
        96,
        32,
        1,
        97,
        0,
        118,
        86,
        91,
        52,
        128,
        21,
        97,
        0,
        179,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        0,
        108,
        97,
        0,
        194,
        54,
        96,
        4,
        97,
        7,
        239,
        86,
        91,
        97,
        1,
        41,
        86,
        91,
        52,
        128,
        21,
        97,
        0,
        211,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        1,
        84,
        97,
        0,
        108,
        86,
        91,
        52,
        128,
        21,
        97,
        0,
        232,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        0,
        252,
        97,
        0,
        247,
        54,
        96,
        4,
        97,
        8,
        153,
        86,
        91,
        97,
        3,
        35,
        86,
        91,
        96,
        64,
        81,
        97,
        0,
        118,
        145,
        144,
        97,
        8,
        248,
        86,
        91,
        97,
        1,
        28,
        97,
        1,
        23,
        54,
        96,
        4,
        97,
        8,
        153,
        86,
        91,
        97,
        4,
        85,
        86,
        91,
        96,
        64,
        81,
        97,
        0,
        118,
        145,
        144,
        97,
        9,
        92,
        86,
        91,
        96,
        0,
        97,
        1,
        52,
        51,
        97,
        5,
        151,
        86,
        91,
        97,
        1,
        88,
        87,
        96,
        64,
        81,
        99,
        125,
        137,
        37,
        117,
        96,
        225,
        27,
        129,
        82,
        51,
        96,
        4,
        130,
        1,
        82,
        96,
        36,
        1,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        48,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        134,
        22,
        3,
        97,
        1,
        129,
        87,
        96,
        64,
        81,
        99,
        65,
        106,
        235,
        181,
        96,
        225,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        129,
        21,
        128,
        21,
        144,
        97,
        1,
        152,
        87,
        80,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        133,
        22,
        59,
        21,
        91,
        21,
        97,
        1,
        182,
        87,
        96,
        64,
        81,
        99,
        109,
        212,
        170,
        101,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        1,
        84,
        144,
        80,
        96,
        64,
        81,
        128,
        96,
        160,
        1,
        96,
        64,
        82,
        128,
        133,
        96,
        1,
        96,
        1,
        96,
        128,
        27,
        3,
        22,
        129,
        82,
        96,
        32,
        1,
        66,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        22,
        129,
        82,
        96,
        32,
        1,
        96,
        0,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        22,
        129,
        82,
        96,
        32,
        1,
        134,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        129,
        82,
        96,
        32,
        1,
        132,
        132,
        128,
        128,
        96,
        31,
        1,
        96,
        32,
        128,
        145,
        4,
        2,
        96,
        32,
        1,
        96,
        64,
        81,
        144,
        129,
        1,
        96,
        64,
        82,
        128,
        147,
        146,
        145,
        144,
        129,
        129,
        82,
        96,
        32,
        1,
        131,
        131,
        128,
        130,
        132,
        55,
        96,
        0,
        146,
        1,
        130,
        144,
        82,
        80,
        147,
        144,
        148,
        82,
        80,
        80,
        131,
        129,
        82,
        96,
        2,
        96,
        32,
        129,
        129,
        82,
        96,
        64,
        146,
        131,
        144,
        32,
        133,
        81,
        129,
        84,
        146,
        135,
        1,
        81,
        148,
        135,
        1,
        81,
        96,
        1,
        96,
        1,
        96,
        128,
        27,
        3,
        144,
        145,
        22,
        96,
        1,
        96,
        1,
        96,
        192,
        27,
        3,
        25,
        144,
        147,
        22,
        146,
        144,
        146,
        23,
        96,
        1,
        96,
        128,
        27,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        149,
        134,
        22,
        2,
        23,
        96,
        1,
        96,
        1,
        96,
        192,
        27,
        3,
        22,
        96,
        1,
        96,
        192,
        27,
        148,
        144,
        146,
        22,
        147,
        144,
        147,
        2,
        23,
        130,
        85,
        96,
        96,
        132,
        1,
        81,
        96,
        1,
        131,
        1,
        128,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        25,
        22,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        144,
        146,
        22,
        145,
        144,
        145,
        23,
        144,
        85,
        96,
        128,
        132,
        1,
        81,
        145,
        146,
        80,
        130,
        1,
        144,
        97,
        2,
        219,
        144,
        130,
        97,
        10,
        21,
        86,
        91,
        80,
        80,
        96,
        1,
        128,
        84,
        129,
        1,
        144,
        85,
        80,
        96,
        64,
        81,
        129,
        129,
        82,
        51,
        144,
        127,
        77,
        253,
        146,
        246,
        158,
        2,
        248,
        44,
        143,
        103,
        5,
        178,
        228,
        163,
        100,
        70,
        91,
        88,
        143,
        164,
        119,
        60,
        218,
        38,
        120,
        108,
        60,
        168,
        223,
        67,
        161,
        149,
        144,
        96,
        32,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        162,
        148,
        147,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        64,
        128,
        81,
        96,
        160,
        129,
        1,
        130,
        82,
        96,
        0,
        128,
        130,
        82,
        96,
        32,
        130,
        1,
        129,
        144,
        82,
        145,
        129,
        1,
        130,
        144,
        82,
        96,
        96,
        128,
        130,
        1,
        146,
        144,
        146,
        82,
        96,
        128,
        129,
        1,
        145,
        144,
        145,
        82,
        96,
        0,
        130,
        129,
        82,
        96,
        2,
        96,
        32,
        129,
        129,
        82,
        96,
        64,
        146,
        131,
        144,
        32,
        131,
        81,
        96,
        160,
        129,
        1,
        133,
        82,
        129,
        84,
        96,
        1,
        96,
        1,
        96,
        128,
        27,
        3,
        129,
        22,
        130,
        82,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        96,
        1,
        96,
        128,
        27,
        130,
        4,
        129,
        22,
        148,
        131,
        1,
        148,
        144,
        148,
        82,
        96,
        1,
        96,
        192,
        27,
        144,
        4,
        144,
        146,
        22,
        147,
        130,
        1,
        147,
        144,
        147,
        82,
        96,
        1,
        131,
        1,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        96,
        96,
        130,
        1,
        82,
        144,
        130,
        1,
        128,
        84,
        145,
        146,
        145,
        96,
        128,
        132,
        1,
        145,
        144,
        97,
        3,
        204,
        144,
        97,
        9,
        140,
        86,
        91,
        128,
        96,
        31,
        1,
        96,
        32,
        128,
        145,
        4,
        2,
        96,
        32,
        1,
        96,
        64,
        81,
        144,
        129,
        1,
        96,
        64,
        82,
        128,
        146,
        145,
        144,
        129,
        129,
        82,
        96,
        32,
        1,
        130,
        128,
        84,
        97,
        3,
        248,
        144,
        97,
        9,
        140,
        86,
        91,
        128,
        21,
        97,
        4,
        69,
        87,
        128,
        96,
        31,
        16,
        97,
        4,
        26,
        87,
        97,
        1,
        0,
        128,
        131,
        84,
        4,
        2,
        131,
        82,
        145,
        96,
        32,
        1,
        145,
        97,
        4,
        69,
        86,
        91,
        130,
        1,
        145,
        144,
        96,
        0,
        82,
        96,
        32,
        96,
        0,
        32,
        144,
        91,
        129,
        84,
        129,
        82,
        144,
        96,
        1,
        1,
        144,
        96,
        32,
        1,
        128,
        131,
        17,
        97,
        4,
        40,
        87,
        130,
        144,
        3,
        96,
        31,
        22,
        130,
        1,
        145,
        91,
        80,
        80,
        80,
        80,
        80,
        129,
        82,
        80,
        80,
        144,
        80,
        145,
        144,
        80,
        86,
        91,
        96,
        96,
        97,
        4,
        96,
        130,
        97,
        6,
        149,
        86,
        91,
        97,
        4,
        128,
        87,
        96,
        64,
        81,
        99,
        180,
        82,
        250,
        175,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        129,
        1,
        131,
        144,
        82,
        96,
        36,
        1,
        97,
        1,
        79,
        86,
        91,
        96,
        0,
        130,
        129,
        82,
        96,
        2,
        96,
        32,
        144,
        129,
        82,
        96,
        64,
        145,
        130,
        144,
        32,
        128,
        84,
        96,
        1,
        96,
        1,
        96,
        192,
        27,
        3,
        22,
        96,
        1,
        96,
        192,
        27,
        66,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        22,
        2,
        23,
        129,
        85,
        145,
        81,
        132,
        129,
        82,
        51,
        145,
        127,
        120,
        167,
        214,
        79,
        100,
        239,
        104,
        145,
        190,
        223,
        193,
        182,
        133,
        68,
        71,
        17,
        60,
        202,
        7,
        172,
        232,
        116,
        123,
        138,
        108,
        243,
        42,
        15,
        213,
        168,
        11,
        23,
        145,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        162,
        96,
        1,
        129,
        1,
        84,
        129,
        84,
        96,
        64,
        81,
        96,
        0,
        146,
        131,
        146,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        144,
        145,
        22,
        145,
        96,
        1,
        96,
        1,
        96,
        128,
        27,
        3,
        144,
        145,
        22,
        144,
        97,
        5,
        24,
        144,
        96,
        2,
        135,
        1,
        144,
        97,
        10,
        213,
        86,
        91,
        96,
        0,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        133,
        135,
        90,
        241,
        146,
        80,
        80,
        80,
        61,
        128,
        96,
        0,
        129,
        20,
        97,
        5,
        85,
        87,
        96,
        64,
        81,
        145,
        80,
        96,
        31,
        25,
        96,
        63,
        61,
        1,
        22,
        130,
        1,
        96,
        64,
        82,
        61,
        130,
        82,
        61,
        96,
        0,
        96,
        32,
        132,
        1,
        62,
        97,
        5,
        90,
        86,
        91,
        96,
        96,
        145,
        80,
        91,
        80,
        145,
        80,
        145,
        80,
        129,
        97,
        5,
        143,
        87,
        128,
        81,
        21,
        97,
        5,
        115,
        87,
        128,
        81,
        129,
        96,
        32,
        1,
        253,
        91,
        96,
        64,
        81,
        99,
        166,
        167,
        219,
        189,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        129,
        1,
        134,
        144,
        82,
        96,
        36,
        1,
        97,
        1,
        79,
        86,
        91,
        148,
        147,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        128,
        84,
        96,
        64,
        81,
        99,
        34,
        200,
        139,
        39,
        96,
        225,
        27,
        129,
        82,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        132,
        129,
        22,
        96,
        4,
        131,
        1,
        82,
        131,
        146,
        22,
        144,
        99,
        69,
        145,
        22,
        78,
        144,
        96,
        36,
        1,
        96,
        32,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        134,
        90,
        250,
        21,
        128,
        21,
        97,
        5,
        226,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        80,
        80,
        96,
        64,
        81,
        61,
        96,
        31,
        25,
        96,
        31,
        130,
        1,
        22,
        130,
        1,
        128,
        96,
        64,
        82,
        80,
        129,
        1,
        144,
        97,
        6,
        6,
        145,
        144,
        97,
        11,
        75,
        86,
        91,
        144,
        80,
        96,
        0,
        96,
        2,
        96,
        0,
        128,
        84,
        144,
        97,
        1,
        0,
        10,
        144,
        4,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        99,
        163,
        236,
        115,
        251,
        96,
        64,
        81,
        129,
        99,
        255,
        255,
        255,
        255,
        22,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        32,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        134,
        90,
        250,
        21,
        128,
        21,
        97,
        6,
        93,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        80,
        80,
        96,
        64,
        81,
        61,
        96,
        31,
        25,
        96,
        31,
        130,
        1,
        22,
        130,
        1,
        128,
        96,
        64,
        82,
        80,
        129,
        1,
        144,
        97,
        6,
        129,
        145,
        144,
        97,
        11,
        75,
        86,
        91,
        97,
        6,
        139,
        145,
        144,
        97,
        11,
        100,
        86,
        91,
        144,
        145,
        17,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        129,
        129,
        82,
        96,
        2,
        96,
        32,
        129,
        129,
        82,
        96,
        64,
        128,
        132,
        32,
        129,
        81,
        96,
        160,
        129,
        1,
        131,
        82,
        129,
        84,
        96,
        1,
        96,
        1,
        96,
        128,
        27,
        3,
        129,
        22,
        130,
        82,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        96,
        1,
        96,
        128,
        27,
        130,
        4,
        129,
        22,
        149,
        131,
        1,
        149,
        144,
        149,
        82,
        96,
        1,
        96,
        192,
        27,
        144,
        4,
        144,
        147,
        22,
        145,
        131,
        1,
        145,
        144,
        145,
        82,
        96,
        1,
        129,
        1,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        96,
        96,
        131,
        1,
        82,
        145,
        130,
        1,
        128,
        84,
        132,
        147,
        145,
        96,
        128,
        132,
        1,
        145,
        97,
        7,
        15,
        144,
        97,
        9,
        140,
        86,
        91,
        128,
        96,
        31,
        1,
        96,
        32,
        128,
        145,
        4,
        2,
        96,
        32,
        1,
        96,
        64,
        81,
        144,
        129,
        1,
        96,
        64,
        82,
        128,
        146,
        145,
        144,
        129,
        129,
        82,
        96,
        32,
        1,
        130,
        128,
        84,
        97,
        7,
        59,
        144,
        97,
        9,
        140,
        86,
        91,
        128,
        21,
        97,
        7,
        136,
        87,
        128,
        96,
        31,
        16,
        97,
        7,
        93,
        87,
        97,
        1,
        0,
        128,
        131,
        84,
        4,
        2,
        131,
        82,
        145,
        96,
        32,
        1,
        145,
        97,
        7,
        136,
        86,
        91,
        130,
        1,
        145,
        144,
        96,
        0,
        82,
        96,
        32,
        96,
        0,
        32,
        144,
        91,
        129,
        84,
        129,
        82,
        144,
        96,
        1,
        1,
        144,
        96,
        32,
        1,
        128,
        131,
        17,
        97,
        7,
        107,
        87,
        130,
        144,
        3,
        96,
        31,
        22,
        130,
        1,
        145,
        91,
        80,
        80,
        80,
        80,
        80,
        129,
        82,
        80,
        80,
        144,
        80,
        128,
        96,
        32,
        1,
        81,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        22,
        96,
        0,
        3,
        97,
        7,
        178,
        87,
        80,
        96,
        0,
        146,
        145,
        80,
        80,
        86,
        91,
        96,
        0,
        129,
        96,
        32,
        1,
        81,
        66,
        3,
        144,
        80,
        129,
        96,
        64,
        1,
        81,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        22,
        96,
        0,
        20,
        128,
        21,
        97,
        5,
        143,
        87,
        80,
        98,
        2,
        163,
        0,
        129,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        22,
        16,
        21,
        148,
        147,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        0,
        128,
        96,
        96,
        133,
        135,
        3,
        18,
        21,
        97,
        8,
        5,
        87,
        96,
        0,
        128,
        253,
        91,
        132,
        53,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        129,
        20,
        97,
        8,
        28,
        87,
        96,
        0,
        128,
        253,
        91,
        147,
        80,
        96,
        32,
        133,
        1,
        53,
        96,
        1,
        96,
        1,
        96,
        128,
        27,
        3,
        129,
        22,
        129,
        20,
        97,
        8,
        56,
        87,
        96,
        0,
        128,
        253,
        91,
        146,
        80,
        96,
        64,
        133,
        1,
        53,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        128,
        130,
        17,
        21,
        97,
        8,
        85,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        135,
        1,
        145,
        80,
        135,
        96,
        31,
        131,
        1,
        18,
        97,
        8,
        105,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        53,
        129,
        129,
        17,
        21,
        97,
        8,
        120,
        87,
        96,
        0,
        128,
        253,
        91,
        136,
        96,
        32,
        130,
        133,
        1,
        1,
        17,
        21,
        97,
        8,
        138,
        87,
        96,
        0,
        128,
        253,
        91,
        149,
        152,
        148,
        151,
        80,
        80,
        96,
        32,
        1,
        148,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        8,
        171,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        53,
        145,
        144,
        80,
        86,
        91,
        96,
        0,
        129,
        81,
        128,
        132,
        82,
        96,
        0,
        91,
        129,
        129,
        16,
        21,
        97,
        8,
        216,
        87,
        96,
        32,
        129,
        133,
        1,
        129,
        1,
        81,
        134,
        131,
        1,
        130,
        1,
        82,
        1,
        97,
        8,
        188,
        86,
        91,
        80,
        96,
        0,
        96,
        32,
        130,
        134,
        1,
        1,
        82,
        96,
        32,
        96,
        31,
        25,
        96,
        31,
        131,
        1,
        22,
        133,
        1,
        1,
        145,
        80,
        80,
        146,
        145,
        80,
        80,
        86,
        91,
        96,
        32,
        129,
        82,
        96,
        1,
        96,
        1,
        96,
        128,
        27,
        3,
        130,
        81,
        22,
        96,
        32,
        130,
        1,
        82,
        96,
        0,
        96,
        32,
        131,
        1,
        81,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        128,
        130,
        22,
        96,
        64,
        133,
        1,
        82,
        128,
        96,
        64,
        134,
        1,
        81,
        22,
        96,
        96,
        133,
        1,
        82,
        80,
        80,
        96,
        1,
        128,
        96,
        160,
        27,
        3,
        96,
        96,
        132,
        1,
        81,
        22,
        96,
        128,
        131,
        1,
        82,
        96,
        128,
        131,
        1,
        81,
        96,
        160,
        128,
        132,
        1,
        82,
        97,
        5,
        143,
        96,
        192,
        132,
        1,
        130,
        97,
        8,
        178,
        86,
        91,
        96,
        32,
        129,
        82,
        96,
        0,
        97,
        9,
        111,
        96,
        32,
        131,
        1,
        132,
        97,
        8,
        178,
        86,
        91,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        65,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        96,
        1,
        129,
        129,
        28,
        144,
        130,
        22,
        128,
        97,
        9,
        160,
        87,
        96,
        127,
        130,
        22,
        145,
        80,
        91,
        96,
        32,
        130,
        16,
        129,
        3,
        97,
        9,
        192,
        87,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        34,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        80,
        145,
        144,
        80,
        86,
        91,
        96,
        31,
        130,
        17,
        21,
        97,
        10,
        16,
        87,
        96,
        0,
        129,
        129,
        82,
        96,
        32,
        129,
        32,
        96,
        31,
        133,
        1,
        96,
        5,
        28,
        129,
        1,
        96,
        32,
        134,
        16,
        21,
        97,
        9,
        237,
        87,
        80,
        128,
        91,
        96,
        31,
        133,
        1,
        96,
        5,
        28,
        130,
        1,
        145,
        80,
        91,
        129,
        129,
        16,
        21,
        97,
        10,
        12,
        87,
        130,
        129,
        85,
        96,
        1,
        1,
        97,
        9,
        249,
        86,
        91,
        80,
        80,
        80,
        91,
        80,
        80,
        80,
        86,
        91,
        129,
        81,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        129,
        17,
        21,
        97,
        10,
        47,
        87,
        97,
        10,
        47,
        97,
        9,
        118,
        86,
        91,
        97,
        10,
        67,
        129,
        97,
        10,
        61,
        132,
        84,
        97,
        9,
        140,
        86,
        91,
        132,
        97,
        9,
        198,
        86,
        91,
        96,
        32,
        128,
        96,
        31,
        131,
        17,
        96,
        1,
        129,
        20,
        97,
        10,
        120,
        87,
        96,
        0,
        132,
        21,
        97,
        10,
        96,
        87,
        80,
        133,
        131,
        1,
        81,
        91,
        96,
        0,
        25,
        96,
        3,
        134,
        144,
        27,
        28,
        25,
        22,
        96,
        1,
        133,
        144,
        27,
        23,
        133,
        85,
        97,
        10,
        12,
        86,
        91,
        96,
        0,
        133,
        129,
        82,
        96,
        32,
        129,
        32,
        96,
        31,
        25,
        134,
        22,
        145,
        91,
        130,
        129,
        16,
        21,
        97,
        10,
        167,
        87,
        136,
        134,
        1,
        81,
        130,
        85,
        148,
        132,
        1,
        148,
        96,
        1,
        144,
        145,
        1,
        144,
        132,
        1,
        97,
        10,
        136,
        86,
        91,
        80,
        133,
        130,
        16,
        21,
        97,
        10,
        197,
        87,
        135,
        133,
        1,
        81,
        96,
        0,
        25,
        96,
        3,
        136,
        144,
        27,
        96,
        248,
        22,
        28,
        25,
        22,
        129,
        85,
        91,
        80,
        80,
        80,
        80,
        80,
        96,
        1,
        144,
        129,
        27,
        1,
        144,
        85,
        80,
        86,
        91,
        96,
        0,
        128,
        131,
        84,
        97,
        10,
        227,
        129,
        97,
        9,
        140,
        86,
        91,
        96,
        1,
        130,
        129,
        22,
        128,
        21,
        97,
        10,
        251,
        87,
        96,
        1,
        129,
        20,
        97,
        11,
        16,
        87,
        97,
        11,
        63,
        86,
        91,
        96,
        255,
        25,
        132,
        22,
        135,
        82,
        130,
        21,
        21,
        131,
        2,
        135,
        1,
        148,
        80,
        97,
        11,
        63,
        86,
        91,
        135,
        96,
        0,
        82,
        96,
        32,
        128,
        96,
        0,
        32,
        96,
        0,
        91,
        133,
        129,
        16,
        21,
        97,
        11,
        54,
        87,
        129,
        84,
        138,
        130,
        1,
        82,
        144,
        132,
        1,
        144,
        130,
        1,
        97,
        11,
        29,
        86,
        91,
        80,
        80,
        80,
        130,
        135,
        1,
        148,
        80,
        91,
        80,
        146,
        150,
        149,
        80,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        11,
        93,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        81,
        145,
        144,
        80,
        86,
        91,
        96,
        0,
        130,
        97,
        11,
        129,
        87,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        18,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        80,
        4,
        144,
        86,
        254,
        162,
        100,
        105,
        112,
        102,
        115,
        88,
        34,
        18,
        32,
        65,
        136,
        185,
        83,
        46,
        51,
        7,
        56,
        94,
        23,
        123,
        30,
        198,
        119,
        77,
        194,
        115,
        128,
        54,
        226,
        169,
        93,
        18,
        215,
        235,
        216,
        45,
        28,
        15,
        191,
        14,
        35,
        100,
        115,
        111,
        108,
        99,
        67,
        0,
        8,
        20,
        0,
        51,
    ];
    ///The deployed bytecode of the contract.
    pub static SIMPLEGOVERNANCE_DEPLOYED_BYTECODE: ::ethers::core::types::Bytes = ::ethers::core::types::Bytes::from_static(
        __DEPLOYED_BYTECODE,
    );
    pub struct SimpleGovernance<M>(::ethers::contract::Contract<M>);
    impl<M> ::core::clone::Clone for SimpleGovernance<M> {
        fn clone(&self) -> Self {
            Self(::core::clone::Clone::clone(&self.0))
        }
    }
    impl<M> ::core::ops::Deref for SimpleGovernance<M> {
        type Target = ::ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M> ::core::ops::DerefMut for SimpleGovernance<M> {
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl<M> ::core::fmt::Debug for SimpleGovernance<M> {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple(stringify!(SimpleGovernance)).field(&self.address()).finish()
        }
    }
    impl<M: ::ethers::providers::Middleware> SimpleGovernance<M> {
        /// Creates a new contract instance with the specified `ethers` client at
        /// `address`. The contract derefs to a `ethers::Contract` object.
        pub fn new<T: Into<::ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            Self(
                ::ethers::contract::Contract::new(
                    address.into(),
                    SIMPLEGOVERNANCE_ABI.clone(),
                    client,
                ),
            )
        }
        /// Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it.
        /// Returns a new instance of a deployer that returns an instance of this contract after sending the transaction
        ///
        /// Notes:
        /// - If there are no constructor arguments, you should pass `()` as the argument.
        /// - The default poll duration is 7 seconds.
        /// - The default number of confirmations is 1 block.
        ///
        ///
        /// # Example
        ///
        /// Generate contract bindings with `abigen!` and deploy a new contract instance.
        ///
        /// *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact.
        ///
        /// ```ignore
        /// # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {
        ///     abigen!(Greeter, "../greeter.json");
        ///
        ///    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();
        ///    let msg = greeter_contract.greet().call().await.unwrap();
        /// # }
        /// ```
        pub fn deploy<T: ::ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::core::result::Result<
            ::ethers::contract::builders::ContractDeployer<M, Self>,
            ::ethers::contract::ContractError<M>,
        > {
            let factory = ::ethers::contract::ContractFactory::new(
                SIMPLEGOVERNANCE_ABI.clone(),
                SIMPLEGOVERNANCE_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ::ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        ///Calls the contract's `executeAction` (0xc0c1cf55) function
        pub fn execute_action(
            &self,
            action_id: ::ethers::core::types::U256,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::ethers::core::types::Bytes,
        > {
            self.0
                .method_hash([192, 193, 207, 85], action_id)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `getAction` (0xb6e76873) function
        pub fn get_action(
            &self,
            action_id: ::ethers::core::types::U256,
        ) -> ::ethers::contract::builders::ContractCall<M, GovernanceAction> {
            self.0
                .method_hash([182, 231, 104, 115], action_id)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `getActionCounter` (0x9aca08d4) function
        pub fn get_action_counter(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([154, 202, 8, 212], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `getActionDelay` (0x12057a14) function
        pub fn get_action_delay(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([18, 5, 122, 20], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `getGovernanceToken` (0x3f8a037d) function
        pub fn get_governance_token(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::ethers::core::types::Address,
        > {
            self.0
                .method_hash([63, 138, 3, 125], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `queueAction` (0x52ecb90a) function
        pub fn queue_action(
            &self,
            target: ::ethers::core::types::Address,
            value: u128,
            data: ::ethers::core::types::Bytes,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([82, 236, 185, 10], (target, value, data))
                .expect("method not found (this should never happen)")
        }
        ///Gets the contract's `ActionExecuted` event
        pub fn action_executed_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<
            ::std::sync::Arc<M>,
            M,
            ActionExecutedFilter,
        > {
            self.0.event()
        }
        ///Gets the contract's `ActionQueued` event
        pub fn action_queued_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<
            ::std::sync::Arc<M>,
            M,
            ActionQueuedFilter,
        > {
            self.0.event()
        }
        /// Returns an `Event` builder for all the events of this contract.
        pub fn events(
            &self,
        ) -> ::ethers::contract::builders::Event<
            ::std::sync::Arc<M>,
            M,
            SimpleGovernanceEvents,
        > {
            self.0.event_with_filter(::core::default::Default::default())
        }
    }
    impl<M: ::ethers::providers::Middleware> From<::ethers::contract::Contract<M>>
    for SimpleGovernance<M> {
        fn from(contract: ::ethers::contract::Contract<M>) -> Self {
            Self::new(contract.address(), contract.client())
        }
    }
    ///Custom Error type `ActionFailed` with signature `ActionFailed(uint256)` and selector `0xa6a7dbbd`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(name = "ActionFailed", abi = "ActionFailed(uint256)")]
    pub struct ActionFailed {
        pub action_id: ::ethers::core::types::U256,
    }
    ///Custom Error type `CannotExecute` with signature `CannotExecute(uint256)` and selector `0xb452faaf`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(name = "CannotExecute", abi = "CannotExecute(uint256)")]
    pub struct CannotExecute {
        pub action_id: ::ethers::core::types::U256,
    }
    ///Custom Error type `InvalidTarget` with signature `InvalidTarget()` and selector `0x82d5d76a`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(name = "InvalidTarget", abi = "InvalidTarget()")]
    pub struct InvalidTarget;
    ///Custom Error type `NotEnoughVotes` with signature `NotEnoughVotes(address)` and selector `0xfb124aea`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(name = "NotEnoughVotes", abi = "NotEnoughVotes(address)")]
    pub struct NotEnoughVotes {
        pub who: ::ethers::core::types::Address,
    }
    ///Custom Error type `TargetMustHaveCode` with signature `TargetMustHaveCode()` and selector `0x6dd4aa65`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(name = "TargetMustHaveCode", abi = "TargetMustHaveCode()")]
    pub struct TargetMustHaveCode;
    ///Container type for all of the contract's custom errors
    #[derive(Clone, ::ethers::contract::EthAbiType, Debug, PartialEq, Eq, Hash)]
    pub enum SimpleGovernanceErrors {
        ActionFailed(ActionFailed),
        CannotExecute(CannotExecute),
        InvalidTarget(InvalidTarget),
        NotEnoughVotes(NotEnoughVotes),
        TargetMustHaveCode(TargetMustHaveCode),
        /// The standard solidity revert string, with selector
        /// Error(string) -- 0x08c379a0
        RevertString(::std::string::String),
    }
    impl ::ethers::core::abi::AbiDecode for SimpleGovernanceErrors {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::core::result::Result<Self, ::ethers::core::abi::AbiError> {
            let data = data.as_ref();
            if let Ok(decoded)
                = <::std::string::String as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::RevertString(decoded));
            }
            if let Ok(decoded)
                = <ActionFailed as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::ActionFailed(decoded));
            }
            if let Ok(decoded)
                = <CannotExecute as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::CannotExecute(decoded));
            }
            if let Ok(decoded)
                = <InvalidTarget as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::InvalidTarget(decoded));
            }
            if let Ok(decoded)
                = <NotEnoughVotes as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::NotEnoughVotes(decoded));
            }
            if let Ok(decoded)
                = <TargetMustHaveCode as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::TargetMustHaveCode(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ::ethers::core::abi::AbiEncode for SimpleGovernanceErrors {
        fn encode(self) -> ::std::vec::Vec<u8> {
            match self {
                Self::ActionFailed(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::CannotExecute(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::InvalidTarget(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::NotEnoughVotes(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::TargetMustHaveCode(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::RevertString(s) => ::ethers::core::abi::AbiEncode::encode(s),
            }
        }
    }
    impl ::ethers::contract::ContractRevert for SimpleGovernanceErrors {
        fn valid_selector(selector: [u8; 4]) -> bool {
            match selector {
                [0x08, 0xc3, 0x79, 0xa0] => true,
                _ if selector
                    == <ActionFailed as ::ethers::contract::EthError>::selector() => true,
                _ if selector
                    == <CannotExecute as ::ethers::contract::EthError>::selector() => {
                    true
                }
                _ if selector
                    == <InvalidTarget as ::ethers::contract::EthError>::selector() => {
                    true
                }
                _ if selector
                    == <NotEnoughVotes as ::ethers::contract::EthError>::selector() => {
                    true
                }
                _ if selector
                    == <TargetMustHaveCode as ::ethers::contract::EthError>::selector() => {
                    true
                }
                _ => false,
            }
        }
    }
    impl ::core::fmt::Display for SimpleGovernanceErrors {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                Self::ActionFailed(element) => ::core::fmt::Display::fmt(element, f),
                Self::CannotExecute(element) => ::core::fmt::Display::fmt(element, f),
                Self::InvalidTarget(element) => ::core::fmt::Display::fmt(element, f),
                Self::NotEnoughVotes(element) => ::core::fmt::Display::fmt(element, f),
                Self::TargetMustHaveCode(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::RevertString(s) => ::core::fmt::Display::fmt(s, f),
            }
        }
    }
    impl ::core::convert::From<::std::string::String> for SimpleGovernanceErrors {
        fn from(value: String) -> Self {
            Self::RevertString(value)
        }
    }
    impl ::core::convert::From<ActionFailed> for SimpleGovernanceErrors {
        fn from(value: ActionFailed) -> Self {
            Self::ActionFailed(value)
        }
    }
    impl ::core::convert::From<CannotExecute> for SimpleGovernanceErrors {
        fn from(value: CannotExecute) -> Self {
            Self::CannotExecute(value)
        }
    }
    impl ::core::convert::From<InvalidTarget> for SimpleGovernanceErrors {
        fn from(value: InvalidTarget) -> Self {
            Self::InvalidTarget(value)
        }
    }
    impl ::core::convert::From<NotEnoughVotes> for SimpleGovernanceErrors {
        fn from(value: NotEnoughVotes) -> Self {
            Self::NotEnoughVotes(value)
        }
    }
    impl ::core::convert::From<TargetMustHaveCode> for SimpleGovernanceErrors {
        fn from(value: TargetMustHaveCode) -> Self {
            Self::TargetMustHaveCode(value)
        }
    }
    #[derive(
        Clone,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethevent(name = "ActionExecuted", abi = "ActionExecuted(uint256,address)")]
    pub struct ActionExecutedFilter {
        pub action_id: ::ethers::core::types::U256,
        #[ethevent(indexed)]
        pub caller: ::ethers::core::types::Address,
    }
    #[derive(
        Clone,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethevent(name = "ActionQueued", abi = "ActionQueued(uint256,address)")]
    pub struct ActionQueuedFilter {
        pub action_id: ::ethers::core::types::U256,
        #[ethevent(indexed)]
        pub caller: ::ethers::core::types::Address,
    }
    ///Container type for all of the contract's events
    #[derive(Clone, ::ethers::contract::EthAbiType, Debug, PartialEq, Eq, Hash)]
    pub enum SimpleGovernanceEvents {
        ActionExecutedFilter(ActionExecutedFilter),
        ActionQueuedFilter(ActionQueuedFilter),
    }
    impl ::ethers::contract::EthLogDecode for SimpleGovernanceEvents {
        fn decode_log(
            log: &::ethers::core::abi::RawLog,
        ) -> ::core::result::Result<Self, ::ethers::core::abi::Error> {
            if let Ok(decoded) = ActionExecutedFilter::decode_log(log) {
                return Ok(SimpleGovernanceEvents::ActionExecutedFilter(decoded));
            }
            if let Ok(decoded) = ActionQueuedFilter::decode_log(log) {
                return Ok(SimpleGovernanceEvents::ActionQueuedFilter(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData)
        }
    }
    impl ::core::fmt::Display for SimpleGovernanceEvents {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                Self::ActionExecutedFilter(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::ActionQueuedFilter(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
            }
        }
    }
    impl ::core::convert::From<ActionExecutedFilter> for SimpleGovernanceEvents {
        fn from(value: ActionExecutedFilter) -> Self {
            Self::ActionExecutedFilter(value)
        }
    }
    impl ::core::convert::From<ActionQueuedFilter> for SimpleGovernanceEvents {
        fn from(value: ActionQueuedFilter) -> Self {
            Self::ActionQueuedFilter(value)
        }
    }
    ///Container type for all input parameters for the `executeAction` function with signature `executeAction(uint256)` and selector `0xc0c1cf55`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "executeAction", abi = "executeAction(uint256)")]
    pub struct ExecuteActionCall {
        pub action_id: ::ethers::core::types::U256,
    }
    ///Container type for all input parameters for the `getAction` function with signature `getAction(uint256)` and selector `0xb6e76873`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "getAction", abi = "getAction(uint256)")]
    pub struct GetActionCall {
        pub action_id: ::ethers::core::types::U256,
    }
    ///Container type for all input parameters for the `getActionCounter` function with signature `getActionCounter()` and selector `0x9aca08d4`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "getActionCounter", abi = "getActionCounter()")]
    pub struct GetActionCounterCall;
    ///Container type for all input parameters for the `getActionDelay` function with signature `getActionDelay()` and selector `0x12057a14`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "getActionDelay", abi = "getActionDelay()")]
    pub struct GetActionDelayCall;
    ///Container type for all input parameters for the `getGovernanceToken` function with signature `getGovernanceToken()` and selector `0x3f8a037d`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "getGovernanceToken", abi = "getGovernanceToken()")]
    pub struct GetGovernanceTokenCall;
    ///Container type for all input parameters for the `queueAction` function with signature `queueAction(address,uint128,bytes)` and selector `0x52ecb90a`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "queueAction", abi = "queueAction(address,uint128,bytes)")]
    pub struct QueueActionCall {
        pub target: ::ethers::core::types::Address,
        pub value: u128,
        pub data: ::ethers::core::types::Bytes,
    }
    ///Container type for all of the contract's call
    #[derive(Clone, ::ethers::contract::EthAbiType, Debug, PartialEq, Eq, Hash)]
    pub enum SimpleGovernanceCalls {
        ExecuteAction(ExecuteActionCall),
        GetAction(GetActionCall),
        GetActionCounter(GetActionCounterCall),
        GetActionDelay(GetActionDelayCall),
        GetGovernanceToken(GetGovernanceTokenCall),
        QueueAction(QueueActionCall),
    }
    impl ::ethers::core::abi::AbiDecode for SimpleGovernanceCalls {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::core::result::Result<Self, ::ethers::core::abi::AbiError> {
            let data = data.as_ref();
            if let Ok(decoded)
                = <ExecuteActionCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::ExecuteAction(decoded));
            }
            if let Ok(decoded)
                = <GetActionCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::GetAction(decoded));
            }
            if let Ok(decoded)
                = <GetActionCounterCall as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::GetActionCounter(decoded));
            }
            if let Ok(decoded)
                = <GetActionDelayCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::GetActionDelay(decoded));
            }
            if let Ok(decoded)
                = <GetGovernanceTokenCall as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::GetGovernanceToken(decoded));
            }
            if let Ok(decoded)
                = <QueueActionCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::QueueAction(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ::ethers::core::abi::AbiEncode for SimpleGovernanceCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                Self::ExecuteAction(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::GetAction(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::GetActionCounter(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::GetActionDelay(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::GetGovernanceToken(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::QueueAction(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
            }
        }
    }
    impl ::core::fmt::Display for SimpleGovernanceCalls {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                Self::ExecuteAction(element) => ::core::fmt::Display::fmt(element, f),
                Self::GetAction(element) => ::core::fmt::Display::fmt(element, f),
                Self::GetActionCounter(element) => ::core::fmt::Display::fmt(element, f),
                Self::GetActionDelay(element) => ::core::fmt::Display::fmt(element, f),
                Self::GetGovernanceToken(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::QueueAction(element) => ::core::fmt::Display::fmt(element, f),
            }
        }
    }
    impl ::core::convert::From<ExecuteActionCall> for SimpleGovernanceCalls {
        fn from(value: ExecuteActionCall) -> Self {
            Self::ExecuteAction(value)
        }
    }
    impl ::core::convert::From<GetActionCall> for SimpleGovernanceCalls {
        fn from(value: GetActionCall) -> Self {
            Self::GetAction(value)
        }
    }
    impl ::core::convert::From<GetActionCounterCall> for SimpleGovernanceCalls {
        fn from(value: GetActionCounterCall) -> Self {
            Self::GetActionCounter(value)
        }
    }
    impl ::core::convert::From<GetActionDelayCall> for SimpleGovernanceCalls {
        fn from(value: GetActionDelayCall) -> Self {
            Self::GetActionDelay(value)
        }
    }
    impl ::core::convert::From<GetGovernanceTokenCall> for SimpleGovernanceCalls {
        fn from(value: GetGovernanceTokenCall) -> Self {
            Self::GetGovernanceToken(value)
        }
    }
    impl ::core::convert::From<QueueActionCall> for SimpleGovernanceCalls {
        fn from(value: QueueActionCall) -> Self {
            Self::QueueAction(value)
        }
    }
    ///Container type for all return fields from the `executeAction` function with signature `executeAction(uint256)` and selector `0xc0c1cf55`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct ExecuteActionReturn(pub ::ethers::core::types::Bytes);
    ///Container type for all return fields from the `getAction` function with signature `getAction(uint256)` and selector `0xb6e76873`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct GetActionReturn(pub GovernanceAction);
    ///Container type for all return fields from the `getActionCounter` function with signature `getActionCounter()` and selector `0x9aca08d4`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct GetActionCounterReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `getActionDelay` function with signature `getActionDelay()` and selector `0x12057a14`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct GetActionDelayReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `getGovernanceToken` function with signature `getGovernanceToken()` and selector `0x3f8a037d`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct GetGovernanceTokenReturn(pub ::ethers::core::types::Address);
    ///Container type for all return fields from the `queueAction` function with signature `queueAction(address,uint128,bytes)` and selector `0x52ecb90a`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct QueueActionReturn {
        pub action_id: ::ethers::core::types::U256,
    }
}
