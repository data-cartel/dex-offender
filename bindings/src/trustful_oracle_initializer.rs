pub use trustful_oracle_initializer::*;
/// This module was auto-generated with ethers-rs Abigen.
/// More information at: <https://github.com/gakonst/ethers-rs>
#[allow(
    clippy::enum_variant_names,
    clippy::too_many_arguments,
    clippy::upper_case_acronyms,
    clippy::type_complexity,
    dead_code,
    non_camel_case_types,
)]
pub mod trustful_oracle_initializer {
    #[allow(deprecated)]
    fn __abi() -> ::ethers::core::abi::Abi {
        ::ethers::core::abi::ethabi::Contract {
            constructor: ::core::option::Option::Some(::ethers::core::abi::ethabi::Constructor {
                inputs: ::std::vec![
                    ::ethers::core::abi::ethabi::Param {
                        name: ::std::borrow::ToOwned::to_owned("sources"),
                        kind: ::ethers::core::abi::ethabi::ParamType::Array(
                            ::std::boxed::Box::new(
                                ::ethers::core::abi::ethabi::ParamType::Address,
                            ),
                        ),
                        internal_type: ::core::option::Option::Some(
                            ::std::borrow::ToOwned::to_owned("address[]"),
                        ),
                    },
                    ::ethers::core::abi::ethabi::Param {
                        name: ::std::borrow::ToOwned::to_owned("symbols"),
                        kind: ::ethers::core::abi::ethabi::ParamType::Array(
                            ::std::boxed::Box::new(
                                ::ethers::core::abi::ethabi::ParamType::String,
                            ),
                        ),
                        internal_type: ::core::option::Option::Some(
                            ::std::borrow::ToOwned::to_owned("string[]"),
                        ),
                    },
                    ::ethers::core::abi::ethabi::Param {
                        name: ::std::borrow::ToOwned::to_owned("initialPrices"),
                        kind: ::ethers::core::abi::ethabi::ParamType::Array(
                            ::std::boxed::Box::new(
                                ::ethers::core::abi::ethabi::ParamType::Uint(256usize),
                            ),
                        ),
                        internal_type: ::core::option::Option::Some(
                            ::std::borrow::ToOwned::to_owned("uint256[]"),
                        ),
                    },
                ],
            }),
            functions: ::core::convert::From::from([
                (
                    ::std::borrow::ToOwned::to_owned("oracle"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("oracle"),
                            inputs: ::std::vec![],
                            outputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::string::String::new(),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Address,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("contract TrustfulOracle"),
                                    ),
                                },
                            ],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::View,
                        },
                    ],
                ),
            ]),
            events: ::core::convert::From::from([
                (
                    ::std::borrow::ToOwned::to_owned("NewTrustfulOracle"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Event {
                            name: ::std::borrow::ToOwned::to_owned("NewTrustfulOracle"),
                            inputs: ::std::vec![
                                ::ethers::core::abi::ethabi::EventParam {
                                    name: ::std::borrow::ToOwned::to_owned("oracleAddress"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Address,
                                    indexed: false,
                                },
                            ],
                            anonymous: false,
                        },
                    ],
                ),
            ]),
            errors: ::std::collections::BTreeMap::new(),
            receive: false,
            fallback: false,
        }
    }
    ///The parsed JSON ABI of the contract.
    pub static TRUSTFULORACLEINITIALIZER_ABI: ::ethers::contract::Lazy<
        ::ethers::core::abi::Abi,
    > = ::ethers::contract::Lazy::new(__abi);
    #[rustfmt::skip]
    const __BYTECODE: &[u8] = b"`\x80`@R4\x80\x15b\0\0\x11W`\0\x80\xFD[P`@Qb\0\x1D\xFC8\x03\x80b\0\x1D\xFC\x839\x81\x01`@\x81\x90Rb\0\x004\x91b\0\x03>V[\x82`\x01`@Qb\0\0E\x90b\0\x014V[b\0\0R\x92\x91\x90b\0\x04\x89V[`@Q\x80\x91\x03\x90`\0\xF0\x80\x15\x80\x15b\0\0oW=`\0\x80>=`\0\xFD[P`\0\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x92\x90\x92\x16\x91\x82\x17\x90U`@Qc3I\x96\xC3`\xE1\x1B\x81Rcf\x93-\x86\x90b\0\0\xB6\x90\x86\x90\x86\x90\x86\x90`\x04\x01b\0\x04\xE1V[`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15b\0\0\xD1W`\0\x80\xFD[PZ\xF1\x15\x80\x15b\0\0\xE6W=`\0\x80>=`\0\xFD[PP`\0T`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R\x7F\xC7\xFA\x19A\xC8\x10z\x0B\xB8_\xD1jX\xDD`\x90\xFE\x7F\xA9VUu\x8FHVH\xBF\x9Ca\xD4T\x05\x92P` \x01\x90P`@Q\x80\x91\x03\x90\xA1PPPb\0\x05\x86V[a\x17\xD6\x80b\0\x06&\x839\x01\x90V[cNH{q`\xE0\x1B`\0R`A`\x04R`$`\0\xFD[`@Q`\x1F\x82\x01`\x1F\x19\x16\x81\x01`\x01`\x01`@\x1B\x03\x81\x11\x82\x82\x10\x17\x15b\0\x01\x83Wb\0\x01\x83b\0\x01BV[`@R\x91\x90PV[`\0`\x01`\x01`@\x1B\x03\x82\x11\x15b\0\x01\xA7Wb\0\x01\xA7b\0\x01BV[P`\x05\x1B` \x01\x90V[`\0[\x83\x81\x10\x15b\0\x01\xCEW\x81\x81\x01Q\x83\x82\x01R` \x01b\0\x01\xB4V[PP`\0\x91\x01RV[`\0`\x1F\x83\x81\x84\x01\x12b\0\x01\xEAW`\0\x80\xFD[\x82Q` b\0\x02\x03b\0\x01\xFD\x83b\0\x01\x8BV[b\0\x01XV[\x82\x81R`\x05\x92\x90\x92\x1B\x85\x01\x81\x01\x91\x81\x81\x01\x90\x87\x84\x11\x15b\0\x02#W`\0\x80\xFD[\x82\x87\x01[\x84\x81\x10\x15b\0\x02\xC5W\x80Q`\x01`\x01`@\x1B\x03\x80\x82\x11\x15b\0\x02IW`\0\x80\x81\xFD[\x81\x8A\x01\x91P\x8A`?\x83\x01\x12b\0\x02_W`\0\x80\x81\xFD[\x85\x82\x01Q`@\x82\x82\x11\x15b\0\x02xWb\0\x02xb\0\x01BV[b\0\x02\x8B\x82\x8B\x01`\x1F\x19\x16\x89\x01b\0\x01XV[\x92P\x81\x83R\x8C\x81\x83\x86\x01\x01\x11\x15b\0\x02\xA3W`\0\x80\x81\xFD[b\0\x02\xB4\x82\x89\x85\x01\x83\x87\x01b\0\x01\xB1V[PP\x84RP\x91\x83\x01\x91\x83\x01b\0\x02'V[P\x97\x96PPPPPPPV[`\0\x82`\x1F\x83\x01\x12b\0\x02\xE3W`\0\x80\xFD[\x81Q` b\0\x02\xF6b\0\x01\xFD\x83b\0\x01\x8BV[\x82\x81R`\x05\x92\x90\x92\x1B\x84\x01\x81\x01\x91\x81\x81\x01\x90\x86\x84\x11\x15b\0\x03\x16W`\0\x80\xFD[\x82\x86\x01[\x84\x81\x10\x15b\0\x033W\x80Q\x83R\x91\x83\x01\x91\x83\x01b\0\x03\x1AV[P\x96\x95PPPPPPV[`\0\x80`\0``\x84\x86\x03\x12\x15b\0\x03TW`\0\x80\xFD[\x83Q`\x01`\x01`@\x1B\x03\x80\x82\x11\x15b\0\x03lW`\0\x80\xFD[\x81\x86\x01\x91P\x86`\x1F\x83\x01\x12b\0\x03\x81W`\0\x80\xFD[\x81Q` b\0\x03\x94b\0\x01\xFD\x83b\0\x01\x8BV[\x82\x81R`\x05\x92\x90\x92\x1B\x84\x01\x81\x01\x91\x81\x81\x01\x90\x8A\x84\x11\x15b\0\x03\xB4W`\0\x80\xFD[\x94\x82\x01\x94[\x83\x86\x10\x15b\0\x03\xEBW\x85Q`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14b\0\x03\xDBW`\0\x80\x81\xFD[\x82R\x94\x82\x01\x94\x90\x82\x01\x90b\0\x03\xB9V[\x91\x89\x01Q\x91\x97P\x90\x93PPP\x80\x82\x11\x15b\0\x04\x05W`\0\x80\xFD[b\0\x04\x13\x87\x83\x88\x01b\0\x01\xD7V[\x93P`@\x86\x01Q\x91P\x80\x82\x11\x15b\0\x04*W`\0\x80\xFD[Pb\0\x049\x86\x82\x87\x01b\0\x02\xD1V[\x91PP\x92P\x92P\x92V[`\0\x81Q\x80\x84R` \x80\x85\x01\x94P\x80\x84\x01`\0[\x83\x81\x10\x15b\0\x04~W\x81Q`\x01`\x01`\xA0\x1B\x03\x16\x87R\x95\x82\x01\x95\x90\x82\x01\x90`\x01\x01b\0\x04WV[P\x94\x95\x94PPPPPV[`@\x81R`\0b\0\x04\x9E`@\x83\x01\x85b\0\x04CV[\x90P\x82\x15\x15` \x83\x01R\x93\x92PPPV[`\0\x81Q\x80\x84R` \x80\x85\x01\x94P\x80\x84\x01`\0[\x83\x81\x10\x15b\0\x04~W\x81Q\x87R\x95\x82\x01\x95\x90\x82\x01\x90`\x01\x01b\0\x04\xC3V[``\x81R`\0b\0\x04\xF6``\x83\x01\x86b\0\x04CV[` \x83\x82\x03\x81\x85\x01R\x81\x86Q\x80\x84R\x82\x84\x01\x91P\x82\x81`\x05\x1B\x85\x01\x01\x83\x89\x01`\0[\x83\x81\x10\x15b\0\x05bW`\x1F\x19\x80\x88\x85\x03\x01\x86R\x82Q\x80Q\x80\x86Rb\0\x05C\x81\x8A\x88\x01\x8B\x85\x01b\0\x01\xB1V[\x96\x88\x01\x96`\x1F\x01\x90\x91\x16\x93\x90\x93\x01\x86\x01\x92P\x90\x85\x01\x90`\x01\x01b\0\x05\x18V[PP\x86\x81\x03`@\x88\x01Rb\0\x05x\x81\x89b\0\x04\xAFV[\x9A\x99PPPPPPPPPPV[`\x91\x80b\0\x05\x95`\09`\0\xF3\xFE`\x80`@R4\x80\x15`\x0FW`\0\x80\xFD[P`\x046\x10`(W`\x005`\xE0\x1C\x80c}\xC0\xD1\xD0\x14`-W[`\0\x80\xFD[`\0T`?\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01`@Q\x80\x91\x03\x90\xF3\xFE\xA2dipfsX\"\x12 mA\x17\x80\xC2\xD0\xB1\xC7\x13\xBD\xBA\xCAa\x19\xFEI\t\xEB\xD2]M\x8F\x9E\x1A\x86\x9C\n\"\x90\x0CgZdsolcC\0\x08\x14\x003`\x80`@R4\x80\x15b\0\0\x11W`\0\x80\xFD[P`@Qb\0\x17\xD68\x03\x80b\0\x17\xD6\x839\x81\x01`@\x81\x90Rb\0\x004\x91b\0\x02\x89V[`\x01\x82Q\x10\x15b\0\0XW`@Qc\x1A\xBC\x04\xD3`\xE1\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\0[\x82Q\x81\x10\x15b\0\0\xBCWb\0\0\xB3\x7F\xC6y\x03\x86&I\x9F\xF8j}\xEB\xD1\xAB\xE4|\xFE\xE1\xE3*\x1A\xFC7H\xD33Al.\x93F\x0E\xE5\x84\x83\x81Q\x81\x10b\0\0\x9FWb\0\0\x9Fb\0\x03oV[` \x02` \x01\x01Qb\0\0\xF8` \x1B` \x1CV[`\x01\x01b\0\0[V[P\x80\x15b\0\0\xF0Wb\0\0\xF0\x7F0\xD4\x1AY|\xAC\x12}\x82I\xD3\x12\x98\xB5\x0EH\x1E\xE8,?JI\xFF\x93\xC7j\"sZ\xA9\xF3\xAD3b\0\0\xF8V[PPb\0\x03\x85V[b\0\x01\x04\x82\x82b\0\x01\x08V[PPV[b\0\x01\x14\x82\x82b\0\x013V[`\0\x82\x81R`\x01` R`@\x90 b\0\x01.\x90\x82b\0\x01\xD3V[PPPV[`\0\x82\x81R` \x81\x81R`@\x80\x83 `\x01`\x01`\xA0\x1B\x03\x85\x16\x84R\x90\x91R\x90 T`\xFF\x16b\0\x01\x04W`\0\x82\x81R` \x81\x81R`@\x80\x83 `\x01`\x01`\xA0\x1B\x03\x85\x16\x84R\x90\x91R\x90 \x80T`\xFF\x19\x16`\x01\x17\x90Ub\0\x01\x8F3\x90V[`\x01`\x01`\xA0\x1B\x03\x16\x81`\x01`\x01`\xA0\x1B\x03\x16\x83\x7F/\x87\x88\x11~~\xFF\x1D\x82\xE9&\xECyI\x01\xD1|x\x02JP'\t@0E@\xA73eo\r`@Q`@Q\x80\x91\x03\x90\xA4PPV[`\0b\0\x01\xEA\x83`\x01`\x01`\xA0\x1B\x03\x84\x16b\0\x01\xF3V[\x90P[\x92\x91PPV[`\0\x81\x81R`\x01\x83\x01` R`@\x81 Tb\0\x02<WP\x81T`\x01\x81\x81\x01\x84U`\0\x84\x81R` \x80\x82 \x90\x93\x01\x84\x90U\x84T\x84\x82R\x82\x86\x01\x90\x93R`@\x90 \x91\x90\x91Ub\0\x01\xEDV[P`\0b\0\x01\xEDV[cNH{q`\xE0\x1B`\0R`A`\x04R`$`\0\xFD[\x80Q`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14b\0\x02sW`\0\x80\xFD[\x91\x90PV[\x80Q\x80\x15\x15\x81\x14b\0\x02sW`\0\x80\xFD[`\0\x80`@\x83\x85\x03\x12\x15b\0\x02\x9DW`\0\x80\xFD[\x82Q`\x01`\x01`@\x1B\x03\x80\x82\x11\x15b\0\x02\xB5W`\0\x80\xFD[\x81\x85\x01\x91P\x85`\x1F\x83\x01\x12b\0\x02\xCAW`\0\x80\xFD[\x81Q` \x82\x82\x11\x15b\0\x02\xE1Wb\0\x02\xE1b\0\x02EV[\x81`\x05\x1B`@Q`\x1F\x19`?\x83\x01\x16\x81\x01\x81\x81\x10\x86\x82\x11\x17\x15b\0\x03\tWb\0\x03\tb\0\x02EV[`@R\x92\x83R\x81\x83\x01\x93P\x84\x81\x01\x82\x01\x92\x89\x84\x11\x15b\0\x03(W`\0\x80\xFD[\x94\x82\x01\x94[\x83\x86\x10\x15b\0\x03QWb\0\x03A\x86b\0\x02[V[\x85R\x94\x82\x01\x94\x93\x82\x01\x93b\0\x03-V[\x96Pb\0\x03b\x90P\x87\x82\x01b\0\x02xV[\x94PPPPP\x92P\x92\x90PV[cNH{q`\xE0\x1B`\0R`2`\x04R`$`\0\xFD[a\x14A\x80b\0\x03\x95`\09`\0\xF3\xFE`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[P`\x046\x10a\x01\x0BW`\x005`\xE0\x1C\x80c\x90\x10\xD0|\x11a\0\xA2W\x80c\xA2\x17\xFD\xDF\x11a\0qW\x80c\xA2\x17\xFD\xDF\x14a\x02YW\x80c\xBC\xC8-\xC4\x14a\x02aW\x80c\xCA\x15\xC8s\x14a\x02tW\x80c\xD5Gt\x1F\x14a\x02\x87W\x80c\xD9e\xB3\x08\x14a\x02\x9AW`\0\x80\xFD[\x80c\x90\x10\xD0|\x14a\x01\xE6W\x80c\x91i\x1F\xD9\x14a\x02\x11W\x80c\x91\xD1HT\x14a\x02&W\x80c\x9A\xBDJ%\x14a\x029W`\0\x80\xFD[\x80c//\xF1]\x11a\0\xDEW\x80c//\xF1]\x14a\x01\xA3W\x80c6V\x8A\xBE\x14a\x01\xB8W\x80cTbz\xF0\x14a\x01\xCBW\x80cf\x93-\x86\x14a\x01\xD3W`\0\x80\xFD[\x80c\x01\xFF\xC9\xA7\x14a\x01\x10W\x80c$\x8A\x9C\xA3\x14a\x018W\x80c'\xDF=>\x14a\x01iW\x80c)\xD1G\x10\x14a\x01\x90W[`\0\x80\xFD[a\x01#a\x01\x1E6`\x04a\x0E\x01V[a\x02\xADV[`@Q\x90\x15\x15\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[a\x01[a\x01F6`\x04a\x0E+V[`\0\x90\x81R` \x81\x90R`@\x90 `\x01\x01T\x90V[`@Q\x90\x81R` \x01a\x01/V[a\x01[\x7F0\xD4\x1AY|\xAC\x12}\x82I\xD3\x12\x98\xB5\x0EH\x1E\xE8,?JI\xFF\x93\xC7j\"sZ\xA9\xF3\xAD\x81V[a\x01[a\x01\x9E6`\x04a\x0F\x03V[a\x02\xD8V[a\x01\xB6a\x01\xB16`\x04a\x0FQV[a\x03\x15V[\0[a\x01\xB6a\x01\xC66`\x04a\x0FQV[a\x03?V[a\x01[`\x01\x81V[a\x01\xB6a\x01\xE16`\x04a\x0F\xC0V[a\x03\xC2V[a\x01\xF9a\x01\xF46`\x04a\x10ZV[a\x04\xEDV[`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01a\x01/V[a\x01[`\0\x80Q` a\x13\xEC\x839\x81Q\x91R\x81V[a\x01#a\x0246`\x04a\x0FQV[a\x05\x0CV[a\x02La\x02G6`\x04a\x10|V[a\x055V[`@Qa\x01/\x91\x90a\x10\xB9V[a\x01[`\0\x81V[a\x01\xB6a\x02o6`\x04a\x11?V[a\x05\xF5V[a\x01[a\x02\x826`\x04a\x0E+V[a\x06UV[a\x01\xB6a\x02\x956`\x04a\x0FQV[a\x06lV[a\x01[a\x02\xA86`\x04a\x11\x8BV[a\x06\x91V[`\0`\x01`\x01`\xE0\x1B\x03\x19\x82\x16cZ\x05\x18\x0F`\xE0\x1B\x14\x80a\x02\xD2WPa\x02\xD2\x82a\x06\xD2V[\x92\x91PPV[`\x01`\x01`\xA0\x1B\x03\x81\x16`\0\x90\x81R`\x02` R`@\x80\x82 \x90Qa\x02\xFE\x90\x85\x90a\x11\xF1V[\x90\x81R` \x01`@Q\x80\x91\x03\x90 T\x90P\x92\x91PPV[`\0\x82\x81R` \x81\x90R`@\x90 `\x01\x01Ta\x030\x81a\x07\x07V[a\x03:\x83\x83a\x07\x14V[PPPV[`\x01`\x01`\xA0\x1B\x03\x81\x163\x14a\x03\xB4W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`/`$\x82\x01R\x7FAccessControl: can only renounce`D\x82\x01Rn\x1097\xB62\xB9\x9037\xB9\x109\xB2\xB63`\x89\x1B`d\x82\x01R`\x84\x01[`@Q\x80\x91\x03\x90\xFD[a\x03\xBE\x82\x82a\x076V[PPV[\x7F0\xD4\x1AY|\xAC\x12}\x82I\xD3\x12\x98\xB5\x0EH\x1E\xE8,?JI\xFF\x93\xC7j\"sZ\xA9\xF3\xADa\x03\xEC\x81a\x07\x07V[\x85\x84\x14\x80\x15a\x03\xFAWP\x83\x82\x14[a\x04\x03W`\0\x80\xFD[`\0[\x86\x81\x10\x15a\x04\xB9Wa\x04\xB1\x88\x88\x83\x81\x81\x10a\x04#Wa\x04#a\x12\rV[\x90P` \x02\x01` \x81\x01\x90a\x048\x91\x90a\x12#V[\x87\x87\x84\x81\x81\x10a\x04JWa\x04Ja\x12\rV[\x90P` \x02\x81\x01\x90a\x04\\\x91\x90a\x12>V[\x80\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83\x80\x82\x847`\0\x92\x01\x91\x90\x91RP\x89\x92P\x88\x91P\x86\x90P\x81\x81\x10a\x04\xA5Wa\x04\xA5a\x12\rV[\x90P` \x02\x015a\x07XV[`\x01\x01a\x04\x06V[Pa\x04\xE4\x7F0\xD4\x1AY|\xAC\x12}\x82I\xD3\x12\x98\xB5\x0EH\x1E\xE8,?JI\xFF\x93\xC7j\"sZ\xA9\xF3\xAD3a\x03?V[PPPPPPPV[`\0\x82\x81R`\x01` R`@\x81 a\x05\x05\x90\x83a\x082V[\x93\x92PPPV[`\0\x91\x82R` \x82\x81R`@\x80\x84 `\x01`\x01`\xA0\x1B\x03\x93\x90\x93\x16\x84R\x91\x90R\x90 T`\xFF\x16\x90V[```\0a\x05P`\0\x80Q` a\x13\xEC\x839\x81Q\x91Ra\x06UV[\x90P\x80g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x05kWa\x05ka\x0EDV[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x05\x94W\x81` \x01` \x82\x02\x806\x837\x01\x90P[P\x91P`\0[\x81\x81\x10\x15a\x05\xEEW`\0a\x05\xBC`\0\x80Q` a\x13\xEC\x839\x81Q\x91R\x83a\x04\xEDV[\x90Pa\x05\xC8\x85\x82a\x02\xD8V[\x84\x83\x81Q\x81\x10a\x05\xDAWa\x05\xDAa\x12\rV[` \x90\x81\x02\x91\x90\x91\x01\x01RP`\x01\x01a\x05\x9AV[PP\x91\x90PV[`\0\x80Q` a\x13\xEC\x839\x81Q\x91Ra\x06\r\x81a\x07\x07V[a\x06O3\x85\x85\x80\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83\x80\x82\x847`\0\x92\x01\x91\x90\x91RP\x87\x92Pa\x07X\x91PPV[PPPPV[`\0\x81\x81R`\x01` R`@\x81 a\x02\xD2\x90a\x08>V[`\0\x82\x81R` \x81\x90R`@\x90 `\x01\x01Ta\x06\x87\x81a\x07\x07V[a\x03:\x83\x83a\x076V[`\0a\x05\x05\x83\x83\x80\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83\x80\x82\x847`\0\x92\x01\x91\x90\x91RPa\x08H\x92PPPV[`\0`\x01`\x01`\xE0\x1B\x03\x19\x82\x16cye\xDB\x0B`\xE0\x1B\x14\x80a\x02\xD2WPc\x01\xFF\xC9\xA7`\xE0\x1B`\x01`\x01`\xE0\x1B\x03\x19\x83\x16\x14a\x02\xD2V[a\x07\x11\x813a\t&V[PV[a\x07\x1E\x82\x82a\t\x7FV[`\0\x82\x81R`\x01` R`@\x90 a\x03:\x90\x82a\n\x03V[a\x07@\x82\x82a\n\x18V[`\0\x82\x81R`\x01` R`@\x90 a\x03:\x90\x82a\n}V[`\x01`\x01`\xA0\x1B\x03\x83\x16`\0\x90\x81R`\x02` R`@\x80\x82 \x90Qa\x07~\x90\x85\x90a\x11\xF1V[\x90\x81R` \x01`@Q\x80\x91\x03\x90 T\x90P\x81`\x02`\0\x86`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x01\x90\x81R` \x01`\0 \x84`@Qa\x07\xC3\x91\x90a\x11\xF1V[\x90\x81R`@Q\x90\x81\x90\x03` \x01\x81 \x91\x90\x91Ua\x07\xE1\x90\x84\x90a\x11\xF1V[`@\x80Q\x91\x82\x90\x03\x82 \x83\x83R` \x83\x01\x85\x90R\x91`\x01`\x01`\xA0\x1B\x03\x87\x16\x91\x7F~\xBF\xC8\xF1\xD3\xDF\xF8\xB5l\xE7\x0E\x11]\x8B\xA5\xB1\x8D\x9A\xF7b\x18?'\xEE4\xE3\xE7\xEC^\xF9_\x9F\x91\x01`@Q\x80\x91\x03\x90\xA3PPPPV[`\0a\x05\x05\x83\x83a\n\x92V[`\0a\x02\xD2\x82T\x90V[`\0\x80a\x08T\x83a\x055V[\x90Pa\x08_\x81a\n\xBCV[`\x02\x81Qa\x08m\x91\x90a\x12\x9BV[`\0\x03a\x08\xF7W`\0\x81`\x01`\x02\x84Qa\x08\x87\x91\x90a\x12\xC5V[a\x08\x91\x91\x90a\x12\xD9V[\x81Q\x81\x10a\x08\xA1Wa\x08\xA1a\x12\rV[` \x02` \x01\x01Q\x90P`\0\x82`\x02\x84Qa\x08\xBC\x91\x90a\x12\xC5V[\x81Q\x81\x10a\x08\xCCWa\x08\xCCa\x12\rV[` \x02` \x01\x01Q\x90P`\x02\x81\x83a\x08\xE4\x91\x90a\x12\xECV[a\x08\xEE\x91\x90a\x12\xC5V[\x95\x94PPPPPV[\x80`\x02\x82Qa\t\x06\x91\x90a\x12\xC5V[\x81Q\x81\x10a\t\x16Wa\t\x16a\x12\rV[` \x02` \x01\x01Q\x91PP\x91\x90PV[a\t0\x82\x82a\x05\x0CV[a\x03\xBEWa\t=\x81a\x0B\x11V[a\tH\x83` a\x0B#V[`@Q` \x01a\tY\x92\x91\x90a\x12\xFFV[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x90\x82\x90RbF\x1B\xCD`\xE5\x1B\x82Ra\x03\xAB\x91`\x04\x01a\x13tV[a\t\x89\x82\x82a\x05\x0CV[a\x03\xBEW`\0\x82\x81R` \x81\x81R`@\x80\x83 `\x01`\x01`\xA0\x1B\x03\x85\x16\x84R\x90\x91R\x90 \x80T`\xFF\x19\x16`\x01\x17\x90Ua\t\xBF3\x90V[`\x01`\x01`\xA0\x1B\x03\x16\x81`\x01`\x01`\xA0\x1B\x03\x16\x83\x7F/\x87\x88\x11~~\xFF\x1D\x82\xE9&\xECyI\x01\xD1|x\x02JP'\t@0E@\xA73eo\r`@Q`@Q\x80\x91\x03\x90\xA4PPV[`\0a\x05\x05\x83`\x01`\x01`\xA0\x1B\x03\x84\x16a\x0C\xBFV[a\n\"\x82\x82a\x05\x0CV[\x15a\x03\xBEW`\0\x82\x81R` \x81\x81R`@\x80\x83 `\x01`\x01`\xA0\x1B\x03\x85\x16\x80\x85R\x92R\x80\x83 \x80T`\xFF\x19\x16\x90UQ3\x92\x85\x91\x7F\xF69\x1F\\2\xD9\xC6\x9D*G\xEAg\x0BD)t\xB595\xD1\xED\xC7\xFDd\xEB!\xE0G\xA89\x17\x1B\x91\x90\xA4PPV[`\0a\x05\x05\x83`\x01`\x01`\xA0\x1B\x03\x84\x16a\r\x0EV[`\0\x82`\0\x01\x82\x81T\x81\x10a\n\xA9Wa\n\xA9a\x12\rV[\x90`\0R` `\0 \x01T\x90P\x92\x91PPV[\x80Q`\0\x82R\x80`\x05\x1B\x82\x01` `\x1F\x19\x81\x85\x01[\x82\x01\x83\x81\x11a\x0B\tW\x80Q\x82\x82\x01\x80Q\x82\x81\x11a\n\xF0WPPPa\n\xD1V[[\x81\x86\x01R\x83\x01\x80Q\x82\x81\x11a\n\xF1WP\x84\x01Ra\n\xD1V[PPP\x91RPV[``a\x02\xD2`\x01`\x01`\xA0\x1B\x03\x83\x16`\x14[```\0a\x0B2\x83`\x02a\x13\xA7V[a\x0B=\x90`\x02a\x12\xECV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0BUWa\x0BUa\x0EDV[`@Q\x90\x80\x82R\x80`\x1F\x01`\x1F\x19\x16` \x01\x82\x01`@R\x80\x15a\x0B\x7FW` \x82\x01\x81\x806\x837\x01\x90P[P\x90P`\x03`\xFC\x1B\x81`\0\x81Q\x81\x10a\x0B\x9AWa\x0B\x9Aa\x12\rV[` \x01\x01\x90`\x01`\x01`\xF8\x1B\x03\x19\x16\x90\x81`\0\x1A\x90SP`\x0F`\xFB\x1B\x81`\x01\x81Q\x81\x10a\x0B\xC9Wa\x0B\xC9a\x12\rV[` \x01\x01\x90`\x01`\x01`\xF8\x1B\x03\x19\x16\x90\x81`\0\x1A\x90SP`\0a\x0B\xED\x84`\x02a\x13\xA7V[a\x0B\xF8\x90`\x01a\x12\xECV[\x90P[`\x01\x81\x11\x15a\x0CpWo\x18\x18\x99\x19\x9A\x1A\x9B\x1B\x9C\x1C\xB0\xB11\xB22\xB3`\x81\x1B\x85`\x0F\x16`\x10\x81\x10a\x0C,Wa\x0C,a\x12\rV[\x1A`\xF8\x1B\x82\x82\x81Q\x81\x10a\x0CBWa\x0CBa\x12\rV[` \x01\x01\x90`\x01`\x01`\xF8\x1B\x03\x19\x16\x90\x81`\0\x1A\x90SP`\x04\x94\x90\x94\x1C\x93a\x0Ci\x81a\x13\xBEV[\x90Pa\x0B\xFBV[P\x83\x15a\x05\x05W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01\x81\x90R`$\x82\x01R\x7FStrings: hex length insufficient`D\x82\x01R`d\x01a\x03\xABV[`\0\x81\x81R`\x01\x83\x01` R`@\x81 Ta\r\x06WP\x81T`\x01\x81\x81\x01\x84U`\0\x84\x81R` \x80\x82 \x90\x93\x01\x84\x90U\x84T\x84\x82R\x82\x86\x01\x90\x93R`@\x90 \x91\x90\x91Ua\x02\xD2V[P`\0a\x02\xD2V[`\0\x81\x81R`\x01\x83\x01` R`@\x81 T\x80\x15a\r\xF7W`\0a\r2`\x01\x83a\x12\xD9V[\x85T\x90\x91P`\0\x90a\rF\x90`\x01\x90a\x12\xD9V[\x90P\x81\x81\x14a\r\xABW`\0\x86`\0\x01\x82\x81T\x81\x10a\rfWa\rfa\x12\rV[\x90`\0R` `\0 \x01T\x90P\x80\x87`\0\x01\x84\x81T\x81\x10a\r\x89Wa\r\x89a\x12\rV[`\0\x91\x82R` \x80\x83 \x90\x91\x01\x92\x90\x92U\x91\x82R`\x01\x88\x01\x90R`@\x90 \x83\x90U[\x85T\x86\x90\x80a\r\xBCWa\r\xBCa\x13\xD5V[`\x01\x90\x03\x81\x81\x90`\0R` `\0 \x01`\0\x90U\x90U\x85`\x01\x01`\0\x86\x81R` \x01\x90\x81R` \x01`\0 `\0\x90U`\x01\x93PPPPa\x02\xD2V[`\0\x91PPa\x02\xD2V[`\0` \x82\x84\x03\x12\x15a\x0E\x13W`\0\x80\xFD[\x815`\x01`\x01`\xE0\x1B\x03\x19\x81\x16\x81\x14a\x05\x05W`\0\x80\xFD[`\0` \x82\x84\x03\x12\x15a\x0E=W`\0\x80\xFD[P5\x91\x90PV[cNH{q`\xE0\x1B`\0R`A`\x04R`$`\0\xFD[`\0\x82`\x1F\x83\x01\x12a\x0EkW`\0\x80\xFD[\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a\x0E\x86Wa\x0E\x86a\x0EDV[`@Q`\x1F\x83\x01`\x1F\x19\x90\x81\x16`?\x01\x16\x81\x01\x90\x82\x82\x11\x81\x83\x10\x17\x15a\x0E\xAEWa\x0E\xAEa\x0EDV[\x81`@R\x83\x81R\x86` \x85\x88\x01\x01\x11\x15a\x0E\xC7W`\0\x80\xFD[\x83` \x87\x01` \x83\x017`\0` \x85\x83\x01\x01R\x80\x94PPPPP\x92\x91PPV[\x805`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x0E\xFEW`\0\x80\xFD[\x91\x90PV[`\0\x80`@\x83\x85\x03\x12\x15a\x0F\x16W`\0\x80\xFD[\x825g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0F-W`\0\x80\xFD[a\x0F9\x85\x82\x86\x01a\x0EZV[\x92PPa\x0FH` \x84\x01a\x0E\xE7V[\x90P\x92P\x92\x90PV[`\0\x80`@\x83\x85\x03\x12\x15a\x0FdW`\0\x80\xFD[\x825\x91Pa\x0FH` \x84\x01a\x0E\xE7V[`\0\x80\x83`\x1F\x84\x01\x12a\x0F\x86W`\0\x80\xFD[P\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0F\x9EW`\0\x80\xFD[` \x83\x01\x91P\x83` \x82`\x05\x1B\x85\x01\x01\x11\x15a\x0F\xB9W`\0\x80\xFD[\x92P\x92\x90PV[`\0\x80`\0\x80`\0\x80``\x87\x89\x03\x12\x15a\x0F\xD9W`\0\x80\xFD[\x865g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a\x0F\xF1W`\0\x80\xFD[a\x0F\xFD\x8A\x83\x8B\x01a\x0FtV[\x90\x98P\x96P` \x89\x015\x91P\x80\x82\x11\x15a\x10\x16W`\0\x80\xFD[a\x10\"\x8A\x83\x8B\x01a\x0FtV[\x90\x96P\x94P`@\x89\x015\x91P\x80\x82\x11\x15a\x10;W`\0\x80\xFD[Pa\x10H\x89\x82\x8A\x01a\x0FtV[\x97\x9A\x96\x99P\x94\x97P\x92\x95\x93\x94\x92PPPV[`\0\x80`@\x83\x85\x03\x12\x15a\x10mW`\0\x80\xFD[PP\x805\x92` \x90\x91\x015\x91PV[`\0` \x82\x84\x03\x12\x15a\x10\x8EW`\0\x80\xFD[\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x10\xA5W`\0\x80\xFD[a\x10\xB1\x84\x82\x85\x01a\x0EZV[\x94\x93PPPPV[` \x80\x82R\x82Q\x82\x82\x01\x81\x90R`\0\x91\x90\x84\x82\x01\x90`@\x85\x01\x90\x84[\x81\x81\x10\x15a\x10\xF1W\x83Q\x83R\x92\x84\x01\x92\x91\x84\x01\x91`\x01\x01a\x10\xD5V[P\x90\x96\x95PPPPPPV[`\0\x80\x83`\x1F\x84\x01\x12a\x11\x0FW`\0\x80\xFD[P\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x11'W`\0\x80\xFD[` \x83\x01\x91P\x83` \x82\x85\x01\x01\x11\x15a\x0F\xB9W`\0\x80\xFD[`\0\x80`\0`@\x84\x86\x03\x12\x15a\x11TW`\0\x80\xFD[\x835g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x11kW`\0\x80\xFD[a\x11w\x86\x82\x87\x01a\x10\xFDV[\x90\x97\x90\x96P` \x95\x90\x95\x015\x94\x93PPPPV[`\0\x80` \x83\x85\x03\x12\x15a\x11\x9EW`\0\x80\xFD[\x825g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x11\xB5W`\0\x80\xFD[a\x11\xC1\x85\x82\x86\x01a\x10\xFDV[\x90\x96\x90\x95P\x93PPPPV[`\0[\x83\x81\x10\x15a\x11\xE8W\x81\x81\x01Q\x83\x82\x01R` \x01a\x11\xD0V[PP`\0\x91\x01RV[`\0\x82Qa\x12\x03\x81\x84` \x87\x01a\x11\xCDV[\x91\x90\x91\x01\x92\x91PPV[cNH{q`\xE0\x1B`\0R`2`\x04R`$`\0\xFD[`\0` \x82\x84\x03\x12\x15a\x125W`\0\x80\xFD[a\x05\x05\x82a\x0E\xE7V[`\0\x80\x835`\x1E\x19\x846\x03\x01\x81\x12a\x12UW`\0\x80\xFD[\x83\x01\x805\x91Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x12pW`\0\x80\xFD[` \x01\x91P6\x81\x90\x03\x82\x13\x15a\x0F\xB9W`\0\x80\xFD[cNH{q`\xE0\x1B`\0R`\x12`\x04R`$`\0\xFD[`\0\x82a\x12\xAAWa\x12\xAAa\x12\x85V[P\x06\x90V[cNH{q`\xE0\x1B`\0R`\x11`\x04R`$`\0\xFD[`\0\x82a\x12\xD4Wa\x12\xD4a\x12\x85V[P\x04\x90V[\x81\x81\x03\x81\x81\x11\x15a\x02\xD2Wa\x02\xD2a\x12\xAFV[\x80\x82\x01\x80\x82\x11\x15a\x02\xD2Wa\x02\xD2a\x12\xAFV[\x7FAccessControl: account \0\0\0\0\0\0\0\0\0\x81R`\0\x83Qa\x137\x81`\x17\x85\x01` \x88\x01a\x11\xCDV[p\x01\x03K\x99\x03kK\x9B\x9BKs9\x03\x93{c)`}\x1B`\x17\x91\x84\x01\x91\x82\x01R\x83Qa\x13h\x81`(\x84\x01` \x88\x01a\x11\xCDV[\x01`(\x01\x94\x93PPPPV[` \x81R`\0\x82Q\x80` \x84\x01Ra\x13\x93\x81`@\x85\x01` \x87\x01a\x11\xCDV[`\x1F\x01`\x1F\x19\x16\x91\x90\x91\x01`@\x01\x92\x91PPV[\x80\x82\x02\x81\x15\x82\x82\x04\x84\x14\x17a\x02\xD2Wa\x02\xD2a\x12\xAFV[`\0\x81a\x13\xCDWa\x13\xCDa\x12\xAFV[P`\0\x19\x01\x90V[cNH{q`\xE0\x1B`\0R`1`\x04R`$`\0\xFD\xFE\xC6y\x03\x86&I\x9F\xF8j}\xEB\xD1\xAB\xE4|\xFE\xE1\xE3*\x1A\xFC7H\xD33Al.\x93F\x0E\xE5\xA2dipfsX\"\x12 \xC6N\xFA=\x0B\x90\xA5M/\xF6Q\xF7\x17\x02\xAFC\xB0\xAF\xAE\xB6\x91\x04K\xAB\xBD\xB0\x9DW\xA2\xAA\xE3\x80dsolcC\0\x08\x14\x003";
    /// The bytecode of the contract.
    pub static TRUSTFULORACLEINITIALIZER_BYTECODE: ::ethers::core::types::Bytes = ::ethers::core::types::Bytes::from_static(
        __BYTECODE,
    );
    #[rustfmt::skip]
    const __DEPLOYED_BYTECODE: &[u8] = b"`\x80`@R4\x80\x15`\x0FW`\0\x80\xFD[P`\x046\x10`(W`\x005`\xE0\x1C\x80c}\xC0\xD1\xD0\x14`-W[`\0\x80\xFD[`\0T`?\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01`@Q\x80\x91\x03\x90\xF3\xFE\xA2dipfsX\"\x12 mA\x17\x80\xC2\xD0\xB1\xC7\x13\xBD\xBA\xCAa\x19\xFEI\t\xEB\xD2]M\x8F\x9E\x1A\x86\x9C\n\"\x90\x0CgZdsolcC\0\x08\x14\x003";
    /// The deployed bytecode of the contract.
    pub static TRUSTFULORACLEINITIALIZER_DEPLOYED_BYTECODE: ::ethers::core::types::Bytes = ::ethers::core::types::Bytes::from_static(
        __DEPLOYED_BYTECODE,
    );
    pub struct TrustfulOracleInitializer<M>(::ethers::contract::Contract<M>);
    impl<M> ::core::clone::Clone for TrustfulOracleInitializer<M> {
        fn clone(&self) -> Self {
            Self(::core::clone::Clone::clone(&self.0))
        }
    }
    impl<M> ::core::ops::Deref for TrustfulOracleInitializer<M> {
        type Target = ::ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M> ::core::ops::DerefMut for TrustfulOracleInitializer<M> {
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl<M> ::core::fmt::Debug for TrustfulOracleInitializer<M> {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple(::core::stringify!(TrustfulOracleInitializer))
                .field(&self.address())
                .finish()
        }
    }
    impl<M: ::ethers::providers::Middleware> TrustfulOracleInitializer<M> {
        /// Creates a new contract instance with the specified `ethers` client at
        /// `address`. The contract derefs to a `ethers::Contract` object.
        pub fn new<T: Into<::ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            Self(
                ::ethers::contract::Contract::new(
                    address.into(),
                    TRUSTFULORACLEINITIALIZER_ABI.clone(),
                    client,
                ),
            )
        }
        /// Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it.
        /// Returns a new instance of a deployer that returns an instance of this contract after sending the transaction
        ///
        /// Notes:
        /// - If there are no constructor arguments, you should pass `()` as the argument.
        /// - The default poll duration is 7 seconds.
        /// - The default number of confirmations is 1 block.
        ///
        ///
        /// # Example
        ///
        /// Generate contract bindings with `abigen!` and deploy a new contract instance.
        ///
        /// *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact.
        ///
        /// ```ignore
        /// # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {
        ///     abigen!(Greeter, "../greeter.json");
        ///
        ///    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();
        ///    let msg = greeter_contract.greet().call().await.unwrap();
        /// # }
        /// ```
        pub fn deploy<T: ::ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::core::result::Result<
            ::ethers::contract::builders::ContractDeployer<M, Self>,
            ::ethers::contract::ContractError<M>,
        > {
            let factory = ::ethers::contract::ContractFactory::new(
                TRUSTFULORACLEINITIALIZER_ABI.clone(),
                TRUSTFULORACLEINITIALIZER_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ::ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        ///Calls the contract's `oracle` (0x7dc0d1d0) function
        pub fn oracle(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::ethers::core::types::Address,
        > {
            self.0
                .method_hash([125, 192, 209, 208], ())
                .expect("method not found (this should never happen)")
        }
        ///Gets the contract's `NewTrustfulOracle` event
        pub fn new_trustful_oracle_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<
            ::std::sync::Arc<M>,
            M,
            NewTrustfulOracleFilter,
        > {
            self.0.event()
        }
        /// Returns an `Event` builder for all the events of this contract.
        pub fn events(
            &self,
        ) -> ::ethers::contract::builders::Event<
            ::std::sync::Arc<M>,
            M,
            NewTrustfulOracleFilter,
        > {
            self.0.event_with_filter(::core::default::Default::default())
        }
    }
    impl<M: ::ethers::providers::Middleware> From<::ethers::contract::Contract<M>>
    for TrustfulOracleInitializer<M> {
        fn from(contract: ::ethers::contract::Contract<M>) -> Self {
            Self::new(contract.address(), contract.client())
        }
    }
    #[derive(
        Clone,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethevent(name = "NewTrustfulOracle", abi = "NewTrustfulOracle(address)")]
    pub struct NewTrustfulOracleFilter {
        pub oracle_address: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `oracle` function with signature `oracle()` and selector `0x7dc0d1d0`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "oracle", abi = "oracle()")]
    pub struct OracleCall;
    ///Container type for all return fields from the `oracle` function with signature `oracle()` and selector `0x7dc0d1d0`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct OracleReturn(pub ::ethers::core::types::Address);
}
