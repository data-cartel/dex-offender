pub use wallet_deployer::*;
/// This module was auto-generated with ethers-rs Abigen.
/// More information at: <https://github.com/gakonst/ethers-rs>
#[allow(
    clippy::enum_variant_names,
    clippy::too_many_arguments,
    clippy::upper_case_acronyms,
    clippy::type_complexity,
    dead_code,
    non_camel_case_types,
)]
pub mod wallet_deployer {
    #[rustfmt::skip]
    const __ABI: &str = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gem\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"Boom\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"u\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"can\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"chief\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"copy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"wat\",\"type\":\"bytes\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"drop\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"aim\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"fact\",\"outputs\":[{\"internalType\":\"contract IGnosisSafeProxyFactory\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"gem\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"mom\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"pay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mom\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"rule\",\"outputs\":[]}]";
    ///The parsed JSON ABI of the contract.
    pub static WALLETDEPLOYER_ABI: ::ethers::contract::Lazy<::ethers::core::abi::Abi> = ::ethers::contract::Lazy::new(||
    ::ethers::core::utils::__serde_json::from_str(__ABI).expect("ABI is always valid"));
    #[rustfmt::skip]
    const __BYTECODE: &[u8] = &[
        96,
        192,
        96,
        64,
        82,
        51,
        96,
        128,
        82,
        52,
        128,
        21,
        97,
        0,
        20,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        64,
        81,
        97,
        6,
        196,
        56,
        3,
        128,
        97,
        6,
        196,
        131,
        57,
        129,
        1,
        96,
        64,
        129,
        144,
        82,
        97,
        0,
        51,
        145,
        97,
        0,
        68,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        96,
        160,
        82,
        97,
        0,
        116,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        0,
        86,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        129,
        20,
        97,
        0,
        109,
        87,
        96,
        0,
        128,
        253,
        91,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        96,
        128,
        81,
        96,
        160,
        81,
        97,
        6,
        29,
        97,
        0,
        167,
        96,
        0,
        57,
        96,
        0,
        129,
        129,
        97,
        1,
        106,
        1,
        82,
        97,
        2,
        171,
        1,
        82,
        96,
        0,
        129,
        129,
        97,
        1,
        145,
        1,
        82,
        97,
        3,
        133,
        1,
        82,
        97,
        6,
        29,
        96,
        0,
        243,
        254,
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        4,
        54,
        16,
        97,
        0,
        146,
        87,
        96,
        0,
        53,
        96,
        224,
        28,
        128,
        99,
        96,
        114,
        106,
        187,
        17,
        97,
        0,
        102,
        87,
        128,
        99,
        96,
        114,
        106,
        187,
        20,
        97,
        1,
        26,
        87,
        128,
        99,
        115,
        227,
        206,
        128,
        20,
        97,
        1,
        53,
        87,
        128,
        99,
        123,
        4,
        88,
        101,
        20,
        97,
        1,
        80,
        87,
        128,
        99,
        123,
        210,
        190,
        167,
        20,
        97,
        1,
        101,
        87,
        128,
        99,
        255,
        216,
        100,
        211,
        20,
        97,
        1,
        140,
        87,
        96,
        0,
        128,
        253,
        91,
        128,
        98,
        181,
        35,
        149,
        20,
        97,
        0,
        151,
        87,
        128,
        99,
        27,
        146,
        101,
        184,
        20,
        97,
        0,
        199,
        87,
        128,
        99,
        61,
        247,
        200,
        109,
        20,
        97,
        0,
        228,
        87,
        128,
        99,
        69,
        56,
        196,
        235,
        20,
        97,
        0,
        247,
        87,
        91,
        96,
        0,
        128,
        253,
        91,
        97,
        0,
        170,
        97,
        0,
        165,
        54,
        96,
        4,
        97,
        4,
        36,
        86,
        91,
        97,
        1,
        179,
        86,
        91,
        96,
        64,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        144,
        145,
        22,
        129,
        82,
        96,
        32,
        1,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        243,
        91,
        97,
        0,
        214,
        103,
        13,
        224,
        182,
        179,
        167,
        100,
        0,
        0,
        129,
        86,
        91,
        96,
        64,
        81,
        144,
        129,
        82,
        96,
        32,
        1,
        97,
        0,
        190,
        86,
        91,
        96,
        0,
        84,
        97,
        0,
        170,
        144,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        129,
        86,
        91,
        97,
        1,
        10,
        97,
        1,
        5,
        54,
        96,
        4,
        97,
        4,
        237,
        86,
        91,
        97,
        3,
        38,
        86,
        91,
        96,
        64,
        81,
        144,
        21,
        21,
        129,
        82,
        96,
        32,
        1,
        97,
        0,
        190,
        86,
        91,
        97,
        0,
        170,
        115,
        52,
        207,
        172,
        100,
        111,
        48,
        19,
        86,
        250,
        168,
        178,
        30,
        148,
        34,
        126,
        53,
        131,
        254,
        63,
        95,
        129,
        86,
        91,
        97,
        0,
        170,
        115,
        118,
        226,
        207,
        193,
        245,
        250,
        143,
        106,
        91,
        63,
        196,
        200,
        244,
        120,
        143,
        1,
        22,
        134,
        31,
        155,
        129,
        86,
        91,
        97,
        1,
        99,
        97,
        1,
        94,
        54,
        96,
        4,
        97,
        5,
        38,
        86,
        91,
        97,
        3,
        122,
        86,
        91,
        0,
        91,
        97,
        0,
        170,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        129,
        86,
        91,
        97,
        0,
        170,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        129,
        86,
        91,
        96,
        64,
        81,
        99,
        97,
        182,
        154,
        189,
        96,
        224,
        27,
        129,
        82,
        96,
        0,
        144,
        115,
        118,
        226,
        207,
        193,
        245,
        250,
        143,
        106,
        91,
        63,
        196,
        200,
        244,
        120,
        143,
        1,
        22,
        134,
        31,
        155,
        144,
        99,
        97,
        182,
        154,
        189,
        144,
        97,
        2,
        3,
        144,
        115,
        52,
        207,
        172,
        100,
        111,
        48,
        19,
        86,
        250,
        168,
        178,
        30,
        148,
        34,
        126,
        53,
        131,
        254,
        63,
        95,
        144,
        134,
        144,
        96,
        4,
        1,
        97,
        5,
        74,
        86,
        91,
        96,
        32,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        96,
        0,
        135,
        90,
        241,
        21,
        128,
        21,
        97,
        2,
        34,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        80,
        80,
        96,
        64,
        81,
        61,
        96,
        31,
        25,
        96,
        31,
        130,
        1,
        22,
        130,
        1,
        128,
        96,
        64,
        82,
        80,
        129,
        1,
        144,
        97,
        2,
        70,
        145,
        144,
        97,
        5,
        168,
        86,
        91,
        96,
        0,
        84,
        144,
        145,
        80,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        21,
        128,
        21,
        144,
        97,
        2,
        106,
        87,
        80,
        97,
        2,
        104,
        51,
        130,
        97,
        3,
        38,
        86,
        91,
        21,
        91,
        21,
        97,
        2,
        136,
        87,
        96,
        64,
        81,
        99,
        31,
        9,
        254,
        185,
        96,
        226,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        64,
        81,
        99,
        169,
        5,
        156,
        187,
        96,
        224,
        27,
        129,
        82,
        51,
        96,
        4,
        130,
        1,
        82,
        103,
        13,
        224,
        182,
        179,
        167,
        100,
        0,
        0,
        96,
        36,
        130,
        1,
        82,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        144,
        99,
        169,
        5,
        156,
        187,
        144,
        96,
        68,
        1,
        96,
        32,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        96,
        0,
        135,
        90,
        241,
        21,
        128,
        21,
        97,
        2,
        252,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        80,
        80,
        96,
        64,
        81,
        61,
        96,
        31,
        25,
        96,
        31,
        130,
        1,
        22,
        130,
        1,
        128,
        96,
        64,
        82,
        80,
        129,
        1,
        144,
        97,
        3,
        32,
        145,
        144,
        97,
        5,
        197,
        86,
        91,
        80,
        145,
        144,
        80,
        86,
        91,
        96,
        0,
        128,
        84,
        128,
        59,
        97,
        3,
        50,
        87,
        0,
        91,
        96,
        64,
        81,
        96,
        68,
        129,
        1,
        96,
        64,
        82,
        99,
        69,
        56,
        196,
        235,
        96,
        224,
        27,
        129,
        82,
        132,
        96,
        4,
        130,
        1,
        82,
        131,
        96,
        36,
        130,
        1,
        82,
        96,
        32,
        129,
        96,
        68,
        131,
        133,
        90,
        250,
        97,
        3,
        97,
        87,
        0,
        91,
        128,
        81,
        21,
        61,
        21,
        25,
        22,
        21,
        97,
        3,
        111,
        87,
        0,
        91,
        80,
        96,
        1,
        148,
        147,
        80,
        80,
        80,
        80,
        86,
        91,
        51,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        22,
        20,
        21,
        128,
        97,
        3,
        185,
        87,
        80,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        21,
        91,
        128,
        97,
        3,
        206,
        87,
        80,
        96,
        0,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        21,
        21,
        91,
        21,
        97,
        3,
        236,
        87,
        96,
        64,
        81,
        99,
        31,
        9,
        254,
        185,
        96,
        226,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        0,
        128,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        25,
        22,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        146,
        144,
        146,
        22,
        145,
        144,
        145,
        23,
        144,
        85,
        86,
        91,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        65,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        4,
        54,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        53,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        128,
        130,
        17,
        21,
        97,
        4,
        78,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        132,
        1,
        145,
        80,
        132,
        96,
        31,
        131,
        1,
        18,
        97,
        4,
        98,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        53,
        129,
        129,
        17,
        21,
        97,
        4,
        116,
        87,
        97,
        4,
        116,
        97,
        4,
        14,
        86,
        91,
        96,
        64,
        81,
        96,
        31,
        130,
        1,
        96,
        31,
        25,
        144,
        129,
        22,
        96,
        63,
        1,
        22,
        129,
        1,
        144,
        131,
        130,
        17,
        129,
        131,
        16,
        23,
        21,
        97,
        4,
        156,
        87,
        97,
        4,
        156,
        97,
        4,
        14,
        86,
        91,
        129,
        96,
        64,
        82,
        130,
        129,
        82,
        135,
        96,
        32,
        132,
        135,
        1,
        1,
        17,
        21,
        97,
        4,
        181,
        87,
        96,
        0,
        128,
        253,
        91,
        130,
        96,
        32,
        134,
        1,
        96,
        32,
        131,
        1,
        55,
        96,
        0,
        146,
        129,
        1,
        96,
        32,
        1,
        146,
        144,
        146,
        82,
        80,
        149,
        148,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        129,
        20,
        97,
        4,
        234,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        64,
        131,
        133,
        3,
        18,
        21,
        97,
        5,
        0,
        87,
        96,
        0,
        128,
        253,
        91,
        130,
        53,
        97,
        5,
        11,
        129,
        97,
        4,
        213,
        86,
        91,
        145,
        80,
        96,
        32,
        131,
        1,
        53,
        97,
        5,
        27,
        129,
        97,
        4,
        213,
        86,
        91,
        128,
        145,
        80,
        80,
        146,
        80,
        146,
        144,
        80,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        5,
        56,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        53,
        97,
        5,
        67,
        129,
        97,
        4,
        213,
        86,
        91,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        96,
        1,
        128,
        96,
        160,
        27,
        3,
        131,
        22,
        129,
        82,
        96,
        0,
        96,
        32,
        96,
        64,
        129,
        132,
        1,
        82,
        131,
        81,
        128,
        96,
        64,
        133,
        1,
        82,
        96,
        0,
        91,
        129,
        129,
        16,
        21,
        97,
        5,
        134,
        87,
        133,
        129,
        1,
        131,
        1,
        81,
        133,
        130,
        1,
        96,
        96,
        1,
        82,
        130,
        1,
        97,
        5,
        106,
        86,
        91,
        80,
        96,
        0,
        96,
        96,
        130,
        134,
        1,
        1,
        82,
        96,
        96,
        96,
        31,
        25,
        96,
        31,
        131,
        1,
        22,
        133,
        1,
        1,
        146,
        80,
        80,
        80,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        5,
        186,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        81,
        97,
        5,
        67,
        129,
        97,
        4,
        213,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        5,
        215,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        81,
        128,
        21,
        21,
        129,
        20,
        97,
        5,
        67,
        87,
        96,
        0,
        128,
        253,
        254,
        162,
        100,
        105,
        112,
        102,
        115,
        88,
        34,
        18,
        32,
        81,
        158,
        140,
        172,
        100,
        248,
        29,
        39,
        155,
        245,
        246,
        143,
        234,
        131,
        184,
        117,
        24,
        130,
        121,
        45,
        25,
        150,
        67,
        167,
        250,
        47,
        244,
        219,
        12,
        127,
        222,
        218,
        100,
        115,
        111,
        108,
        99,
        67,
        0,
        8,
        20,
        0,
        51,
    ];
    ///The bytecode of the contract.
    pub static WALLETDEPLOYER_BYTECODE: ::ethers::core::types::Bytes = ::ethers::core::types::Bytes::from_static(
        __BYTECODE,
    );
    #[rustfmt::skip]
    const __DEPLOYED_BYTECODE: &[u8] = &[
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        4,
        54,
        16,
        97,
        0,
        146,
        87,
        96,
        0,
        53,
        96,
        224,
        28,
        128,
        99,
        96,
        114,
        106,
        187,
        17,
        97,
        0,
        102,
        87,
        128,
        99,
        96,
        114,
        106,
        187,
        20,
        97,
        1,
        26,
        87,
        128,
        99,
        115,
        227,
        206,
        128,
        20,
        97,
        1,
        53,
        87,
        128,
        99,
        123,
        4,
        88,
        101,
        20,
        97,
        1,
        80,
        87,
        128,
        99,
        123,
        210,
        190,
        167,
        20,
        97,
        1,
        101,
        87,
        128,
        99,
        255,
        216,
        100,
        211,
        20,
        97,
        1,
        140,
        87,
        96,
        0,
        128,
        253,
        91,
        128,
        98,
        181,
        35,
        149,
        20,
        97,
        0,
        151,
        87,
        128,
        99,
        27,
        146,
        101,
        184,
        20,
        97,
        0,
        199,
        87,
        128,
        99,
        61,
        247,
        200,
        109,
        20,
        97,
        0,
        228,
        87,
        128,
        99,
        69,
        56,
        196,
        235,
        20,
        97,
        0,
        247,
        87,
        91,
        96,
        0,
        128,
        253,
        91,
        97,
        0,
        170,
        97,
        0,
        165,
        54,
        96,
        4,
        97,
        4,
        36,
        86,
        91,
        97,
        1,
        179,
        86,
        91,
        96,
        64,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        144,
        145,
        22,
        129,
        82,
        96,
        32,
        1,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        243,
        91,
        97,
        0,
        214,
        103,
        13,
        224,
        182,
        179,
        167,
        100,
        0,
        0,
        129,
        86,
        91,
        96,
        64,
        81,
        144,
        129,
        82,
        96,
        32,
        1,
        97,
        0,
        190,
        86,
        91,
        96,
        0,
        84,
        97,
        0,
        170,
        144,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        129,
        86,
        91,
        97,
        1,
        10,
        97,
        1,
        5,
        54,
        96,
        4,
        97,
        4,
        237,
        86,
        91,
        97,
        3,
        38,
        86,
        91,
        96,
        64,
        81,
        144,
        21,
        21,
        129,
        82,
        96,
        32,
        1,
        97,
        0,
        190,
        86,
        91,
        97,
        0,
        170,
        115,
        52,
        207,
        172,
        100,
        111,
        48,
        19,
        86,
        250,
        168,
        178,
        30,
        148,
        34,
        126,
        53,
        131,
        254,
        63,
        95,
        129,
        86,
        91,
        97,
        0,
        170,
        115,
        118,
        226,
        207,
        193,
        245,
        250,
        143,
        106,
        91,
        63,
        196,
        200,
        244,
        120,
        143,
        1,
        22,
        134,
        31,
        155,
        129,
        86,
        91,
        97,
        1,
        99,
        97,
        1,
        94,
        54,
        96,
        4,
        97,
        5,
        38,
        86,
        91,
        97,
        3,
        122,
        86,
        91,
        0,
        91,
        97,
        0,
        170,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        129,
        86,
        91,
        97,
        0,
        170,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        129,
        86,
        91,
        96,
        64,
        81,
        99,
        97,
        182,
        154,
        189,
        96,
        224,
        27,
        129,
        82,
        96,
        0,
        144,
        115,
        118,
        226,
        207,
        193,
        245,
        250,
        143,
        106,
        91,
        63,
        196,
        200,
        244,
        120,
        143,
        1,
        22,
        134,
        31,
        155,
        144,
        99,
        97,
        182,
        154,
        189,
        144,
        97,
        2,
        3,
        144,
        115,
        52,
        207,
        172,
        100,
        111,
        48,
        19,
        86,
        250,
        168,
        178,
        30,
        148,
        34,
        126,
        53,
        131,
        254,
        63,
        95,
        144,
        134,
        144,
        96,
        4,
        1,
        97,
        5,
        74,
        86,
        91,
        96,
        32,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        96,
        0,
        135,
        90,
        241,
        21,
        128,
        21,
        97,
        2,
        34,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        80,
        80,
        96,
        64,
        81,
        61,
        96,
        31,
        25,
        96,
        31,
        130,
        1,
        22,
        130,
        1,
        128,
        96,
        64,
        82,
        80,
        129,
        1,
        144,
        97,
        2,
        70,
        145,
        144,
        97,
        5,
        168,
        86,
        91,
        96,
        0,
        84,
        144,
        145,
        80,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        21,
        128,
        21,
        144,
        97,
        2,
        106,
        87,
        80,
        97,
        2,
        104,
        51,
        130,
        97,
        3,
        38,
        86,
        91,
        21,
        91,
        21,
        97,
        2,
        136,
        87,
        96,
        64,
        81,
        99,
        31,
        9,
        254,
        185,
        96,
        226,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        64,
        81,
        99,
        169,
        5,
        156,
        187,
        96,
        224,
        27,
        129,
        82,
        51,
        96,
        4,
        130,
        1,
        82,
        103,
        13,
        224,
        182,
        179,
        167,
        100,
        0,
        0,
        96,
        36,
        130,
        1,
        82,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        144,
        99,
        169,
        5,
        156,
        187,
        144,
        96,
        68,
        1,
        96,
        32,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        96,
        0,
        135,
        90,
        241,
        21,
        128,
        21,
        97,
        2,
        252,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        80,
        80,
        96,
        64,
        81,
        61,
        96,
        31,
        25,
        96,
        31,
        130,
        1,
        22,
        130,
        1,
        128,
        96,
        64,
        82,
        80,
        129,
        1,
        144,
        97,
        3,
        32,
        145,
        144,
        97,
        5,
        197,
        86,
        91,
        80,
        145,
        144,
        80,
        86,
        91,
        96,
        0,
        128,
        84,
        128,
        59,
        97,
        3,
        50,
        87,
        0,
        91,
        96,
        64,
        81,
        96,
        68,
        129,
        1,
        96,
        64,
        82,
        99,
        69,
        56,
        196,
        235,
        96,
        224,
        27,
        129,
        82,
        132,
        96,
        4,
        130,
        1,
        82,
        131,
        96,
        36,
        130,
        1,
        82,
        96,
        32,
        129,
        96,
        68,
        131,
        133,
        90,
        250,
        97,
        3,
        97,
        87,
        0,
        91,
        128,
        81,
        21,
        61,
        21,
        25,
        22,
        21,
        97,
        3,
        111,
        87,
        0,
        91,
        80,
        96,
        1,
        148,
        147,
        80,
        80,
        80,
        80,
        86,
        91,
        51,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        22,
        20,
        21,
        128,
        97,
        3,
        185,
        87,
        80,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        21,
        91,
        128,
        97,
        3,
        206,
        87,
        80,
        96,
        0,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        21,
        21,
        91,
        21,
        97,
        3,
        236,
        87,
        96,
        64,
        81,
        99,
        31,
        9,
        254,
        185,
        96,
        226,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        0,
        128,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        25,
        22,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        146,
        144,
        146,
        22,
        145,
        144,
        145,
        23,
        144,
        85,
        86,
        91,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        65,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        4,
        54,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        53,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        128,
        130,
        17,
        21,
        97,
        4,
        78,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        132,
        1,
        145,
        80,
        132,
        96,
        31,
        131,
        1,
        18,
        97,
        4,
        98,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        53,
        129,
        129,
        17,
        21,
        97,
        4,
        116,
        87,
        97,
        4,
        116,
        97,
        4,
        14,
        86,
        91,
        96,
        64,
        81,
        96,
        31,
        130,
        1,
        96,
        31,
        25,
        144,
        129,
        22,
        96,
        63,
        1,
        22,
        129,
        1,
        144,
        131,
        130,
        17,
        129,
        131,
        16,
        23,
        21,
        97,
        4,
        156,
        87,
        97,
        4,
        156,
        97,
        4,
        14,
        86,
        91,
        129,
        96,
        64,
        82,
        130,
        129,
        82,
        135,
        96,
        32,
        132,
        135,
        1,
        1,
        17,
        21,
        97,
        4,
        181,
        87,
        96,
        0,
        128,
        253,
        91,
        130,
        96,
        32,
        134,
        1,
        96,
        32,
        131,
        1,
        55,
        96,
        0,
        146,
        129,
        1,
        96,
        32,
        1,
        146,
        144,
        146,
        82,
        80,
        149,
        148,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        129,
        20,
        97,
        4,
        234,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        64,
        131,
        133,
        3,
        18,
        21,
        97,
        5,
        0,
        87,
        96,
        0,
        128,
        253,
        91,
        130,
        53,
        97,
        5,
        11,
        129,
        97,
        4,
        213,
        86,
        91,
        145,
        80,
        96,
        32,
        131,
        1,
        53,
        97,
        5,
        27,
        129,
        97,
        4,
        213,
        86,
        91,
        128,
        145,
        80,
        80,
        146,
        80,
        146,
        144,
        80,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        5,
        56,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        53,
        97,
        5,
        67,
        129,
        97,
        4,
        213,
        86,
        91,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        96,
        1,
        128,
        96,
        160,
        27,
        3,
        131,
        22,
        129,
        82,
        96,
        0,
        96,
        32,
        96,
        64,
        129,
        132,
        1,
        82,
        131,
        81,
        128,
        96,
        64,
        133,
        1,
        82,
        96,
        0,
        91,
        129,
        129,
        16,
        21,
        97,
        5,
        134,
        87,
        133,
        129,
        1,
        131,
        1,
        81,
        133,
        130,
        1,
        96,
        96,
        1,
        82,
        130,
        1,
        97,
        5,
        106,
        86,
        91,
        80,
        96,
        0,
        96,
        96,
        130,
        134,
        1,
        1,
        82,
        96,
        96,
        96,
        31,
        25,
        96,
        31,
        131,
        1,
        22,
        133,
        1,
        1,
        146,
        80,
        80,
        80,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        5,
        186,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        81,
        97,
        5,
        67,
        129,
        97,
        4,
        213,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        5,
        215,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        81,
        128,
        21,
        21,
        129,
        20,
        97,
        5,
        67,
        87,
        96,
        0,
        128,
        253,
        254,
        162,
        100,
        105,
        112,
        102,
        115,
        88,
        34,
        18,
        32,
        81,
        158,
        140,
        172,
        100,
        248,
        29,
        39,
        155,
        245,
        246,
        143,
        234,
        131,
        184,
        117,
        24,
        130,
        121,
        45,
        25,
        150,
        67,
        167,
        250,
        47,
        244,
        219,
        12,
        127,
        222,
        218,
        100,
        115,
        111,
        108,
        99,
        67,
        0,
        8,
        20,
        0,
        51,
    ];
    ///The deployed bytecode of the contract.
    pub static WALLETDEPLOYER_DEPLOYED_BYTECODE: ::ethers::core::types::Bytes = ::ethers::core::types::Bytes::from_static(
        __DEPLOYED_BYTECODE,
    );
    pub struct WalletDeployer<M>(::ethers::contract::Contract<M>);
    impl<M> ::core::clone::Clone for WalletDeployer<M> {
        fn clone(&self) -> Self {
            Self(::core::clone::Clone::clone(&self.0))
        }
    }
    impl<M> ::core::ops::Deref for WalletDeployer<M> {
        type Target = ::ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M> ::core::ops::DerefMut for WalletDeployer<M> {
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl<M> ::core::fmt::Debug for WalletDeployer<M> {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple(stringify!(WalletDeployer)).field(&self.address()).finish()
        }
    }
    impl<M: ::ethers::providers::Middleware> WalletDeployer<M> {
        /// Creates a new contract instance with the specified `ethers` client at
        /// `address`. The contract derefs to a `ethers::Contract` object.
        pub fn new<T: Into<::ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            Self(
                ::ethers::contract::Contract::new(
                    address.into(),
                    WALLETDEPLOYER_ABI.clone(),
                    client,
                ),
            )
        }
        /// Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it.
        /// Returns a new instance of a deployer that returns an instance of this contract after sending the transaction
        ///
        /// Notes:
        /// - If there are no constructor arguments, you should pass `()` as the argument.
        /// - The default poll duration is 7 seconds.
        /// - The default number of confirmations is 1 block.
        ///
        ///
        /// # Example
        ///
        /// Generate contract bindings with `abigen!` and deploy a new contract instance.
        ///
        /// *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact.
        ///
        /// ```ignore
        /// # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {
        ///     abigen!(Greeter, "../greeter.json");
        ///
        ///    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();
        ///    let msg = greeter_contract.greet().call().await.unwrap();
        /// # }
        /// ```
        pub fn deploy<T: ::ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::core::result::Result<
            ::ethers::contract::builders::ContractDeployer<M, Self>,
            ::ethers::contract::ContractError<M>,
        > {
            let factory = ::ethers::contract::ContractFactory::new(
                WALLETDEPLOYER_ABI.clone(),
                WALLETDEPLOYER_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ::ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        ///Calls the contract's `can` (0x4538c4eb) function
        pub fn can(
            &self,
            u: ::ethers::core::types::Address,
            a: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([69, 56, 196, 235], (u, a))
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `chief` (0xffd864d3) function
        pub fn chief(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::ethers::core::types::Address,
        > {
            self.0
                .method_hash([255, 216, 100, 211], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `copy` (0x60726abb) function
        pub fn copy(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::ethers::core::types::Address,
        > {
            self.0
                .method_hash([96, 114, 106, 187], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `drop` (0x00b52395) function
        pub fn drop(
            &self,
            wat: ::ethers::core::types::Bytes,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::ethers::core::types::Address,
        > {
            self.0
                .method_hash([0, 181, 35, 149], wat)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `fact` (0x73e3ce80) function
        pub fn fact(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::ethers::core::types::Address,
        > {
            self.0
                .method_hash([115, 227, 206, 128], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `gem` (0x7bd2bea7) function
        pub fn gem(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::ethers::core::types::Address,
        > {
            self.0
                .method_hash([123, 210, 190, 167], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `mom` (0x3df7c86d) function
        pub fn mom(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::ethers::core::types::Address,
        > {
            self.0
                .method_hash([61, 247, 200, 109], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `pay` (0x1b9265b8) function
        pub fn pay(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([27, 146, 101, 184], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `rule` (0x7b045865) function
        pub fn rule(
            &self,
            mom: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([123, 4, 88, 101], mom)
                .expect("method not found (this should never happen)")
        }
    }
    impl<M: ::ethers::providers::Middleware> From<::ethers::contract::Contract<M>>
    for WalletDeployer<M> {
        fn from(contract: ::ethers::contract::Contract<M>) -> Self {
            Self::new(contract.address(), contract.client())
        }
    }
    ///Custom Error type `Boom` with signature `Boom()` and selector `0x7c27fae4`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(name = "Boom", abi = "Boom()")]
    pub struct Boom;
    ///Container type for all input parameters for the `can` function with signature `can(address,address)` and selector `0x4538c4eb`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "can", abi = "can(address,address)")]
    pub struct CanCall {
        pub u: ::ethers::core::types::Address,
        pub a: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `chief` function with signature `chief()` and selector `0xffd864d3`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "chief", abi = "chief()")]
    pub struct ChiefCall;
    ///Container type for all input parameters for the `copy` function with signature `copy()` and selector `0x60726abb`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "copy", abi = "copy()")]
    pub struct CopyCall;
    ///Container type for all input parameters for the `drop` function with signature `drop(bytes)` and selector `0x00b52395`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "drop", abi = "drop(bytes)")]
    pub struct DropCall {
        pub wat: ::ethers::core::types::Bytes,
    }
    ///Container type for all input parameters for the `fact` function with signature `fact()` and selector `0x73e3ce80`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "fact", abi = "fact()")]
    pub struct FactCall;
    ///Container type for all input parameters for the `gem` function with signature `gem()` and selector `0x7bd2bea7`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "gem", abi = "gem()")]
    pub struct GemCall;
    ///Container type for all input parameters for the `mom` function with signature `mom()` and selector `0x3df7c86d`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "mom", abi = "mom()")]
    pub struct MomCall;
    ///Container type for all input parameters for the `pay` function with signature `pay()` and selector `0x1b9265b8`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "pay", abi = "pay()")]
    pub struct PayCall;
    ///Container type for all input parameters for the `rule` function with signature `rule(address)` and selector `0x7b045865`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "rule", abi = "rule(address)")]
    pub struct RuleCall {
        pub mom: ::ethers::core::types::Address,
    }
    ///Container type for all of the contract's call
    #[derive(Clone, ::ethers::contract::EthAbiType, Debug, PartialEq, Eq, Hash)]
    pub enum WalletDeployerCalls {
        Can(CanCall),
        Chief(ChiefCall),
        Copy(CopyCall),
        Drop(DropCall),
        Fact(FactCall),
        Gem(GemCall),
        Mom(MomCall),
        Pay(PayCall),
        Rule(RuleCall),
    }
    impl ::ethers::core::abi::AbiDecode for WalletDeployerCalls {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::core::result::Result<Self, ::ethers::core::abi::AbiError> {
            let data = data.as_ref();
            if let Ok(decoded)
                = <CanCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::Can(decoded));
            }
            if let Ok(decoded)
                = <ChiefCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::Chief(decoded));
            }
            if let Ok(decoded)
                = <CopyCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::Copy(decoded));
            }
            if let Ok(decoded)
                = <DropCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::Drop(decoded));
            }
            if let Ok(decoded)
                = <FactCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::Fact(decoded));
            }
            if let Ok(decoded)
                = <GemCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::Gem(decoded));
            }
            if let Ok(decoded)
                = <MomCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::Mom(decoded));
            }
            if let Ok(decoded)
                = <PayCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::Pay(decoded));
            }
            if let Ok(decoded)
                = <RuleCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::Rule(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ::ethers::core::abi::AbiEncode for WalletDeployerCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                Self::Can(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::Chief(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::Copy(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::Drop(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::Fact(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::Gem(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::Mom(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::Pay(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::Rule(element) => ::ethers::core::abi::AbiEncode::encode(element),
            }
        }
    }
    impl ::core::fmt::Display for WalletDeployerCalls {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                Self::Can(element) => ::core::fmt::Display::fmt(element, f),
                Self::Chief(element) => ::core::fmt::Display::fmt(element, f),
                Self::Copy(element) => ::core::fmt::Display::fmt(element, f),
                Self::Drop(element) => ::core::fmt::Display::fmt(element, f),
                Self::Fact(element) => ::core::fmt::Display::fmt(element, f),
                Self::Gem(element) => ::core::fmt::Display::fmt(element, f),
                Self::Mom(element) => ::core::fmt::Display::fmt(element, f),
                Self::Pay(element) => ::core::fmt::Display::fmt(element, f),
                Self::Rule(element) => ::core::fmt::Display::fmt(element, f),
            }
        }
    }
    impl ::core::convert::From<CanCall> for WalletDeployerCalls {
        fn from(value: CanCall) -> Self {
            Self::Can(value)
        }
    }
    impl ::core::convert::From<ChiefCall> for WalletDeployerCalls {
        fn from(value: ChiefCall) -> Self {
            Self::Chief(value)
        }
    }
    impl ::core::convert::From<CopyCall> for WalletDeployerCalls {
        fn from(value: CopyCall) -> Self {
            Self::Copy(value)
        }
    }
    impl ::core::convert::From<DropCall> for WalletDeployerCalls {
        fn from(value: DropCall) -> Self {
            Self::Drop(value)
        }
    }
    impl ::core::convert::From<FactCall> for WalletDeployerCalls {
        fn from(value: FactCall) -> Self {
            Self::Fact(value)
        }
    }
    impl ::core::convert::From<GemCall> for WalletDeployerCalls {
        fn from(value: GemCall) -> Self {
            Self::Gem(value)
        }
    }
    impl ::core::convert::From<MomCall> for WalletDeployerCalls {
        fn from(value: MomCall) -> Self {
            Self::Mom(value)
        }
    }
    impl ::core::convert::From<PayCall> for WalletDeployerCalls {
        fn from(value: PayCall) -> Self {
            Self::Pay(value)
        }
    }
    impl ::core::convert::From<RuleCall> for WalletDeployerCalls {
        fn from(value: RuleCall) -> Self {
            Self::Rule(value)
        }
    }
    ///Container type for all return fields from the `can` function with signature `can(address,address)` and selector `0x4538c4eb`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct CanReturn(pub bool);
    ///Container type for all return fields from the `chief` function with signature `chief()` and selector `0xffd864d3`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct ChiefReturn(pub ::ethers::core::types::Address);
    ///Container type for all return fields from the `copy` function with signature `copy()` and selector `0x60726abb`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct CopyReturn(pub ::ethers::core::types::Address);
    ///Container type for all return fields from the `drop` function with signature `drop(bytes)` and selector `0x00b52395`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct DropReturn {
        pub aim: ::ethers::core::types::Address,
    }
    ///Container type for all return fields from the `fact` function with signature `fact()` and selector `0x73e3ce80`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct FactReturn(pub ::ethers::core::types::Address);
    ///Container type for all return fields from the `gem` function with signature `gem()` and selector `0x7bd2bea7`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct GemReturn(pub ::ethers::core::types::Address);
    ///Container type for all return fields from the `mom` function with signature `mom()` and selector `0x3df7c86d`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct MomReturn(pub ::ethers::core::types::Address);
    ///Container type for all return fields from the `pay` function with signature `pay()` and selector `0x1b9265b8`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct PayReturn(pub ::ethers::core::types::U256);
}
