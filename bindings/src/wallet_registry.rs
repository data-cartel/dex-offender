pub use wallet_registry::*;
/// This module was auto-generated with ethers-rs Abigen.
/// More information at: <https://github.com/gakonst/ethers-rs>
#[allow(
    clippy::enum_variant_names,
    clippy::too_many_arguments,
    clippy::upper_case_acronyms,
    clippy::type_complexity,
    dead_code,
    non_camel_case_types,
)]
pub mod wallet_registry {
    #[rustfmt::skip]
    const __ABI: &str = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"masterCopyAddress\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"walletFactoryAddress\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address[]\",\"name\":\"initialBeneficiaries\",\"type\":\"address[]\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"CallerNotFactory\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"FakeMasterCopy\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fallbackManager\",\"type\":\"address\",\"components\":[]}],\"type\":\"error\",\"name\":\"InvalidFallbackManager\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"InvalidInitialization\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\",\"components\":[]}],\"type\":\"error\",\"name\":\"InvalidOwnersCount\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\",\"components\":[]}],\"type\":\"error\",\"name\":\"InvalidThreshold\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"NewOwnerIsZeroAddress\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"NoHandoverRequest\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"NotEnoughFunds\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"OwnerIsNotABeneficiary\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"Unauthorized\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pendingOwner\",\"type\":\"address\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"OwnershipHandoverCanceled\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pendingOwner\",\"type\":\"address\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"OwnershipHandoverRequested\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"OwnershipTransferred\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"addBeneficiary\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"beneficiaries\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\",\"name\":\"cancelOwnershipHandover\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pendingOwner\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"payable\",\"type\":\"function\",\"name\":\"completeOwnershipHandover\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"masterCopy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"result\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pendingOwner\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"ownershipHandoverExpiresAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"ownershipHandoverValidFor\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"contract GnosisSafeProxy\",\"name\":\"proxy\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"singleton\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"bytes\",\"name\":\"initializer\",\"type\":\"bytes\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"proxyCreated\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\",\"name\":\"renounceOwnership\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\",\"name\":\"requestOwnershipHandover\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"payable\",\"type\":\"function\",\"name\":\"transferOwnership\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"walletFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"wallets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]}]";
    ///The parsed JSON ABI of the contract.
    pub static WALLETREGISTRY_ABI: ::ethers::contract::Lazy<::ethers::core::abi::Abi> = ::ethers::contract::Lazy::new(||
    ::ethers::core::utils::__serde_json::from_str(__ABI).expect("ABI is always valid"));
    #[rustfmt::skip]
    const __BYTECODE: &[u8] = &[
        96,
        224,
        96,
        64,
        82,
        52,
        128,
        21,
        98,
        0,
        0,
        17,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        64,
        81,
        98,
        0,
        15,
        88,
        56,
        3,
        128,
        98,
        0,
        15,
        88,
        131,
        57,
        129,
        1,
        96,
        64,
        129,
        144,
        82,
        98,
        0,
        0,
        52,
        145,
        98,
        0,
        1,
        52,
        86,
        91,
        98,
        0,
        0,
        63,
        51,
        98,
        0,
        0,
        197,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        128,
        133,
        22,
        96,
        128,
        82,
        131,
        129,
        22,
        96,
        160,
        82,
        130,
        22,
        96,
        192,
        82,
        96,
        0,
        91,
        129,
        81,
        129,
        16,
        21,
        98,
        0,
        0,
        186,
        87,
        96,
        1,
        96,
        0,
        128,
        132,
        132,
        129,
        81,
        129,
        16,
        98,
        0,
        0,
        127,
        87,
        98,
        0,
        0,
        127,
        98,
        0,
        2,
        63,
        86,
        91,
        96,
        32,
        144,
        129,
        2,
        145,
        144,
        145,
        1,
        129,
        1,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        130,
        82,
        129,
        1,
        145,
        144,
        145,
        82,
        96,
        64,
        1,
        96,
        0,
        32,
        128,
        84,
        96,
        255,
        25,
        22,
        145,
        21,
        21,
        145,
        144,
        145,
        23,
        144,
        85,
        96,
        1,
        1,
        98,
        0,
        0,
        91,
        86,
        91,
        80,
        80,
        80,
        80,
        80,
        98,
        0,
        2,
        85,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        99,
        139,
        120,
        198,
        216,
        25,
        129,
        144,
        85,
        128,
        96,
        0,
        127,
        139,
        224,
        7,
        156,
        83,
        22,
        89,
        20,
        19,
        68,
        205,
        31,
        208,
        164,
        242,
        132,
        25,
        73,
        127,
        151,
        34,
        163,
        218,
        175,
        227,
        180,
        24,
        111,
        107,
        100,
        87,
        224,
        129,
        128,
        163,
        80,
        86,
        91,
        128,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        129,
        20,
        98,
        0,
        1,
        25,
        87,
        96,
        0,
        128,
        253,
        91,
        145,
        144,
        80,
        86,
        91,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        65,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        96,
        0,
        128,
        96,
        0,
        128,
        96,
        128,
        133,
        135,
        3,
        18,
        21,
        98,
        0,
        1,
        75,
        87,
        96,
        0,
        128,
        253,
        91,
        98,
        0,
        1,
        86,
        133,
        98,
        0,
        1,
        1,
        86,
        91,
        147,
        80,
        96,
        32,
        98,
        0,
        1,
        103,
        129,
        135,
        1,
        98,
        0,
        1,
        1,
        86,
        91,
        147,
        80,
        98,
        0,
        1,
        119,
        96,
        64,
        135,
        1,
        98,
        0,
        1,
        1,
        86,
        91,
        96,
        96,
        135,
        1,
        81,
        144,
        147,
        80,
        96,
        1,
        96,
        1,
        96,
        64,
        27,
        3,
        128,
        130,
        17,
        21,
        98,
        0,
        1,
        149,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        136,
        1,
        145,
        80,
        136,
        96,
        31,
        131,
        1,
        18,
        98,
        0,
        1,
        170,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        81,
        129,
        129,
        17,
        21,
        98,
        0,
        1,
        191,
        87,
        98,
        0,
        1,
        191,
        98,
        0,
        1,
        30,
        86,
        91,
        128,
        96,
        5,
        27,
        96,
        64,
        81,
        96,
        31,
        25,
        96,
        63,
        131,
        1,
        22,
        129,
        1,
        129,
        129,
        16,
        133,
        130,
        17,
        23,
        21,
        98,
        0,
        1,
        231,
        87,
        98,
        0,
        1,
        231,
        98,
        0,
        1,
        30,
        86,
        91,
        96,
        64,
        82,
        145,
        130,
        82,
        132,
        130,
        1,
        146,
        80,
        131,
        129,
        1,
        133,
        1,
        145,
        139,
        131,
        17,
        21,
        98,
        0,
        2,
        6,
        87,
        96,
        0,
        128,
        253,
        91,
        147,
        133,
        1,
        147,
        91,
        130,
        133,
        16,
        21,
        98,
        0,
        2,
        47,
        87,
        98,
        0,
        2,
        31,
        133,
        98,
        0,
        1,
        1,
        86,
        91,
        132,
        82,
        147,
        133,
        1,
        147,
        146,
        133,
        1,
        146,
        98,
        0,
        2,
        11,
        86,
        91,
        152,
        155,
        151,
        154,
        80,
        149,
        152,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        50,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        96,
        128,
        81,
        96,
        160,
        81,
        96,
        192,
        81,
        97,
        12,
        183,
        98,
        0,
        2,
        161,
        96,
        0,
        57,
        96,
        0,
        129,
        129,
        97,
        2,
        177,
        1,
        82,
        129,
        129,
        97,
        3,
        51,
        1,
        82,
        97,
        6,
        168,
        1,
        82,
        96,
        0,
        129,
        129,
        97,
        2,
        57,
        1,
        82,
        97,
        3,
        209,
        1,
        82,
        96,
        0,
        129,
        129,
        97,
        2,
        5,
        1,
        82,
        97,
        4,
        17,
        1,
        82,
        97,
        12,
        183,
        96,
        0,
        243,
        254,
        96,
        128,
        96,
        64,
        82,
        96,
        4,
        54,
        16,
        97,
        0,
        232,
        87,
        96,
        0,
        53,
        96,
        224,
        28,
        128,
        99,
        141,
        165,
        203,
        91,
        17,
        97,
        0,
        138,
        87,
        128,
        99,
        240,
        78,
        40,
        62,
        17,
        97,
        0,
        89,
        87,
        128,
        99,
        240,
        78,
        40,
        62,
        20,
        97,
        2,
        121,
        87,
        128,
        99,
        242,
        253,
        227,
        139,
        20,
        97,
        2,
        140,
        87,
        128,
        99,
        252,
        12,
        84,
        106,
        20,
        97,
        2,
        159,
        87,
        128,
        99,
        254,
        232,
        28,
        244,
        20,
        97,
        2,
        211,
        87,
        96,
        0,
        128,
        253,
        91,
        128,
        99,
        141,
        165,
        203,
        91,
        20,
        97,
        1,
        218,
        87,
        128,
        99,
        166,
        25,
        72,
        110,
        20,
        97,
        1,
        243,
        87,
        128,
        99,
        197,
        192,
        54,
        153,
        20,
        97,
        2,
        39,
        87,
        128,
        99,
        215,
        83,
        63,
        2,
        20,
        97,
        2,
        91,
        87,
        96,
        0,
        128,
        253,
        91,
        128,
        99,
        84,
        209,
        241,
        61,
        17,
        97,
        0,
        198,
        87,
        128,
        99,
        84,
        209,
        241,
        61,
        20,
        97,
        1,
        92,
        87,
        128,
        99,
        89,
        38,
        101,
        29,
        20,
        97,
        1,
        100,
        87,
        128,
        99,
        113,
        80,
        24,
        166,
        20,
        97,
        1,
        132,
        87,
        128,
        99,
        137,
        176,
        143,
        17,
        20,
        97,
        1,
        140,
        87,
        96,
        0,
        128,
        253,
        91,
        128,
        99,
        1,
        86,
        119,
        57,
        20,
        97,
        0,
        237,
        87,
        128,
        99,
        30,
        82,
        181,
        24,
        20,
        97,
        1,
        50,
        87,
        128,
        99,
        37,
        105,
        41,
        98,
        20,
        97,
        1,
        84,
        87,
        91,
        96,
        0,
        128,
        253,
        91,
        52,
        128,
        21,
        97,
        0,
        249,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        1,
        29,
        97,
        1,
        8,
        54,
        96,
        4,
        97,
        9,
        120,
        86,
        91,
        96,
        0,
        96,
        32,
        129,
        144,
        82,
        144,
        129,
        82,
        96,
        64,
        144,
        32,
        84,
        96,
        255,
        22,
        129,
        86,
        91,
        96,
        64,
        81,
        144,
        21,
        21,
        129,
        82,
        96,
        32,
        1,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        243,
        91,
        52,
        128,
        21,
        97,
        1,
        62,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        1,
        82,
        97,
        1,
        77,
        54,
        96,
        4,
        97,
        9,
        156,
        86,
        91,
        97,
        3,
        20,
        86,
        91,
        0,
        91,
        97,
        1,
        82,
        97,
        6,
        226,
        86,
        91,
        97,
        1,
        82,
        97,
        7,
        50,
        86,
        91,
        52,
        128,
        21,
        97,
        1,
        112,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        1,
        82,
        97,
        1,
        127,
        54,
        96,
        4,
        97,
        9,
        120,
        86,
        91,
        97,
        7,
        110,
        86,
        91,
        97,
        1,
        82,
        97,
        7,
        154,
        86,
        91,
        52,
        128,
        21,
        97,
        1,
        152,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        1,
        194,
        97,
        1,
        167,
        54,
        96,
        4,
        97,
        9,
        120,
        86,
        91,
        96,
        1,
        96,
        32,
        82,
        96,
        0,
        144,
        129,
        82,
        96,
        64,
        144,
        32,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        129,
        86,
        91,
        96,
        64,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        144,
        145,
        22,
        129,
        82,
        96,
        32,
        1,
        97,
        1,
        41,
        86,
        91,
        52,
        128,
        21,
        97,
        1,
        230,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        99,
        139,
        120,
        198,
        216,
        25,
        84,
        97,
        1,
        194,
        86,
        91,
        52,
        128,
        21,
        97,
        1,
        255,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        1,
        194,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        129,
        86,
        91,
        52,
        128,
        21,
        97,
        2,
        51,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        1,
        194,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        129,
        86,
        91,
        52,
        128,
        21,
        97,
        2,
        103,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        64,
        81,
        98,
        2,
        163,
        0,
        129,
        82,
        96,
        32,
        1,
        97,
        1,
        41,
        86,
        91,
        97,
        1,
        82,
        97,
        2,
        135,
        54,
        96,
        4,
        97,
        9,
        120,
        86,
        91,
        97,
        7,
        174,
        86,
        91,
        97,
        1,
        82,
        97,
        2,
        154,
        54,
        96,
        4,
        97,
        9,
        120,
        86,
        91,
        97,
        7,
        238,
        86,
        91,
        52,
        128,
        21,
        97,
        2,
        171,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        1,
        194,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        129,
        86,
        91,
        52,
        128,
        21,
        97,
        2,
        223,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        3,
        6,
        97,
        2,
        238,
        54,
        96,
        4,
        97,
        9,
        120,
        86,
        91,
        99,
        56,
        154,
        117,
        225,
        96,
        12,
        144,
        129,
        82,
        96,
        0,
        145,
        144,
        145,
        82,
        96,
        32,
        144,
        32,
        84,
        144,
        86,
        91,
        96,
        64,
        81,
        144,
        129,
        82,
        96,
        32,
        1,
        97,
        1,
        41,
        86,
        91,
        96,
        64,
        81,
        99,
        112,
        160,
        130,
        49,
        96,
        224,
        27,
        129,
        82,
        48,
        96,
        4,
        130,
        1,
        82,
        103,
        138,
        199,
        35,
        4,
        137,
        232,
        0,
        0,
        144,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        144,
        99,
        112,
        160,
        130,
        49,
        144,
        96,
        36,
        1,
        96,
        32,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        134,
        90,
        250,
        21,
        128,
        21,
        97,
        3,
        130,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        80,
        80,
        96,
        64,
        81,
        61,
        96,
        31,
        25,
        96,
        31,
        130,
        1,
        22,
        130,
        1,
        128,
        96,
        64,
        82,
        80,
        129,
        1,
        144,
        97,
        3,
        166,
        145,
        144,
        97,
        10,
        54,
        86,
        91,
        16,
        21,
        97,
        3,
        197,
        87,
        96,
        64,
        81,
        99,
        16,
        54,
        181,
        173,
        96,
        227,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        132,
        51,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        22,
        20,
        97,
        4,
        15,
        87,
        96,
        64,
        81,
        99,
        168,
        65,
        120,
        171,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        133,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        20,
        97,
        4,
        97,
        87,
        96,
        64,
        81,
        99,
        247,
        62,
        89,
        103,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        99,
        182,
        62,
        128,
        13,
        96,
        224,
        27,
        97,
        4,
        119,
        96,
        4,
        96,
        0,
        134,
        136,
        97,
        10,
        79,
        86,
        91,
        97,
        4,
        128,
        145,
        97,
        10,
        121,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        224,
        27,
        3,
        25,
        22,
        20,
        97,
        4,
        168,
        87,
        96,
        64,
        81,
        99,
        249,
        46,
        232,
        169,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        0,
        129,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        99,
        231,
        82,
        53,
        184,
        96,
        64,
        81,
        129,
        99,
        255,
        255,
        255,
        255,
        22,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        32,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        134,
        90,
        250,
        21,
        128,
        21,
        97,
        4,
        232,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        80,
        80,
        96,
        64,
        81,
        61,
        96,
        31,
        25,
        96,
        31,
        130,
        1,
        22,
        130,
        1,
        128,
        96,
        64,
        82,
        80,
        129,
        1,
        144,
        97,
        5,
        12,
        145,
        144,
        97,
        10,
        54,
        86,
        91,
        144,
        80,
        96,
        1,
        129,
        20,
        97,
        5,
        55,
        87,
        96,
        64,
        81,
        99,
        101,
        26,
        116,
        155,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        129,
        1,
        130,
        144,
        82,
        96,
        36,
        1,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        0,
        130,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        99,
        160,
        230,
        126,
        43,
        96,
        64,
        81,
        129,
        99,
        255,
        255,
        255,
        255,
        22,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        0,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        134,
        90,
        250,
        21,
        128,
        21,
        97,
        5,
        119,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        80,
        80,
        96,
        64,
        81,
        61,
        96,
        0,
        130,
        62,
        96,
        31,
        61,
        144,
        129,
        1,
        96,
        31,
        25,
        22,
        130,
        1,
        96,
        64,
        82,
        97,
        5,
        159,
        145,
        144,
        129,
        1,
        144,
        97,
        10,
        240,
        86,
        91,
        144,
        80,
        96,
        1,
        129,
        81,
        20,
        97,
        5,
        200,
        87,
        128,
        81,
        96,
        64,
        81,
        99,
        187,
        240,
        77,
        201,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        1,
        97,
        5,
        46,
        145,
        129,
        82,
        96,
        32,
        1,
        144,
        86,
        91,
        96,
        0,
        129,
        96,
        0,
        129,
        81,
        129,
        16,
        97,
        5,
        221,
        87,
        97,
        5,
        221,
        97,
        11,
        162,
        86,
        91,
        96,
        32,
        144,
        129,
        2,
        145,
        144,
        145,
        1,
        129,
        1,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        96,
        0,
        144,
        129,
        82,
        145,
        130,
        144,
        82,
        96,
        64,
        144,
        145,
        32,
        84,
        144,
        145,
        80,
        96,
        255,
        22,
        97,
        6,
        37,
        87,
        96,
        64,
        81,
        99,
        29,
        221,
        111,
        157,
        96,
        227,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        0,
        97,
        6,
        48,
        133,
        97,
        8,
        21,
        86,
        91,
        144,
        80,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        21,
        97,
        6,
        101,
        87,
        96,
        64,
        81,
        99,
        114,
        63,
        224,
        193,
        96,
        225,
        27,
        129,
        82,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        130,
        22,
        96,
        4,
        130,
        1,
        82,
        96,
        36,
        1,
        97,
        5,
        46,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        130,
        129,
        22,
        96,
        0,
        144,
        129,
        82,
        96,
        32,
        129,
        129,
        82,
        96,
        64,
        128,
        131,
        32,
        128,
        84,
        96,
        255,
        25,
        22,
        144,
        85,
        96,
        1,
        144,
        145,
        82,
        144,
        32,
        128,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        25,
        22,
        145,
        135,
        22,
        145,
        144,
        145,
        23,
        144,
        85,
        97,
        6,
        214,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        134,
        103,
        138,
        199,
        35,
        4,
        137,
        232,
        0,
        0,
        97,
        8,
        196,
        86,
        91,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        98,
        2,
        163,
        0,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        22,
        66,
        1,
        144,
        80,
        99,
        56,
        154,
        117,
        225,
        96,
        12,
        82,
        51,
        96,
        0,
        82,
        128,
        96,
        32,
        96,
        12,
        32,
        85,
        51,
        127,
        219,
        243,
        106,
        16,
        125,
        161,
        158,
        73,
        82,
        122,
        113,
        118,
        161,
        186,
        191,
        150,
        59,
        75,
        15,
        248,
        205,
        227,
        94,
        227,
        93,
        108,
        216,
        241,
        249,
        172,
        126,
        29,
        96,
        0,
        128,
        162,
        80,
        86,
        91,
        99,
        56,
        154,
        117,
        225,
        96,
        12,
        82,
        51,
        96,
        0,
        82,
        96,
        0,
        96,
        32,
        96,
        12,
        32,
        85,
        51,
        127,
        250,
        123,
        142,
        171,
        125,
        166,
        127,
        65,
        44,
        201,
        87,
        94,
        212,
        52,
        100,
        70,
        143,
        155,
        251,
        174,
        137,
        209,
        103,
        89,
        23,
        52,
        108,
        166,
        216,
        254,
        60,
        146,
        96,
        0,
        128,
        162,
        86,
        91,
        97,
        7,
        118,
        97,
        9,
        10,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        96,
        0,
        144,
        129,
        82,
        96,
        32,
        129,
        144,
        82,
        96,
        64,
        144,
        32,
        128,
        84,
        96,
        255,
        25,
        22,
        96,
        1,
        23,
        144,
        85,
        86,
        91,
        97,
        7,
        162,
        97,
        9,
        10,
        86,
        91,
        97,
        7,
        172,
        96,
        0,
        97,
        9,
        37,
        86,
        91,
        86,
        91,
        97,
        7,
        182,
        97,
        9,
        10,
        86,
        91,
        99,
        56,
        154,
        117,
        225,
        96,
        12,
        82,
        128,
        96,
        0,
        82,
        96,
        32,
        96,
        12,
        32,
        128,
        84,
        66,
        17,
        21,
        97,
        7,
        222,
        87,
        99,
        111,
        94,
        136,
        24,
        96,
        0,
        82,
        96,
        4,
        96,
        28,
        253,
        91,
        96,
        0,
        144,
        85,
        97,
        7,
        235,
        129,
        97,
        9,
        37,
        86,
        91,
        80,
        86,
        91,
        97,
        7,
        246,
        97,
        9,
        10,
        86,
        91,
        128,
        96,
        96,
        27,
        97,
        8,
        12,
        87,
        99,
        116,
        72,
        251,
        174,
        96,
        0,
        82,
        96,
        4,
        96,
        28,
        253,
        91,
        97,
        7,
        235,
        129,
        97,
        9,
        37,
        86,
        91,
        96,
        64,
        81,
        99,
        86,
        36,
        178,
        91,
        96,
        224,
        27,
        129,
        82,
        127,
        108,
        154,
        108,
        74,
        57,
        40,
        78,
        55,
        237,
        28,
        245,
        61,
        51,
        117,
        119,
        209,
        66,
        18,
        164,
        135,
        15,
        185,
        118,
        164,
        54,
        108,
        105,
        59,
        147,
        153,
        24,
        213,
        96,
        4,
        130,
        1,
        82,
        96,
        32,
        96,
        36,
        130,
        1,
        82,
        96,
        0,
        144,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        131,
        22,
        144,
        99,
        86,
        36,
        178,
        91,
        144,
        96,
        68,
        1,
        96,
        0,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        134,
        90,
        250,
        21,
        128,
        21,
        97,
        8,
        131,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        80,
        80,
        96,
        64,
        81,
        61,
        96,
        0,
        130,
        62,
        96,
        31,
        61,
        144,
        129,
        1,
        96,
        31,
        25,
        22,
        130,
        1,
        96,
        64,
        82,
        97,
        8,
        171,
        145,
        144,
        129,
        1,
        144,
        97,
        11,
        184,
        86,
        91,
        128,
        96,
        32,
        1,
        144,
        81,
        129,
        1,
        144,
        97,
        8,
        190,
        145,
        144,
        97,
        12,
        100,
        86,
        91,
        146,
        145,
        80,
        80,
        86,
        91,
        129,
        96,
        20,
        82,
        128,
        96,
        52,
        82,
        99,
        169,
        5,
        156,
        187,
        96,
        96,
        27,
        96,
        0,
        82,
        96,
        32,
        96,
        0,
        96,
        68,
        96,
        16,
        96,
        0,
        135,
        90,
        241,
        61,
        21,
        96,
        1,
        96,
        0,
        81,
        20,
        23,
        22,
        97,
        9,
        0,
        87,
        99,
        144,
        184,
        236,
        24,
        96,
        0,
        82,
        96,
        4,
        96,
        28,
        253,
        91,
        96,
        0,
        96,
        52,
        82,
        80,
        80,
        80,
        86,
        91,
        99,
        139,
        120,
        198,
        216,
        25,
        84,
        51,
        20,
        97,
        7,
        172,
        87,
        99,
        130,
        180,
        41,
        0,
        96,
        0,
        82,
        96,
        4,
        96,
        28,
        253,
        91,
        99,
        139,
        120,
        198,
        216,
        25,
        128,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        144,
        146,
        22,
        145,
        130,
        144,
        127,
        139,
        224,
        7,
        156,
        83,
        22,
        89,
        20,
        19,
        68,
        205,
        31,
        208,
        164,
        242,
        132,
        25,
        73,
        127,
        151,
        34,
        163,
        218,
        175,
        227,
        180,
        24,
        111,
        107,
        100,
        87,
        224,
        96,
        0,
        128,
        163,
        85,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        129,
        20,
        97,
        7,
        235,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        9,
        138,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        53,
        97,
        9,
        149,
        129,
        97,
        9,
        99,
        86,
        91,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        0,
        128,
        96,
        0,
        96,
        128,
        134,
        136,
        3,
        18,
        21,
        97,
        9,
        180,
        87,
        96,
        0,
        128,
        253,
        91,
        133,
        53,
        97,
        9,
        191,
        129,
        97,
        9,
        99,
        86,
        91,
        148,
        80,
        96,
        32,
        134,
        1,
        53,
        97,
        9,
        207,
        129,
        97,
        9,
        99,
        86,
        91,
        147,
        80,
        96,
        64,
        134,
        1,
        53,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        128,
        130,
        17,
        21,
        97,
        9,
        236,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        136,
        1,
        145,
        80,
        136,
        96,
        31,
        131,
        1,
        18,
        97,
        10,
        0,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        53,
        129,
        129,
        17,
        21,
        97,
        10,
        15,
        87,
        96,
        0,
        128,
        253,
        91,
        137,
        96,
        32,
        130,
        133,
        1,
        1,
        17,
        21,
        97,
        10,
        33,
        87,
        96,
        0,
        128,
        253,
        91,
        150,
        153,
        149,
        152,
        80,
        80,
        96,
        32,
        1,
        149,
        96,
        96,
        1,
        53,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        10,
        72,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        81,
        145,
        144,
        80,
        86,
        91,
        96,
        0,
        128,
        133,
        133,
        17,
        21,
        97,
        10,
        95,
        87,
        96,
        0,
        128,
        253,
        91,
        131,
        134,
        17,
        21,
        97,
        10,
        108,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        80,
        130,
        1,
        147,
        145,
        144,
        146,
        3,
        145,
        80,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        224,
        27,
        3,
        25,
        129,
        53,
        129,
        129,
        22,
        145,
        96,
        4,
        133,
        16,
        21,
        97,
        10,
        161,
        87,
        128,
        129,
        134,
        96,
        4,
        3,
        96,
        3,
        27,
        27,
        131,
        22,
        22,
        146,
        80,
        91,
        80,
        80,
        146,
        145,
        80,
        80,
        86,
        91,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        65,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        96,
        64,
        81,
        96,
        31,
        130,
        1,
        96,
        31,
        25,
        22,
        129,
        1,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        129,
        17,
        130,
        130,
        16,
        23,
        21,
        97,
        10,
        232,
        87,
        97,
        10,
        232,
        97,
        10,
        169,
        86,
        91,
        96,
        64,
        82,
        145,
        144,
        80,
        86,
        91,
        96,
        0,
        96,
        32,
        128,
        131,
        133,
        3,
        18,
        21,
        97,
        11,
        3,
        87,
        96,
        0,
        128,
        253,
        91,
        130,
        81,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        128,
        130,
        17,
        21,
        97,
        11,
        27,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        133,
        1,
        145,
        80,
        133,
        96,
        31,
        131,
        1,
        18,
        97,
        11,
        47,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        81,
        129,
        129,
        17,
        21,
        97,
        11,
        65,
        87,
        97,
        11,
        65,
        97,
        10,
        169,
        86,
        91,
        128,
        96,
        5,
        27,
        145,
        80,
        97,
        11,
        82,
        132,
        131,
        1,
        97,
        10,
        191,
        86,
        91,
        129,
        129,
        82,
        145,
        131,
        1,
        132,
        1,
        145,
        132,
        129,
        1,
        144,
        136,
        132,
        17,
        21,
        97,
        11,
        108,
        87,
        96,
        0,
        128,
        253,
        91,
        147,
        133,
        1,
        147,
        91,
        131,
        133,
        16,
        21,
        97,
        11,
        150,
        87,
        132,
        81,
        146,
        80,
        97,
        11,
        134,
        131,
        97,
        9,
        99,
        86,
        91,
        130,
        130,
        82,
        147,
        133,
        1,
        147,
        144,
        133,
        1,
        144,
        97,
        11,
        113,
        86,
        91,
        152,
        151,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        50,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        96,
        0,
        96,
        32,
        128,
        131,
        133,
        3,
        18,
        21,
        97,
        11,
        203,
        87,
        96,
        0,
        128,
        253,
        91,
        130,
        81,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        128,
        130,
        17,
        21,
        97,
        11,
        227,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        133,
        1,
        145,
        80,
        133,
        96,
        31,
        131,
        1,
        18,
        97,
        11,
        247,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        81,
        129,
        129,
        17,
        21,
        97,
        12,
        9,
        87,
        97,
        12,
        9,
        97,
        10,
        169,
        86,
        91,
        97,
        12,
        27,
        96,
        31,
        130,
        1,
        96,
        31,
        25,
        22,
        133,
        1,
        97,
        10,
        191,
        86,
        91,
        145,
        80,
        128,
        130,
        82,
        134,
        132,
        130,
        133,
        1,
        1,
        17,
        21,
        97,
        12,
        49,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        0,
        91,
        129,
        129,
        16,
        21,
        97,
        12,
        79,
        87,
        131,
        129,
        1,
        133,
        1,
        81,
        131,
        130,
        1,
        134,
        1,
        82,
        132,
        1,
        97,
        12,
        52,
        86,
        91,
        80,
        96,
        0,
        144,
        130,
        1,
        144,
        147,
        1,
        146,
        144,
        146,
        82,
        80,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        12,
        118,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        81,
        97,
        9,
        149,
        129,
        97,
        9,
        99,
        86,
        254,
        162,
        100,
        105,
        112,
        102,
        115,
        88,
        34,
        18,
        32,
        151,
        162,
        41,
        69,
        243,
        37,
        60,
        133,
        31,
        35,
        97,
        55,
        38,
        118,
        233,
        82,
        251,
        57,
        102,
        239,
        216,
        163,
        177,
        219,
        11,
        186,
        184,
        157,
        122,
        189,
        166,
        95,
        100,
        115,
        111,
        108,
        99,
        67,
        0,
        8,
        20,
        0,
        51,
    ];
    ///The bytecode of the contract.
    pub static WALLETREGISTRY_BYTECODE: ::ethers::core::types::Bytes = ::ethers::core::types::Bytes::from_static(
        __BYTECODE,
    );
    #[rustfmt::skip]
    const __DEPLOYED_BYTECODE: &[u8] = &[
        96,
        128,
        96,
        64,
        82,
        96,
        4,
        54,
        16,
        97,
        0,
        232,
        87,
        96,
        0,
        53,
        96,
        224,
        28,
        128,
        99,
        141,
        165,
        203,
        91,
        17,
        97,
        0,
        138,
        87,
        128,
        99,
        240,
        78,
        40,
        62,
        17,
        97,
        0,
        89,
        87,
        128,
        99,
        240,
        78,
        40,
        62,
        20,
        97,
        2,
        121,
        87,
        128,
        99,
        242,
        253,
        227,
        139,
        20,
        97,
        2,
        140,
        87,
        128,
        99,
        252,
        12,
        84,
        106,
        20,
        97,
        2,
        159,
        87,
        128,
        99,
        254,
        232,
        28,
        244,
        20,
        97,
        2,
        211,
        87,
        96,
        0,
        128,
        253,
        91,
        128,
        99,
        141,
        165,
        203,
        91,
        20,
        97,
        1,
        218,
        87,
        128,
        99,
        166,
        25,
        72,
        110,
        20,
        97,
        1,
        243,
        87,
        128,
        99,
        197,
        192,
        54,
        153,
        20,
        97,
        2,
        39,
        87,
        128,
        99,
        215,
        83,
        63,
        2,
        20,
        97,
        2,
        91,
        87,
        96,
        0,
        128,
        253,
        91,
        128,
        99,
        84,
        209,
        241,
        61,
        17,
        97,
        0,
        198,
        87,
        128,
        99,
        84,
        209,
        241,
        61,
        20,
        97,
        1,
        92,
        87,
        128,
        99,
        89,
        38,
        101,
        29,
        20,
        97,
        1,
        100,
        87,
        128,
        99,
        113,
        80,
        24,
        166,
        20,
        97,
        1,
        132,
        87,
        128,
        99,
        137,
        176,
        143,
        17,
        20,
        97,
        1,
        140,
        87,
        96,
        0,
        128,
        253,
        91,
        128,
        99,
        1,
        86,
        119,
        57,
        20,
        97,
        0,
        237,
        87,
        128,
        99,
        30,
        82,
        181,
        24,
        20,
        97,
        1,
        50,
        87,
        128,
        99,
        37,
        105,
        41,
        98,
        20,
        97,
        1,
        84,
        87,
        91,
        96,
        0,
        128,
        253,
        91,
        52,
        128,
        21,
        97,
        0,
        249,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        1,
        29,
        97,
        1,
        8,
        54,
        96,
        4,
        97,
        9,
        120,
        86,
        91,
        96,
        0,
        96,
        32,
        129,
        144,
        82,
        144,
        129,
        82,
        96,
        64,
        144,
        32,
        84,
        96,
        255,
        22,
        129,
        86,
        91,
        96,
        64,
        81,
        144,
        21,
        21,
        129,
        82,
        96,
        32,
        1,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        243,
        91,
        52,
        128,
        21,
        97,
        1,
        62,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        1,
        82,
        97,
        1,
        77,
        54,
        96,
        4,
        97,
        9,
        156,
        86,
        91,
        97,
        3,
        20,
        86,
        91,
        0,
        91,
        97,
        1,
        82,
        97,
        6,
        226,
        86,
        91,
        97,
        1,
        82,
        97,
        7,
        50,
        86,
        91,
        52,
        128,
        21,
        97,
        1,
        112,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        1,
        82,
        97,
        1,
        127,
        54,
        96,
        4,
        97,
        9,
        120,
        86,
        91,
        97,
        7,
        110,
        86,
        91,
        97,
        1,
        82,
        97,
        7,
        154,
        86,
        91,
        52,
        128,
        21,
        97,
        1,
        152,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        1,
        194,
        97,
        1,
        167,
        54,
        96,
        4,
        97,
        9,
        120,
        86,
        91,
        96,
        1,
        96,
        32,
        82,
        96,
        0,
        144,
        129,
        82,
        96,
        64,
        144,
        32,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        129,
        86,
        91,
        96,
        64,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        144,
        145,
        22,
        129,
        82,
        96,
        32,
        1,
        97,
        1,
        41,
        86,
        91,
        52,
        128,
        21,
        97,
        1,
        230,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        99,
        139,
        120,
        198,
        216,
        25,
        84,
        97,
        1,
        194,
        86,
        91,
        52,
        128,
        21,
        97,
        1,
        255,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        1,
        194,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        129,
        86,
        91,
        52,
        128,
        21,
        97,
        2,
        51,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        1,
        194,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        129,
        86,
        91,
        52,
        128,
        21,
        97,
        2,
        103,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        64,
        81,
        98,
        2,
        163,
        0,
        129,
        82,
        96,
        32,
        1,
        97,
        1,
        41,
        86,
        91,
        97,
        1,
        82,
        97,
        2,
        135,
        54,
        96,
        4,
        97,
        9,
        120,
        86,
        91,
        97,
        7,
        174,
        86,
        91,
        97,
        1,
        82,
        97,
        2,
        154,
        54,
        96,
        4,
        97,
        9,
        120,
        86,
        91,
        97,
        7,
        238,
        86,
        91,
        52,
        128,
        21,
        97,
        2,
        171,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        1,
        194,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        129,
        86,
        91,
        52,
        128,
        21,
        97,
        2,
        223,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        3,
        6,
        97,
        2,
        238,
        54,
        96,
        4,
        97,
        9,
        120,
        86,
        91,
        99,
        56,
        154,
        117,
        225,
        96,
        12,
        144,
        129,
        82,
        96,
        0,
        145,
        144,
        145,
        82,
        96,
        32,
        144,
        32,
        84,
        144,
        86,
        91,
        96,
        64,
        81,
        144,
        129,
        82,
        96,
        32,
        1,
        97,
        1,
        41,
        86,
        91,
        96,
        64,
        81,
        99,
        112,
        160,
        130,
        49,
        96,
        224,
        27,
        129,
        82,
        48,
        96,
        4,
        130,
        1,
        82,
        103,
        138,
        199,
        35,
        4,
        137,
        232,
        0,
        0,
        144,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        144,
        99,
        112,
        160,
        130,
        49,
        144,
        96,
        36,
        1,
        96,
        32,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        134,
        90,
        250,
        21,
        128,
        21,
        97,
        3,
        130,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        80,
        80,
        96,
        64,
        81,
        61,
        96,
        31,
        25,
        96,
        31,
        130,
        1,
        22,
        130,
        1,
        128,
        96,
        64,
        82,
        80,
        129,
        1,
        144,
        97,
        3,
        166,
        145,
        144,
        97,
        10,
        54,
        86,
        91,
        16,
        21,
        97,
        3,
        197,
        87,
        96,
        64,
        81,
        99,
        16,
        54,
        181,
        173,
        96,
        227,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        132,
        51,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        22,
        20,
        97,
        4,
        15,
        87,
        96,
        64,
        81,
        99,
        168,
        65,
        120,
        171,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        133,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        20,
        97,
        4,
        97,
        87,
        96,
        64,
        81,
        99,
        247,
        62,
        89,
        103,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        99,
        182,
        62,
        128,
        13,
        96,
        224,
        27,
        97,
        4,
        119,
        96,
        4,
        96,
        0,
        134,
        136,
        97,
        10,
        79,
        86,
        91,
        97,
        4,
        128,
        145,
        97,
        10,
        121,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        224,
        27,
        3,
        25,
        22,
        20,
        97,
        4,
        168,
        87,
        96,
        64,
        81,
        99,
        249,
        46,
        232,
        169,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        0,
        129,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        99,
        231,
        82,
        53,
        184,
        96,
        64,
        81,
        129,
        99,
        255,
        255,
        255,
        255,
        22,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        32,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        134,
        90,
        250,
        21,
        128,
        21,
        97,
        4,
        232,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        80,
        80,
        96,
        64,
        81,
        61,
        96,
        31,
        25,
        96,
        31,
        130,
        1,
        22,
        130,
        1,
        128,
        96,
        64,
        82,
        80,
        129,
        1,
        144,
        97,
        5,
        12,
        145,
        144,
        97,
        10,
        54,
        86,
        91,
        144,
        80,
        96,
        1,
        129,
        20,
        97,
        5,
        55,
        87,
        96,
        64,
        81,
        99,
        101,
        26,
        116,
        155,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        129,
        1,
        130,
        144,
        82,
        96,
        36,
        1,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        0,
        130,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        99,
        160,
        230,
        126,
        43,
        96,
        64,
        81,
        129,
        99,
        255,
        255,
        255,
        255,
        22,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        0,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        134,
        90,
        250,
        21,
        128,
        21,
        97,
        5,
        119,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        80,
        80,
        96,
        64,
        81,
        61,
        96,
        0,
        130,
        62,
        96,
        31,
        61,
        144,
        129,
        1,
        96,
        31,
        25,
        22,
        130,
        1,
        96,
        64,
        82,
        97,
        5,
        159,
        145,
        144,
        129,
        1,
        144,
        97,
        10,
        240,
        86,
        91,
        144,
        80,
        96,
        1,
        129,
        81,
        20,
        97,
        5,
        200,
        87,
        128,
        81,
        96,
        64,
        81,
        99,
        187,
        240,
        77,
        201,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        1,
        97,
        5,
        46,
        145,
        129,
        82,
        96,
        32,
        1,
        144,
        86,
        91,
        96,
        0,
        129,
        96,
        0,
        129,
        81,
        129,
        16,
        97,
        5,
        221,
        87,
        97,
        5,
        221,
        97,
        11,
        162,
        86,
        91,
        96,
        32,
        144,
        129,
        2,
        145,
        144,
        145,
        1,
        129,
        1,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        96,
        0,
        144,
        129,
        82,
        145,
        130,
        144,
        82,
        96,
        64,
        144,
        145,
        32,
        84,
        144,
        145,
        80,
        96,
        255,
        22,
        97,
        6,
        37,
        87,
        96,
        64,
        81,
        99,
        29,
        221,
        111,
        157,
        96,
        227,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        0,
        97,
        6,
        48,
        133,
        97,
        8,
        21,
        86,
        91,
        144,
        80,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        21,
        97,
        6,
        101,
        87,
        96,
        64,
        81,
        99,
        114,
        63,
        224,
        193,
        96,
        225,
        27,
        129,
        82,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        130,
        22,
        96,
        4,
        130,
        1,
        82,
        96,
        36,
        1,
        97,
        5,
        46,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        130,
        129,
        22,
        96,
        0,
        144,
        129,
        82,
        96,
        32,
        129,
        129,
        82,
        96,
        64,
        128,
        131,
        32,
        128,
        84,
        96,
        255,
        25,
        22,
        144,
        85,
        96,
        1,
        144,
        145,
        82,
        144,
        32,
        128,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        25,
        22,
        145,
        135,
        22,
        145,
        144,
        145,
        23,
        144,
        85,
        97,
        6,
        214,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        134,
        103,
        138,
        199,
        35,
        4,
        137,
        232,
        0,
        0,
        97,
        8,
        196,
        86,
        91,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        98,
        2,
        163,
        0,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        22,
        66,
        1,
        144,
        80,
        99,
        56,
        154,
        117,
        225,
        96,
        12,
        82,
        51,
        96,
        0,
        82,
        128,
        96,
        32,
        96,
        12,
        32,
        85,
        51,
        127,
        219,
        243,
        106,
        16,
        125,
        161,
        158,
        73,
        82,
        122,
        113,
        118,
        161,
        186,
        191,
        150,
        59,
        75,
        15,
        248,
        205,
        227,
        94,
        227,
        93,
        108,
        216,
        241,
        249,
        172,
        126,
        29,
        96,
        0,
        128,
        162,
        80,
        86,
        91,
        99,
        56,
        154,
        117,
        225,
        96,
        12,
        82,
        51,
        96,
        0,
        82,
        96,
        0,
        96,
        32,
        96,
        12,
        32,
        85,
        51,
        127,
        250,
        123,
        142,
        171,
        125,
        166,
        127,
        65,
        44,
        201,
        87,
        94,
        212,
        52,
        100,
        70,
        143,
        155,
        251,
        174,
        137,
        209,
        103,
        89,
        23,
        52,
        108,
        166,
        216,
        254,
        60,
        146,
        96,
        0,
        128,
        162,
        86,
        91,
        97,
        7,
        118,
        97,
        9,
        10,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        96,
        0,
        144,
        129,
        82,
        96,
        32,
        129,
        144,
        82,
        96,
        64,
        144,
        32,
        128,
        84,
        96,
        255,
        25,
        22,
        96,
        1,
        23,
        144,
        85,
        86,
        91,
        97,
        7,
        162,
        97,
        9,
        10,
        86,
        91,
        97,
        7,
        172,
        96,
        0,
        97,
        9,
        37,
        86,
        91,
        86,
        91,
        97,
        7,
        182,
        97,
        9,
        10,
        86,
        91,
        99,
        56,
        154,
        117,
        225,
        96,
        12,
        82,
        128,
        96,
        0,
        82,
        96,
        32,
        96,
        12,
        32,
        128,
        84,
        66,
        17,
        21,
        97,
        7,
        222,
        87,
        99,
        111,
        94,
        136,
        24,
        96,
        0,
        82,
        96,
        4,
        96,
        28,
        253,
        91,
        96,
        0,
        144,
        85,
        97,
        7,
        235,
        129,
        97,
        9,
        37,
        86,
        91,
        80,
        86,
        91,
        97,
        7,
        246,
        97,
        9,
        10,
        86,
        91,
        128,
        96,
        96,
        27,
        97,
        8,
        12,
        87,
        99,
        116,
        72,
        251,
        174,
        96,
        0,
        82,
        96,
        4,
        96,
        28,
        253,
        91,
        97,
        7,
        235,
        129,
        97,
        9,
        37,
        86,
        91,
        96,
        64,
        81,
        99,
        86,
        36,
        178,
        91,
        96,
        224,
        27,
        129,
        82,
        127,
        108,
        154,
        108,
        74,
        57,
        40,
        78,
        55,
        237,
        28,
        245,
        61,
        51,
        117,
        119,
        209,
        66,
        18,
        164,
        135,
        15,
        185,
        118,
        164,
        54,
        108,
        105,
        59,
        147,
        153,
        24,
        213,
        96,
        4,
        130,
        1,
        82,
        96,
        32,
        96,
        36,
        130,
        1,
        82,
        96,
        0,
        144,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        131,
        22,
        144,
        99,
        86,
        36,
        178,
        91,
        144,
        96,
        68,
        1,
        96,
        0,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        134,
        90,
        250,
        21,
        128,
        21,
        97,
        8,
        131,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        80,
        80,
        96,
        64,
        81,
        61,
        96,
        0,
        130,
        62,
        96,
        31,
        61,
        144,
        129,
        1,
        96,
        31,
        25,
        22,
        130,
        1,
        96,
        64,
        82,
        97,
        8,
        171,
        145,
        144,
        129,
        1,
        144,
        97,
        11,
        184,
        86,
        91,
        128,
        96,
        32,
        1,
        144,
        81,
        129,
        1,
        144,
        97,
        8,
        190,
        145,
        144,
        97,
        12,
        100,
        86,
        91,
        146,
        145,
        80,
        80,
        86,
        91,
        129,
        96,
        20,
        82,
        128,
        96,
        52,
        82,
        99,
        169,
        5,
        156,
        187,
        96,
        96,
        27,
        96,
        0,
        82,
        96,
        32,
        96,
        0,
        96,
        68,
        96,
        16,
        96,
        0,
        135,
        90,
        241,
        61,
        21,
        96,
        1,
        96,
        0,
        81,
        20,
        23,
        22,
        97,
        9,
        0,
        87,
        99,
        144,
        184,
        236,
        24,
        96,
        0,
        82,
        96,
        4,
        96,
        28,
        253,
        91,
        96,
        0,
        96,
        52,
        82,
        80,
        80,
        80,
        86,
        91,
        99,
        139,
        120,
        198,
        216,
        25,
        84,
        51,
        20,
        97,
        7,
        172,
        87,
        99,
        130,
        180,
        41,
        0,
        96,
        0,
        82,
        96,
        4,
        96,
        28,
        253,
        91,
        99,
        139,
        120,
        198,
        216,
        25,
        128,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        144,
        146,
        22,
        145,
        130,
        144,
        127,
        139,
        224,
        7,
        156,
        83,
        22,
        89,
        20,
        19,
        68,
        205,
        31,
        208,
        164,
        242,
        132,
        25,
        73,
        127,
        151,
        34,
        163,
        218,
        175,
        227,
        180,
        24,
        111,
        107,
        100,
        87,
        224,
        96,
        0,
        128,
        163,
        85,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        129,
        20,
        97,
        7,
        235,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        9,
        138,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        53,
        97,
        9,
        149,
        129,
        97,
        9,
        99,
        86,
        91,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        0,
        128,
        96,
        0,
        96,
        128,
        134,
        136,
        3,
        18,
        21,
        97,
        9,
        180,
        87,
        96,
        0,
        128,
        253,
        91,
        133,
        53,
        97,
        9,
        191,
        129,
        97,
        9,
        99,
        86,
        91,
        148,
        80,
        96,
        32,
        134,
        1,
        53,
        97,
        9,
        207,
        129,
        97,
        9,
        99,
        86,
        91,
        147,
        80,
        96,
        64,
        134,
        1,
        53,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        128,
        130,
        17,
        21,
        97,
        9,
        236,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        136,
        1,
        145,
        80,
        136,
        96,
        31,
        131,
        1,
        18,
        97,
        10,
        0,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        53,
        129,
        129,
        17,
        21,
        97,
        10,
        15,
        87,
        96,
        0,
        128,
        253,
        91,
        137,
        96,
        32,
        130,
        133,
        1,
        1,
        17,
        21,
        97,
        10,
        33,
        87,
        96,
        0,
        128,
        253,
        91,
        150,
        153,
        149,
        152,
        80,
        80,
        96,
        32,
        1,
        149,
        96,
        96,
        1,
        53,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        10,
        72,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        81,
        145,
        144,
        80,
        86,
        91,
        96,
        0,
        128,
        133,
        133,
        17,
        21,
        97,
        10,
        95,
        87,
        96,
        0,
        128,
        253,
        91,
        131,
        134,
        17,
        21,
        97,
        10,
        108,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        80,
        130,
        1,
        147,
        145,
        144,
        146,
        3,
        145,
        80,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        224,
        27,
        3,
        25,
        129,
        53,
        129,
        129,
        22,
        145,
        96,
        4,
        133,
        16,
        21,
        97,
        10,
        161,
        87,
        128,
        129,
        134,
        96,
        4,
        3,
        96,
        3,
        27,
        27,
        131,
        22,
        22,
        146,
        80,
        91,
        80,
        80,
        146,
        145,
        80,
        80,
        86,
        91,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        65,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        96,
        64,
        81,
        96,
        31,
        130,
        1,
        96,
        31,
        25,
        22,
        129,
        1,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        129,
        17,
        130,
        130,
        16,
        23,
        21,
        97,
        10,
        232,
        87,
        97,
        10,
        232,
        97,
        10,
        169,
        86,
        91,
        96,
        64,
        82,
        145,
        144,
        80,
        86,
        91,
        96,
        0,
        96,
        32,
        128,
        131,
        133,
        3,
        18,
        21,
        97,
        11,
        3,
        87,
        96,
        0,
        128,
        253,
        91,
        130,
        81,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        128,
        130,
        17,
        21,
        97,
        11,
        27,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        133,
        1,
        145,
        80,
        133,
        96,
        31,
        131,
        1,
        18,
        97,
        11,
        47,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        81,
        129,
        129,
        17,
        21,
        97,
        11,
        65,
        87,
        97,
        11,
        65,
        97,
        10,
        169,
        86,
        91,
        128,
        96,
        5,
        27,
        145,
        80,
        97,
        11,
        82,
        132,
        131,
        1,
        97,
        10,
        191,
        86,
        91,
        129,
        129,
        82,
        145,
        131,
        1,
        132,
        1,
        145,
        132,
        129,
        1,
        144,
        136,
        132,
        17,
        21,
        97,
        11,
        108,
        87,
        96,
        0,
        128,
        253,
        91,
        147,
        133,
        1,
        147,
        91,
        131,
        133,
        16,
        21,
        97,
        11,
        150,
        87,
        132,
        81,
        146,
        80,
        97,
        11,
        134,
        131,
        97,
        9,
        99,
        86,
        91,
        130,
        130,
        82,
        147,
        133,
        1,
        147,
        144,
        133,
        1,
        144,
        97,
        11,
        113,
        86,
        91,
        152,
        151,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        50,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        96,
        0,
        96,
        32,
        128,
        131,
        133,
        3,
        18,
        21,
        97,
        11,
        203,
        87,
        96,
        0,
        128,
        253,
        91,
        130,
        81,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        128,
        130,
        17,
        21,
        97,
        11,
        227,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        133,
        1,
        145,
        80,
        133,
        96,
        31,
        131,
        1,
        18,
        97,
        11,
        247,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        81,
        129,
        129,
        17,
        21,
        97,
        12,
        9,
        87,
        97,
        12,
        9,
        97,
        10,
        169,
        86,
        91,
        97,
        12,
        27,
        96,
        31,
        130,
        1,
        96,
        31,
        25,
        22,
        133,
        1,
        97,
        10,
        191,
        86,
        91,
        145,
        80,
        128,
        130,
        82,
        134,
        132,
        130,
        133,
        1,
        1,
        17,
        21,
        97,
        12,
        49,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        0,
        91,
        129,
        129,
        16,
        21,
        97,
        12,
        79,
        87,
        131,
        129,
        1,
        133,
        1,
        81,
        131,
        130,
        1,
        134,
        1,
        82,
        132,
        1,
        97,
        12,
        52,
        86,
        91,
        80,
        96,
        0,
        144,
        130,
        1,
        144,
        147,
        1,
        146,
        144,
        146,
        82,
        80,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        12,
        118,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        81,
        97,
        9,
        149,
        129,
        97,
        9,
        99,
        86,
        254,
        162,
        100,
        105,
        112,
        102,
        115,
        88,
        34,
        18,
        32,
        151,
        162,
        41,
        69,
        243,
        37,
        60,
        133,
        31,
        35,
        97,
        55,
        38,
        118,
        233,
        82,
        251,
        57,
        102,
        239,
        216,
        163,
        177,
        219,
        11,
        186,
        184,
        157,
        122,
        189,
        166,
        95,
        100,
        115,
        111,
        108,
        99,
        67,
        0,
        8,
        20,
        0,
        51,
    ];
    ///The deployed bytecode of the contract.
    pub static WALLETREGISTRY_DEPLOYED_BYTECODE: ::ethers::core::types::Bytes = ::ethers::core::types::Bytes::from_static(
        __DEPLOYED_BYTECODE,
    );
    pub struct WalletRegistry<M>(::ethers::contract::Contract<M>);
    impl<M> ::core::clone::Clone for WalletRegistry<M> {
        fn clone(&self) -> Self {
            Self(::core::clone::Clone::clone(&self.0))
        }
    }
    impl<M> ::core::ops::Deref for WalletRegistry<M> {
        type Target = ::ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M> ::core::ops::DerefMut for WalletRegistry<M> {
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl<M> ::core::fmt::Debug for WalletRegistry<M> {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple(stringify!(WalletRegistry)).field(&self.address()).finish()
        }
    }
    impl<M: ::ethers::providers::Middleware> WalletRegistry<M> {
        /// Creates a new contract instance with the specified `ethers` client at
        /// `address`. The contract derefs to a `ethers::Contract` object.
        pub fn new<T: Into<::ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            Self(
                ::ethers::contract::Contract::new(
                    address.into(),
                    WALLETREGISTRY_ABI.clone(),
                    client,
                ),
            )
        }
        /// Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it.
        /// Returns a new instance of a deployer that returns an instance of this contract after sending the transaction
        ///
        /// Notes:
        /// - If there are no constructor arguments, you should pass `()` as the argument.
        /// - The default poll duration is 7 seconds.
        /// - The default number of confirmations is 1 block.
        ///
        ///
        /// # Example
        ///
        /// Generate contract bindings with `abigen!` and deploy a new contract instance.
        ///
        /// *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact.
        ///
        /// ```ignore
        /// # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {
        ///     abigen!(Greeter, "../greeter.json");
        ///
        ///    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();
        ///    let msg = greeter_contract.greet().call().await.unwrap();
        /// # }
        /// ```
        pub fn deploy<T: ::ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::core::result::Result<
            ::ethers::contract::builders::ContractDeployer<M, Self>,
            ::ethers::contract::ContractError<M>,
        > {
            let factory = ::ethers::contract::ContractFactory::new(
                WALLETREGISTRY_ABI.clone(),
                WALLETREGISTRY_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ::ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        ///Calls the contract's `addBeneficiary` (0x5926651d) function
        pub fn add_beneficiary(
            &self,
            beneficiary: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([89, 38, 101, 29], beneficiary)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `beneficiaries` (0x01567739) function
        pub fn beneficiaries(
            &self,
            p0: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([1, 86, 119, 57], p0)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `cancelOwnershipHandover` (0x54d1f13d) function
        pub fn cancel_ownership_handover(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([84, 209, 241, 61], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `completeOwnershipHandover` (0xf04e283e) function
        pub fn complete_ownership_handover(
            &self,
            pending_owner: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([240, 78, 40, 62], pending_owner)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `masterCopy` (0xa619486e) function
        pub fn master_copy(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::ethers::core::types::Address,
        > {
            self.0
                .method_hash([166, 25, 72, 110], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `owner` (0x8da5cb5b) function
        pub fn owner(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::ethers::core::types::Address,
        > {
            self.0
                .method_hash([141, 165, 203, 91], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `ownershipHandoverExpiresAt` (0xfee81cf4) function
        pub fn ownership_handover_expires_at(
            &self,
            pending_owner: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([254, 232, 28, 244], pending_owner)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `ownershipHandoverValidFor` (0xd7533f02) function
        pub fn ownership_handover_valid_for(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, u64> {
            self.0
                .method_hash([215, 83, 63, 2], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `proxyCreated` (0x1e52b518) function
        pub fn proxy_created(
            &self,
            proxy: ::ethers::core::types::Address,
            singleton: ::ethers::core::types::Address,
            initializer: ::ethers::core::types::Bytes,
            p3: ::ethers::core::types::U256,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([30, 82, 181, 24], (proxy, singleton, initializer, p3))
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `renounceOwnership` (0x715018a6) function
        pub fn renounce_ownership(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([113, 80, 24, 166], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `requestOwnershipHandover` (0x25692962) function
        pub fn request_ownership_handover(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([37, 105, 41, 98], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `token` (0xfc0c546a) function
        pub fn token(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::ethers::core::types::Address,
        > {
            self.0
                .method_hash([252, 12, 84, 106], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `transferOwnership` (0xf2fde38b) function
        pub fn transfer_ownership(
            &self,
            new_owner: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([242, 253, 227, 139], new_owner)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `walletFactory` (0xc5c03699) function
        pub fn wallet_factory(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::ethers::core::types::Address,
        > {
            self.0
                .method_hash([197, 192, 54, 153], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `wallets` (0x89b08f11) function
        pub fn wallets(
            &self,
            p0: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::ethers::core::types::Address,
        > {
            self.0
                .method_hash([137, 176, 143, 17], p0)
                .expect("method not found (this should never happen)")
        }
        ///Gets the contract's `OwnershipHandoverCanceled` event
        pub fn ownership_handover_canceled_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<
            ::std::sync::Arc<M>,
            M,
            OwnershipHandoverCanceledFilter,
        > {
            self.0.event()
        }
        ///Gets the contract's `OwnershipHandoverRequested` event
        pub fn ownership_handover_requested_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<
            ::std::sync::Arc<M>,
            M,
            OwnershipHandoverRequestedFilter,
        > {
            self.0.event()
        }
        ///Gets the contract's `OwnershipTransferred` event
        pub fn ownership_transferred_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<
            ::std::sync::Arc<M>,
            M,
            OwnershipTransferredFilter,
        > {
            self.0.event()
        }
        /// Returns an `Event` builder for all the events of this contract.
        pub fn events(
            &self,
        ) -> ::ethers::contract::builders::Event<
            ::std::sync::Arc<M>,
            M,
            WalletRegistryEvents,
        > {
            self.0.event_with_filter(::core::default::Default::default())
        }
    }
    impl<M: ::ethers::providers::Middleware> From<::ethers::contract::Contract<M>>
    for WalletRegistry<M> {
        fn from(contract: ::ethers::contract::Contract<M>) -> Self {
            Self::new(contract.address(), contract.client())
        }
    }
    ///Custom Error type `CallerNotFactory` with signature `CallerNotFactory()` and selector `0xa84178ab`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(name = "CallerNotFactory", abi = "CallerNotFactory()")]
    pub struct CallerNotFactory;
    ///Custom Error type `FakeMasterCopy` with signature `FakeMasterCopy()` and selector `0xf73e5967`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(name = "FakeMasterCopy", abi = "FakeMasterCopy()")]
    pub struct FakeMasterCopy;
    ///Custom Error type `InvalidFallbackManager` with signature `InvalidFallbackManager(address)` and selector `0xe47fc182`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(name = "InvalidFallbackManager", abi = "InvalidFallbackManager(address)")]
    pub struct InvalidFallbackManager {
        pub fallback_manager: ::ethers::core::types::Address,
    }
    ///Custom Error type `InvalidInitialization` with signature `InvalidInitialization()` and selector `0xf92ee8a9`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(name = "InvalidInitialization", abi = "InvalidInitialization()")]
    pub struct InvalidInitialization;
    ///Custom Error type `InvalidOwnersCount` with signature `InvalidOwnersCount(uint256)` and selector `0xbbf04dc9`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(name = "InvalidOwnersCount", abi = "InvalidOwnersCount(uint256)")]
    pub struct InvalidOwnersCount {
        pub count: ::ethers::core::types::U256,
    }
    ///Custom Error type `InvalidThreshold` with signature `InvalidThreshold(uint256)` and selector `0x651a749b`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(name = "InvalidThreshold", abi = "InvalidThreshold(uint256)")]
    pub struct InvalidThreshold {
        pub threshold: ::ethers::core::types::U256,
    }
    ///Custom Error type `NewOwnerIsZeroAddress` with signature `NewOwnerIsZeroAddress()` and selector `0x7448fbae`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(name = "NewOwnerIsZeroAddress", abi = "NewOwnerIsZeroAddress()")]
    pub struct NewOwnerIsZeroAddress;
    ///Custom Error type `NoHandoverRequest` with signature `NoHandoverRequest()` and selector `0x6f5e8818`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(name = "NoHandoverRequest", abi = "NoHandoverRequest()")]
    pub struct NoHandoverRequest;
    ///Custom Error type `NotEnoughFunds` with signature `NotEnoughFunds()` and selector `0x81b5ad68`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(name = "NotEnoughFunds", abi = "NotEnoughFunds()")]
    pub struct NotEnoughFunds;
    ///Custom Error type `OwnerIsNotABeneficiary` with signature `OwnerIsNotABeneficiary()` and selector `0xeeeb7ce8`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(name = "OwnerIsNotABeneficiary", abi = "OwnerIsNotABeneficiary()")]
    pub struct OwnerIsNotABeneficiary;
    ///Custom Error type `Unauthorized` with signature `Unauthorized()` and selector `0x82b42900`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(name = "Unauthorized", abi = "Unauthorized()")]
    pub struct Unauthorized;
    ///Container type for all of the contract's custom errors
    #[derive(Clone, ::ethers::contract::EthAbiType, Debug, PartialEq, Eq, Hash)]
    pub enum WalletRegistryErrors {
        CallerNotFactory(CallerNotFactory),
        FakeMasterCopy(FakeMasterCopy),
        InvalidFallbackManager(InvalidFallbackManager),
        InvalidInitialization(InvalidInitialization),
        InvalidOwnersCount(InvalidOwnersCount),
        InvalidThreshold(InvalidThreshold),
        NewOwnerIsZeroAddress(NewOwnerIsZeroAddress),
        NoHandoverRequest(NoHandoverRequest),
        NotEnoughFunds(NotEnoughFunds),
        OwnerIsNotABeneficiary(OwnerIsNotABeneficiary),
        Unauthorized(Unauthorized),
        /// The standard solidity revert string, with selector
        /// Error(string) -- 0x08c379a0
        RevertString(::std::string::String),
    }
    impl ::ethers::core::abi::AbiDecode for WalletRegistryErrors {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::core::result::Result<Self, ::ethers::core::abi::AbiError> {
            let data = data.as_ref();
            if let Ok(decoded)
                = <::std::string::String as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::RevertString(decoded));
            }
            if let Ok(decoded)
                = <CallerNotFactory as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::CallerNotFactory(decoded));
            }
            if let Ok(decoded)
                = <FakeMasterCopy as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::FakeMasterCopy(decoded));
            }
            if let Ok(decoded)
                = <InvalidFallbackManager as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::InvalidFallbackManager(decoded));
            }
            if let Ok(decoded)
                = <InvalidInitialization as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::InvalidInitialization(decoded));
            }
            if let Ok(decoded)
                = <InvalidOwnersCount as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::InvalidOwnersCount(decoded));
            }
            if let Ok(decoded)
                = <InvalidThreshold as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::InvalidThreshold(decoded));
            }
            if let Ok(decoded)
                = <NewOwnerIsZeroAddress as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::NewOwnerIsZeroAddress(decoded));
            }
            if let Ok(decoded)
                = <NoHandoverRequest as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::NoHandoverRequest(decoded));
            }
            if let Ok(decoded)
                = <NotEnoughFunds as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::NotEnoughFunds(decoded));
            }
            if let Ok(decoded)
                = <OwnerIsNotABeneficiary as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::OwnerIsNotABeneficiary(decoded));
            }
            if let Ok(decoded)
                = <Unauthorized as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::Unauthorized(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ::ethers::core::abi::AbiEncode for WalletRegistryErrors {
        fn encode(self) -> ::std::vec::Vec<u8> {
            match self {
                Self::CallerNotFactory(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::FakeMasterCopy(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::InvalidFallbackManager(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::InvalidInitialization(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::InvalidOwnersCount(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::InvalidThreshold(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::NewOwnerIsZeroAddress(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::NoHandoverRequest(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::NotEnoughFunds(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::OwnerIsNotABeneficiary(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::Unauthorized(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::RevertString(s) => ::ethers::core::abi::AbiEncode::encode(s),
            }
        }
    }
    impl ::ethers::contract::ContractRevert for WalletRegistryErrors {
        fn valid_selector(selector: [u8; 4]) -> bool {
            match selector {
                [0x08, 0xc3, 0x79, 0xa0] => true,
                _ if selector
                    == <CallerNotFactory as ::ethers::contract::EthError>::selector() => {
                    true
                }
                _ if selector
                    == <FakeMasterCopy as ::ethers::contract::EthError>::selector() => {
                    true
                }
                _ if selector
                    == <InvalidFallbackManager as ::ethers::contract::EthError>::selector() => {
                    true
                }
                _ if selector
                    == <InvalidInitialization as ::ethers::contract::EthError>::selector() => {
                    true
                }
                _ if selector
                    == <InvalidOwnersCount as ::ethers::contract::EthError>::selector() => {
                    true
                }
                _ if selector
                    == <InvalidThreshold as ::ethers::contract::EthError>::selector() => {
                    true
                }
                _ if selector
                    == <NewOwnerIsZeroAddress as ::ethers::contract::EthError>::selector() => {
                    true
                }
                _ if selector
                    == <NoHandoverRequest as ::ethers::contract::EthError>::selector() => {
                    true
                }
                _ if selector
                    == <NotEnoughFunds as ::ethers::contract::EthError>::selector() => {
                    true
                }
                _ if selector
                    == <OwnerIsNotABeneficiary as ::ethers::contract::EthError>::selector() => {
                    true
                }
                _ if selector
                    == <Unauthorized as ::ethers::contract::EthError>::selector() => true,
                _ => false,
            }
        }
    }
    impl ::core::fmt::Display for WalletRegistryErrors {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                Self::CallerNotFactory(element) => ::core::fmt::Display::fmt(element, f),
                Self::FakeMasterCopy(element) => ::core::fmt::Display::fmt(element, f),
                Self::InvalidFallbackManager(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::InvalidInitialization(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::InvalidOwnersCount(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::InvalidThreshold(element) => ::core::fmt::Display::fmt(element, f),
                Self::NewOwnerIsZeroAddress(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::NoHandoverRequest(element) => ::core::fmt::Display::fmt(element, f),
                Self::NotEnoughFunds(element) => ::core::fmt::Display::fmt(element, f),
                Self::OwnerIsNotABeneficiary(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::Unauthorized(element) => ::core::fmt::Display::fmt(element, f),
                Self::RevertString(s) => ::core::fmt::Display::fmt(s, f),
            }
        }
    }
    impl ::core::convert::From<::std::string::String> for WalletRegistryErrors {
        fn from(value: String) -> Self {
            Self::RevertString(value)
        }
    }
    impl ::core::convert::From<CallerNotFactory> for WalletRegistryErrors {
        fn from(value: CallerNotFactory) -> Self {
            Self::CallerNotFactory(value)
        }
    }
    impl ::core::convert::From<FakeMasterCopy> for WalletRegistryErrors {
        fn from(value: FakeMasterCopy) -> Self {
            Self::FakeMasterCopy(value)
        }
    }
    impl ::core::convert::From<InvalidFallbackManager> for WalletRegistryErrors {
        fn from(value: InvalidFallbackManager) -> Self {
            Self::InvalidFallbackManager(value)
        }
    }
    impl ::core::convert::From<InvalidInitialization> for WalletRegistryErrors {
        fn from(value: InvalidInitialization) -> Self {
            Self::InvalidInitialization(value)
        }
    }
    impl ::core::convert::From<InvalidOwnersCount> for WalletRegistryErrors {
        fn from(value: InvalidOwnersCount) -> Self {
            Self::InvalidOwnersCount(value)
        }
    }
    impl ::core::convert::From<InvalidThreshold> for WalletRegistryErrors {
        fn from(value: InvalidThreshold) -> Self {
            Self::InvalidThreshold(value)
        }
    }
    impl ::core::convert::From<NewOwnerIsZeroAddress> for WalletRegistryErrors {
        fn from(value: NewOwnerIsZeroAddress) -> Self {
            Self::NewOwnerIsZeroAddress(value)
        }
    }
    impl ::core::convert::From<NoHandoverRequest> for WalletRegistryErrors {
        fn from(value: NoHandoverRequest) -> Self {
            Self::NoHandoverRequest(value)
        }
    }
    impl ::core::convert::From<NotEnoughFunds> for WalletRegistryErrors {
        fn from(value: NotEnoughFunds) -> Self {
            Self::NotEnoughFunds(value)
        }
    }
    impl ::core::convert::From<OwnerIsNotABeneficiary> for WalletRegistryErrors {
        fn from(value: OwnerIsNotABeneficiary) -> Self {
            Self::OwnerIsNotABeneficiary(value)
        }
    }
    impl ::core::convert::From<Unauthorized> for WalletRegistryErrors {
        fn from(value: Unauthorized) -> Self {
            Self::Unauthorized(value)
        }
    }
    #[derive(
        Clone,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethevent(
        name = "OwnershipHandoverCanceled",
        abi = "OwnershipHandoverCanceled(address)"
    )]
    pub struct OwnershipHandoverCanceledFilter {
        #[ethevent(indexed)]
        pub pending_owner: ::ethers::core::types::Address,
    }
    #[derive(
        Clone,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethevent(
        name = "OwnershipHandoverRequested",
        abi = "OwnershipHandoverRequested(address)"
    )]
    pub struct OwnershipHandoverRequestedFilter {
        #[ethevent(indexed)]
        pub pending_owner: ::ethers::core::types::Address,
    }
    #[derive(
        Clone,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethevent(
        name = "OwnershipTransferred",
        abi = "OwnershipTransferred(address,address)"
    )]
    pub struct OwnershipTransferredFilter {
        #[ethevent(indexed)]
        pub old_owner: ::ethers::core::types::Address,
        #[ethevent(indexed)]
        pub new_owner: ::ethers::core::types::Address,
    }
    ///Container type for all of the contract's events
    #[derive(Clone, ::ethers::contract::EthAbiType, Debug, PartialEq, Eq, Hash)]
    pub enum WalletRegistryEvents {
        OwnershipHandoverCanceledFilter(OwnershipHandoverCanceledFilter),
        OwnershipHandoverRequestedFilter(OwnershipHandoverRequestedFilter),
        OwnershipTransferredFilter(OwnershipTransferredFilter),
    }
    impl ::ethers::contract::EthLogDecode for WalletRegistryEvents {
        fn decode_log(
            log: &::ethers::core::abi::RawLog,
        ) -> ::core::result::Result<Self, ::ethers::core::abi::Error> {
            if let Ok(decoded) = OwnershipHandoverCanceledFilter::decode_log(log) {
                return Ok(
                    WalletRegistryEvents::OwnershipHandoverCanceledFilter(decoded),
                );
            }
            if let Ok(decoded) = OwnershipHandoverRequestedFilter::decode_log(log) {
                return Ok(
                    WalletRegistryEvents::OwnershipHandoverRequestedFilter(decoded),
                );
            }
            if let Ok(decoded) = OwnershipTransferredFilter::decode_log(log) {
                return Ok(WalletRegistryEvents::OwnershipTransferredFilter(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData)
        }
    }
    impl ::core::fmt::Display for WalletRegistryEvents {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                Self::OwnershipHandoverCanceledFilter(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::OwnershipHandoverRequestedFilter(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::OwnershipTransferredFilter(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
            }
        }
    }
    impl ::core::convert::From<OwnershipHandoverCanceledFilter>
    for WalletRegistryEvents {
        fn from(value: OwnershipHandoverCanceledFilter) -> Self {
            Self::OwnershipHandoverCanceledFilter(value)
        }
    }
    impl ::core::convert::From<OwnershipHandoverRequestedFilter>
    for WalletRegistryEvents {
        fn from(value: OwnershipHandoverRequestedFilter) -> Self {
            Self::OwnershipHandoverRequestedFilter(value)
        }
    }
    impl ::core::convert::From<OwnershipTransferredFilter> for WalletRegistryEvents {
        fn from(value: OwnershipTransferredFilter) -> Self {
            Self::OwnershipTransferredFilter(value)
        }
    }
    ///Container type for all input parameters for the `addBeneficiary` function with signature `addBeneficiary(address)` and selector `0x5926651d`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "addBeneficiary", abi = "addBeneficiary(address)")]
    pub struct AddBeneficiaryCall {
        pub beneficiary: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `beneficiaries` function with signature `beneficiaries(address)` and selector `0x01567739`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "beneficiaries", abi = "beneficiaries(address)")]
    pub struct BeneficiariesCall(pub ::ethers::core::types::Address);
    ///Container type for all input parameters for the `cancelOwnershipHandover` function with signature `cancelOwnershipHandover()` and selector `0x54d1f13d`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "cancelOwnershipHandover", abi = "cancelOwnershipHandover()")]
    pub struct CancelOwnershipHandoverCall;
    ///Container type for all input parameters for the `completeOwnershipHandover` function with signature `completeOwnershipHandover(address)` and selector `0xf04e283e`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(
        name = "completeOwnershipHandover",
        abi = "completeOwnershipHandover(address)"
    )]
    pub struct CompleteOwnershipHandoverCall {
        pub pending_owner: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `masterCopy` function with signature `masterCopy()` and selector `0xa619486e`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "masterCopy", abi = "masterCopy()")]
    pub struct MasterCopyCall;
    ///Container type for all input parameters for the `owner` function with signature `owner()` and selector `0x8da5cb5b`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "owner", abi = "owner()")]
    pub struct OwnerCall;
    ///Container type for all input parameters for the `ownershipHandoverExpiresAt` function with signature `ownershipHandoverExpiresAt(address)` and selector `0xfee81cf4`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(
        name = "ownershipHandoverExpiresAt",
        abi = "ownershipHandoverExpiresAt(address)"
    )]
    pub struct OwnershipHandoverExpiresAtCall {
        pub pending_owner: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `ownershipHandoverValidFor` function with signature `ownershipHandoverValidFor()` and selector `0xd7533f02`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "ownershipHandoverValidFor", abi = "ownershipHandoverValidFor()")]
    pub struct OwnershipHandoverValidForCall;
    ///Container type for all input parameters for the `proxyCreated` function with signature `proxyCreated(address,address,bytes,uint256)` and selector `0x1e52b518`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(
        name = "proxyCreated",
        abi = "proxyCreated(address,address,bytes,uint256)"
    )]
    pub struct ProxyCreatedCall {
        pub proxy: ::ethers::core::types::Address,
        pub singleton: ::ethers::core::types::Address,
        pub initializer: ::ethers::core::types::Bytes,
        pub p3: ::ethers::core::types::U256,
    }
    ///Container type for all input parameters for the `renounceOwnership` function with signature `renounceOwnership()` and selector `0x715018a6`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "renounceOwnership", abi = "renounceOwnership()")]
    pub struct RenounceOwnershipCall;
    ///Container type for all input parameters for the `requestOwnershipHandover` function with signature `requestOwnershipHandover()` and selector `0x25692962`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "requestOwnershipHandover", abi = "requestOwnershipHandover()")]
    pub struct RequestOwnershipHandoverCall;
    ///Container type for all input parameters for the `token` function with signature `token()` and selector `0xfc0c546a`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "token", abi = "token()")]
    pub struct TokenCall;
    ///Container type for all input parameters for the `transferOwnership` function with signature `transferOwnership(address)` and selector `0xf2fde38b`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "transferOwnership", abi = "transferOwnership(address)")]
    pub struct TransferOwnershipCall {
        pub new_owner: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `walletFactory` function with signature `walletFactory()` and selector `0xc5c03699`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "walletFactory", abi = "walletFactory()")]
    pub struct WalletFactoryCall;
    ///Container type for all input parameters for the `wallets` function with signature `wallets(address)` and selector `0x89b08f11`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "wallets", abi = "wallets(address)")]
    pub struct WalletsCall(pub ::ethers::core::types::Address);
    ///Container type for all of the contract's call
    #[derive(Clone, ::ethers::contract::EthAbiType, Debug, PartialEq, Eq, Hash)]
    pub enum WalletRegistryCalls {
        AddBeneficiary(AddBeneficiaryCall),
        Beneficiaries(BeneficiariesCall),
        CancelOwnershipHandover(CancelOwnershipHandoverCall),
        CompleteOwnershipHandover(CompleteOwnershipHandoverCall),
        MasterCopy(MasterCopyCall),
        Owner(OwnerCall),
        OwnershipHandoverExpiresAt(OwnershipHandoverExpiresAtCall),
        OwnershipHandoverValidFor(OwnershipHandoverValidForCall),
        ProxyCreated(ProxyCreatedCall),
        RenounceOwnership(RenounceOwnershipCall),
        RequestOwnershipHandover(RequestOwnershipHandoverCall),
        Token(TokenCall),
        TransferOwnership(TransferOwnershipCall),
        WalletFactory(WalletFactoryCall),
        Wallets(WalletsCall),
    }
    impl ::ethers::core::abi::AbiDecode for WalletRegistryCalls {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::core::result::Result<Self, ::ethers::core::abi::AbiError> {
            let data = data.as_ref();
            if let Ok(decoded)
                = <AddBeneficiaryCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::AddBeneficiary(decoded));
            }
            if let Ok(decoded)
                = <BeneficiariesCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::Beneficiaries(decoded));
            }
            if let Ok(decoded)
                = <CancelOwnershipHandoverCall as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::CancelOwnershipHandover(decoded));
            }
            if let Ok(decoded)
                = <CompleteOwnershipHandoverCall as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::CompleteOwnershipHandover(decoded));
            }
            if let Ok(decoded)
                = <MasterCopyCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::MasterCopy(decoded));
            }
            if let Ok(decoded)
                = <OwnerCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::Owner(decoded));
            }
            if let Ok(decoded)
                = <OwnershipHandoverExpiresAtCall as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::OwnershipHandoverExpiresAt(decoded));
            }
            if let Ok(decoded)
                = <OwnershipHandoverValidForCall as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::OwnershipHandoverValidFor(decoded));
            }
            if let Ok(decoded)
                = <ProxyCreatedCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::ProxyCreated(decoded));
            }
            if let Ok(decoded)
                = <RenounceOwnershipCall as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::RenounceOwnership(decoded));
            }
            if let Ok(decoded)
                = <RequestOwnershipHandoverCall as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::RequestOwnershipHandover(decoded));
            }
            if let Ok(decoded)
                = <TokenCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::Token(decoded));
            }
            if let Ok(decoded)
                = <TransferOwnershipCall as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::TransferOwnership(decoded));
            }
            if let Ok(decoded)
                = <WalletFactoryCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::WalletFactory(decoded));
            }
            if let Ok(decoded)
                = <WalletsCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::Wallets(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ::ethers::core::abi::AbiEncode for WalletRegistryCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                Self::AddBeneficiary(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::Beneficiaries(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::CancelOwnershipHandover(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::CompleteOwnershipHandover(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::MasterCopy(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::Owner(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::OwnershipHandoverExpiresAt(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::OwnershipHandoverValidFor(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::ProxyCreated(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::RenounceOwnership(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::RequestOwnershipHandover(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::Token(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::TransferOwnership(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::WalletFactory(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::Wallets(element) => ::ethers::core::abi::AbiEncode::encode(element),
            }
        }
    }
    impl ::core::fmt::Display for WalletRegistryCalls {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                Self::AddBeneficiary(element) => ::core::fmt::Display::fmt(element, f),
                Self::Beneficiaries(element) => ::core::fmt::Display::fmt(element, f),
                Self::CancelOwnershipHandover(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::CompleteOwnershipHandover(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::MasterCopy(element) => ::core::fmt::Display::fmt(element, f),
                Self::Owner(element) => ::core::fmt::Display::fmt(element, f),
                Self::OwnershipHandoverExpiresAt(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::OwnershipHandoverValidFor(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::ProxyCreated(element) => ::core::fmt::Display::fmt(element, f),
                Self::RenounceOwnership(element) => ::core::fmt::Display::fmt(element, f),
                Self::RequestOwnershipHandover(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::Token(element) => ::core::fmt::Display::fmt(element, f),
                Self::TransferOwnership(element) => ::core::fmt::Display::fmt(element, f),
                Self::WalletFactory(element) => ::core::fmt::Display::fmt(element, f),
                Self::Wallets(element) => ::core::fmt::Display::fmt(element, f),
            }
        }
    }
    impl ::core::convert::From<AddBeneficiaryCall> for WalletRegistryCalls {
        fn from(value: AddBeneficiaryCall) -> Self {
            Self::AddBeneficiary(value)
        }
    }
    impl ::core::convert::From<BeneficiariesCall> for WalletRegistryCalls {
        fn from(value: BeneficiariesCall) -> Self {
            Self::Beneficiaries(value)
        }
    }
    impl ::core::convert::From<CancelOwnershipHandoverCall> for WalletRegistryCalls {
        fn from(value: CancelOwnershipHandoverCall) -> Self {
            Self::CancelOwnershipHandover(value)
        }
    }
    impl ::core::convert::From<CompleteOwnershipHandoverCall> for WalletRegistryCalls {
        fn from(value: CompleteOwnershipHandoverCall) -> Self {
            Self::CompleteOwnershipHandover(value)
        }
    }
    impl ::core::convert::From<MasterCopyCall> for WalletRegistryCalls {
        fn from(value: MasterCopyCall) -> Self {
            Self::MasterCopy(value)
        }
    }
    impl ::core::convert::From<OwnerCall> for WalletRegistryCalls {
        fn from(value: OwnerCall) -> Self {
            Self::Owner(value)
        }
    }
    impl ::core::convert::From<OwnershipHandoverExpiresAtCall> for WalletRegistryCalls {
        fn from(value: OwnershipHandoverExpiresAtCall) -> Self {
            Self::OwnershipHandoverExpiresAt(value)
        }
    }
    impl ::core::convert::From<OwnershipHandoverValidForCall> for WalletRegistryCalls {
        fn from(value: OwnershipHandoverValidForCall) -> Self {
            Self::OwnershipHandoverValidFor(value)
        }
    }
    impl ::core::convert::From<ProxyCreatedCall> for WalletRegistryCalls {
        fn from(value: ProxyCreatedCall) -> Self {
            Self::ProxyCreated(value)
        }
    }
    impl ::core::convert::From<RenounceOwnershipCall> for WalletRegistryCalls {
        fn from(value: RenounceOwnershipCall) -> Self {
            Self::RenounceOwnership(value)
        }
    }
    impl ::core::convert::From<RequestOwnershipHandoverCall> for WalletRegistryCalls {
        fn from(value: RequestOwnershipHandoverCall) -> Self {
            Self::RequestOwnershipHandover(value)
        }
    }
    impl ::core::convert::From<TokenCall> for WalletRegistryCalls {
        fn from(value: TokenCall) -> Self {
            Self::Token(value)
        }
    }
    impl ::core::convert::From<TransferOwnershipCall> for WalletRegistryCalls {
        fn from(value: TransferOwnershipCall) -> Self {
            Self::TransferOwnership(value)
        }
    }
    impl ::core::convert::From<WalletFactoryCall> for WalletRegistryCalls {
        fn from(value: WalletFactoryCall) -> Self {
            Self::WalletFactory(value)
        }
    }
    impl ::core::convert::From<WalletsCall> for WalletRegistryCalls {
        fn from(value: WalletsCall) -> Self {
            Self::Wallets(value)
        }
    }
    ///Container type for all return fields from the `beneficiaries` function with signature `beneficiaries(address)` and selector `0x01567739`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct BeneficiariesReturn(pub bool);
    ///Container type for all return fields from the `masterCopy` function with signature `masterCopy()` and selector `0xa619486e`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct MasterCopyReturn(pub ::ethers::core::types::Address);
    ///Container type for all return fields from the `owner` function with signature `owner()` and selector `0x8da5cb5b`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct OwnerReturn {
        pub result: ::ethers::core::types::Address,
    }
    ///Container type for all return fields from the `ownershipHandoverExpiresAt` function with signature `ownershipHandoverExpiresAt(address)` and selector `0xfee81cf4`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct OwnershipHandoverExpiresAtReturn {
        pub result: ::ethers::core::types::U256,
    }
    ///Container type for all return fields from the `ownershipHandoverValidFor` function with signature `ownershipHandoverValidFor()` and selector `0xd7533f02`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct OwnershipHandoverValidForReturn(pub u64);
    ///Container type for all return fields from the `token` function with signature `token()` and selector `0xfc0c546a`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct TokenReturn(pub ::ethers::core::types::Address);
    ///Container type for all return fields from the `walletFactory` function with signature `walletFactory()` and selector `0xc5c03699`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct WalletFactoryReturn(pub ::ethers::core::types::Address);
    ///Container type for all return fields from the `wallets` function with signature `wallets(address)` and selector `0x89b08f11`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct WalletsReturn(pub ::ethers::core::types::Address);
}
