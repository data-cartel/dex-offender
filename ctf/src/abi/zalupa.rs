pub use zalupa::*;
/// This module was auto-generated with ethers-rs Abigen.
/// More information at: <https://github.com/gakonst/ethers-rs>
#[allow(
    clippy::enum_variant_names,
    clippy::too_many_arguments,
    clippy::upper_case_acronyms,
    clippy::type_complexity,
    dead_code,
    non_camel_case_types
)]
pub mod zalupa {
    #[allow(deprecated)]
    fn __abi() -> ::ethers::core::abi::Abi {
        ::ethers::core::abi::ethabi::Contract {
            constructor: ::core::option::Option::Some(
                ::ethers::core::abi::ethabi::Constructor {
                    inputs: ::std::vec![],
                },
            ),
            functions: ::core::convert::From::from([(
                ::std::borrow::ToOwned::to_owned("data"),
                ::std::vec![::ethers::core::abi::ethabi::Function {
                    name: ::std::borrow::ToOwned::to_owned("data"),
                    inputs: ::std::vec![],
                    outputs: ::std::vec![::ethers::core::abi::ethabi::Param {
                        name: ::std::string::String::new(),
                        kind: ::ethers::core::abi::ethabi::ParamType::Bytes,
                        internal_type: ::core::option::Option::Some(
                            ::std::borrow::ToOwned::to_owned("bytes"),
                        ),
                    },],
                    constant: ::core::option::Option::None,
                    state_mutability:
                        ::ethers::core::abi::ethabi::StateMutability::View,
                },],
            )]),
            events: ::std::collections::BTreeMap::new(),
            errors: ::std::collections::BTreeMap::new(),
            receive: false,
            fallback: false,
        }
    }
    ///The parsed JSON ABI of the contract.
    pub static ZALUPA_ABI: ::ethers::contract::Lazy<::ethers::core::abi::Abi> =
        ::ethers::contract::Lazy::new(__abi);
    #[rustfmt::skip]
    const __BYTECODE: &[u8] = b"`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[P`\0`@Qa\0\x1F\x90a\0\x96V[`@Q\x80\x91\x03\x90`\0\xF0\x80\x15\x80\x15a\0;W=`\0\x80>=`\0\xFD[P`@\x80Qh\x05k\xC7^-c\x10\0\0`$\x80\x83\x01\x91\x90\x91R\x82Q\x80\x83\x03\x90\x91\x01\x81R`D\x90\x91\x01\x90\x91R` \x81\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16c\xB7\xB0B-`\xE0\x1B\x17\x90R\x90\x91P`\0\x90a\0\x8F\x90\x82a\x01BV[PPa\x02\x01V[a\t\xC7\x80a\x03\xAA\x839\x01\x90V[cNH{q`\xE0\x1B`\0R`A`\x04R`$`\0\xFD[`\x01\x81\x81\x1C\x90\x82\x16\x80a\0\xCDW`\x7F\x82\x16\x91P[` \x82\x10\x81\x03a\0\xEDWcNH{q`\xE0\x1B`\0R`\"`\x04R`$`\0\xFD[P\x91\x90PV[`\x1F\x82\x11\x15a\x01=W`\0\x81\x81R` \x81 `\x1F\x85\x01`\x05\x1C\x81\x01` \x86\x10\x15a\x01\x1AWP\x80[`\x1F\x85\x01`\x05\x1C\x82\x01\x91P[\x81\x81\x10\x15a\x019W\x82\x81U`\x01\x01a\x01&V[PPP[PPPV[\x81Q`\x01`\x01`@\x1B\x03\x81\x11\x15a\x01[Wa\x01[a\0\xA3V[a\x01o\x81a\x01i\x84Ta\0\xB9V[\x84a\0\xF3V[` \x80`\x1F\x83\x11`\x01\x81\x14a\x01\xA4W`\0\x84\x15a\x01\x8CWP\x85\x83\x01Q[`\0\x19`\x03\x86\x90\x1B\x1C\x19\x16`\x01\x85\x90\x1B\x17\x85Ua\x019V[`\0\x85\x81R` \x81 `\x1F\x19\x86\x16\x91[\x82\x81\x10\x15a\x01\xD3W\x88\x86\x01Q\x82U\x94\x84\x01\x94`\x01\x90\x91\x01\x90\x84\x01a\x01\xB4V[P\x85\x82\x10\x15a\x01\xF1W\x87\x85\x01Q`\0\x19`\x03\x88\x90\x1B`\xF8\x16\x1C\x19\x16\x81U[PPPPP`\x01\x90\x81\x1B\x01\x90UPV[a\x01\x9A\x80a\x02\x10`\09`\0\xF3\xFE`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[P`\x046\x10a\0+W`\x005`\xE0\x1C\x80cs\xD4\xA1:\x14a\x000W[`\0\x80\xFD[a\08a\0NV[`@Qa\0E\x91\x90a\0\xDCV[`@Q\x80\x91\x03\x90\xF3[`\0\x80Ta\0[\x90a\x01*V[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\0\x87\x90a\x01*V[\x80\x15a\0\xD4W\x80`\x1F\x10a\0\xA9Wa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\0\xD4V[\x82\x01\x91\x90`\0R` `\0 \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\0\xB7W\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x81V[`\0` \x80\x83R\x83Q\x80\x82\x85\x01R`\0[\x81\x81\x10\x15a\x01\tW\x85\x81\x01\x83\x01Q\x85\x82\x01`@\x01R\x82\x01a\0\xEDV[P`\0`@\x82\x86\x01\x01R`@`\x1F\x19`\x1F\x83\x01\x16\x85\x01\x01\x92PPP\x92\x91PPV[`\x01\x81\x81\x1C\x90\x82\x16\x80a\x01>W`\x7F\x82\x16\x91P[` \x82\x10\x81\x03a\x01^WcNH{q`\xE0\x1B`\0R`\"`\x04R`$`\0\xFD[P\x91\x90PV\xFE\xA2dipfsX\"\x12 \x12\xE7\\(!\xDF\x1F4\xBC\xEC\x9F\x1DV,\xAF\x02\x19\\\xFA@\xC6\x13\xF1\xC8\x04\xE9|Q\xA1\x7Fj\\dsolcC\0\x08\x15\x003`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[Pa\t\xA7\x80a\0 `\09`\0\xF3\xFE`\x80`@R`\x046\x10a\0\x91W`\x005`\xE0\x1C\x80c\xB6\x1D'\xF6\x11a\0YW\x80c\xB6\x1D'\xF6\x14a\x01YW\x80c\xB7\xB0B-\x14a\x01lW\x80c\xD0\xE3\r\xB0\x14a\x01\x8CW\x80c\xD96T~\x14a\x01\x94W\x80c\xE42R\xD7\x14a\x01\xD4W`\0\x80\xFD[\x80c'\xE25\xE3\x14a\0\x96W\x80cs\xADF\x8A\x14a\0\xD6W\x80c\x8D\xA5\xCB[\x14a\0\xECW\x80c\x9DQ\xD9\xB7\x14a\x01$W\x80c\xAC\x96P\xD8\x14a\x01FW[`\0\x80\xFD[4\x80\x15a\0\xA2W`\0\x80\xFD[Pa\0\xC3a\0\xB16`\x04a\x07BV[`\x03` R`\0\x90\x81R`@\x90 T\x81V[`@Q\x90\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\0\xE2W`\0\x80\xFD[Pa\0\xC3`\x01T\x81V[4\x80\x15a\0\xF8W`\0\x80\xFD[P`\0Ta\x01\x0C\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01a\0\xCDV[4\x80\x15a\x010W`\0\x80\xFD[Pa\x01Da\x01?6`\x04a\x07dV[a\x01\xF4V[\0[a\x01Da\x01T6`\x04a\x07}V[a\x02\x7FV[a\x01Da\x01g6`\x04a\x07\xF2V[a\x04iV[4\x80\x15a\x01xW`\0\x80\xFD[Pa\x01Da\x01\x876`\x04a\x07dV[a\x05\xBEV[a\x01Da\x06\x1BV[4\x80\x15a\x01\xA0W`\0\x80\xFD[Pa\x01\xC4a\x01\xAF6`\x04a\x07BV[`\x02` R`\0\x90\x81R`@\x90 T`\xFF\x16\x81V[`@Q\x90\x15\x15\x81R` \x01a\0\xCDV[4\x80\x15a\x01\xE0W`\0\x80\xFD[Pa\x01Da\x01\xEF6`\x04a\x07BV[a\x06\xB8V[3`\0\x90\x81R`\x02` R`@\x90 T`\xFF\x16a\x02,W`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x02#\x90a\x08yV[`@Q\x80\x91\x03\x90\xFD[G\x15a\x02zW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x19`$\x82\x01R\x7FContract balance is not 0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02#V[`\x01UV[3`\0\x90\x81R`\x02` R`@\x90 T`\xFF\x16a\x02\xAEW`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x02#\x90a\x08yV[`\0\x80[\x82\x81\x10\x15a\x04cW`\0\x84\x84\x83\x81\x81\x10a\x02\xCEWa\x02\xCEa\x08\xA2V[\x90P` \x02\x81\x01\x90a\x02\xE0\x91\x90a\x08\xB8V[\x80\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83\x80\x82\x847`\0\x92\x01\x91\x90\x91RPPP` \x82\x01Q\x91\x92PPc\x02\xF1\xCF%`\xE4\x1B`\x01`\x01`\xE0\x1B\x03\x19\x82\x16\x01a\x03\x87W\x83\x15a\x03\x82W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1F`$\x82\x01R\x7FDeposit can only be called once\0`D\x82\x01R`d\x01a\x02#V[`\x01\x93P[`\x000\x87\x87\x86\x81\x81\x10a\x03\x9CWa\x03\x9Ca\x08\xA2V[\x90P` \x02\x81\x01\x90a\x03\xAE\x91\x90a\x08\xB8V[`@Qa\x03\xBC\x92\x91\x90a\t\x06V[`\0`@Q\x80\x83\x03\x81\x85Z\xF4\x91PP=\x80`\0\x81\x14a\x03\xF7W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=`\0` \x84\x01>a\x03\xFCV[``\x91P[PP\x90P\x80a\x04MW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1B`$\x82\x01R\x7FError while delegating call\0\0\0\0\0`D\x82\x01R`d\x01a\x02#V[PPP\x80\x80a\x04[\x90a\t,V[\x91PPa\x02\xB2V[PPPPV[3`\0\x90\x81R`\x02` R`@\x90 T`\xFF\x16a\x04\x98W`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x02#\x90a\x08yV[3`\0\x90\x81R`\x03` R`@\x90 T\x83\x11\x15a\x04\xEEW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x14`$\x82\x01RsInsufficient balance``\x1B`D\x82\x01R`d\x01a\x02#V[3`\0\x90\x81R`\x03` R`@\x81 \x80T\x85\x92\x90a\x05\r\x90\x84\x90a\tEV[\x92PP\x81\x90UP`\0\x84`\x01`\x01`\xA0\x1B\x03\x16\x84\x84\x84`@Qa\x051\x92\x91\x90a\t\x06V[`\0`@Q\x80\x83\x03\x81\x85\x87Z\xF1\x92PPP=\x80`\0\x81\x14a\x05nW`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=`\0` \x84\x01>a\x05sV[``\x91P[PP\x90P\x80a\x05\xB7W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x10`$\x82\x01Ro\x11^\x19X\xDD]\x1A[\xDB\x88\x19\x98Z[\x19Y`\x82\x1B`D\x82\x01R`d\x01a\x02#V[PPPPPV[`\x01T\x15a\x06\x04W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x13`$\x82\x01Rr\x10[\x1C\x99XY\x1EH\x1A[\x9A]\x1AX[\x1A^\x99Y`j\x1B`D\x82\x01R`d\x01a\x02#V[`\x01U`\0\x80T`\x01`\x01`\xA0\x1B\x03\x19\x163\x17\x90UV[3`\0\x90\x81R`\x02` R`@\x90 T`\xFF\x16a\x06JW`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x02#\x90a\x08yV[`\x01TG\x11\x15a\x06\x92W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x13`$\x82\x01Rr\x13X^\x08\x18\x98[\x18[\x98\xD9H\x1C\x99XX\xDA\x19Y`j\x1B`D\x82\x01R`d\x01a\x02#V[3`\0\x90\x81R`\x03` R`@\x81 \x80T4\x92\x90a\x06\xB1\x90\x84\x90a\t^V[\x90\x91UPPV[`\0T`\x01`\x01`\xA0\x1B\x03\x163\x14a\x07\x02W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\r`$\x82\x01Rl'7\xBA\x10:42\x907\xBB\xB72\xB9`\x99\x1B`D\x82\x01R`d\x01a\x02#V[`\x01`\x01`\xA0\x1B\x03\x16`\0\x90\x81R`\x02` R`@\x90 \x80T`\xFF\x19\x16`\x01\x17\x90UV[\x805`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x07=W`\0\x80\xFD[\x91\x90PV[`\0` \x82\x84\x03\x12\x15a\x07TW`\0\x80\xFD[a\x07]\x82a\x07&V[\x93\x92PPPV[`\0` \x82\x84\x03\x12\x15a\x07vW`\0\x80\xFD[P5\x91\x90PV[`\0\x80` \x83\x85\x03\x12\x15a\x07\x90W`\0\x80\xFD[\x825g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a\x07\xA8W`\0\x80\xFD[\x81\x85\x01\x91P\x85`\x1F\x83\x01\x12a\x07\xBCW`\0\x80\xFD[\x815\x81\x81\x11\x15a\x07\xCBW`\0\x80\xFD[\x86` \x82`\x05\x1B\x85\x01\x01\x11\x15a\x07\xE0W`\0\x80\xFD[` \x92\x90\x92\x01\x96\x91\x95P\x90\x93PPPPV[`\0\x80`\0\x80``\x85\x87\x03\x12\x15a\x08\x08W`\0\x80\xFD[a\x08\x11\x85a\x07&V[\x93P` \x85\x015\x92P`@\x85\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a\x085W`\0\x80\xFD[\x81\x87\x01\x91P\x87`\x1F\x83\x01\x12a\x08IW`\0\x80\xFD[\x815\x81\x81\x11\x15a\x08XW`\0\x80\xFD[\x88` \x82\x85\x01\x01\x11\x15a\x08jW`\0\x80\xFD[\x95\x98\x94\x97PP` \x01\x94PPPV[` \x80\x82R`\x0F\x90\x82\x01Rn\x13\x9B\xDD\x08\x1D\xDA\x1A]\x19[\x1A\\\xDD\x19Y`\x8A\x1B`@\x82\x01R``\x01\x90V[cNH{q`\xE0\x1B`\0R`2`\x04R`$`\0\xFD[`\0\x80\x835`\x1E\x19\x846\x03\x01\x81\x12a\x08\xCFW`\0\x80\xFD[\x83\x01\x805\x91Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x08\xEAW`\0\x80\xFD[` \x01\x91P6\x81\x90\x03\x82\x13\x15a\x08\xFFW`\0\x80\xFD[\x92P\x92\x90PV[\x81\x83\x827`\0\x91\x01\x90\x81R\x91\x90PV[cNH{q`\xE0\x1B`\0R`\x11`\x04R`$`\0\xFD[`\0`\x01\x82\x01a\t>Wa\t>a\t\x16V[P`\x01\x01\x90V[\x81\x81\x03\x81\x81\x11\x15a\tXWa\tXa\t\x16V[\x92\x91PPV[\x80\x82\x01\x80\x82\x11\x15a\tXWa\tXa\t\x16V\xFE\xA2dipfsX\"\x12 \x07y}OfY\xE8)\xF0\x14L4\xDBk\xDD +\x11\x9Bc|@>=\x8E\xFBa\xC1$\\WLdsolcC\0\x08\x15\x003";
    /// The bytecode of the contract.
    pub static ZALUPA_BYTECODE: ::ethers::core::types::Bytes =
        ::ethers::core::types::Bytes::from_static(__BYTECODE);
    #[rustfmt::skip]
    const __DEPLOYED_BYTECODE: &[u8] = b"`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[P`\x046\x10a\0+W`\x005`\xE0\x1C\x80cs\xD4\xA1:\x14a\x000W[`\0\x80\xFD[a\08a\0NV[`@Qa\0E\x91\x90a\0\xDCV[`@Q\x80\x91\x03\x90\xF3[`\0\x80Ta\0[\x90a\x01*V[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\0\x87\x90a\x01*V[\x80\x15a\0\xD4W\x80`\x1F\x10a\0\xA9Wa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\0\xD4V[\x82\x01\x91\x90`\0R` `\0 \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\0\xB7W\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x81V[`\0` \x80\x83R\x83Q\x80\x82\x85\x01R`\0[\x81\x81\x10\x15a\x01\tW\x85\x81\x01\x83\x01Q\x85\x82\x01`@\x01R\x82\x01a\0\xEDV[P`\0`@\x82\x86\x01\x01R`@`\x1F\x19`\x1F\x83\x01\x16\x85\x01\x01\x92PPP\x92\x91PPV[`\x01\x81\x81\x1C\x90\x82\x16\x80a\x01>W`\x7F\x82\x16\x91P[` \x82\x10\x81\x03a\x01^WcNH{q`\xE0\x1B`\0R`\"`\x04R`$`\0\xFD[P\x91\x90PV\xFE\xA2dipfsX\"\x12 \x12\xE7\\(!\xDF\x1F4\xBC\xEC\x9F\x1DV,\xAF\x02\x19\\\xFA@\xC6\x13\xF1\xC8\x04\xE9|Q\xA1\x7Fj\\dsolcC\0\x08\x15\x003";
    /// The deployed bytecode of the contract.
    pub static ZALUPA_DEPLOYED_BYTECODE: ::ethers::core::types::Bytes =
        ::ethers::core::types::Bytes::from_static(__DEPLOYED_BYTECODE);
    pub struct Zalupa<M>(::ethers::contract::Contract<M>);
    impl<M> ::core::clone::Clone for Zalupa<M> {
        fn clone(&self) -> Self { Self(::core::clone::Clone::clone(&self.0)) }
    }
    impl<M> ::core::ops::Deref for Zalupa<M> {
        type Target = ::ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target { &self.0 }
    }
    impl<M> ::core::ops::DerefMut for Zalupa<M> {
        fn deref_mut(&mut self) -> &mut Self::Target { &mut self.0 }
    }
    impl<M> ::core::fmt::Debug for Zalupa<M> {
        fn fmt(
            &self,
            f: &mut ::core::fmt::Formatter<'_>,
        ) -> ::core::fmt::Result {
            f.debug_tuple(::core::stringify!(Zalupa))
                .field(&self.address())
                .finish()
        }
    }
    impl<M: ::ethers::providers::Middleware> Zalupa<M> {
        /// Creates a new contract instance with the
        /// specified `ethers` client at `address`.
        /// The contract derefs to a `ethers::Contract`
        /// object.
        pub fn new<T: Into<::ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            Self(::ethers::contract::Contract::new(
                address.into(),
                ZALUPA_ABI.clone(),
                client,
            ))
        }
        /// Constructs the general purpose `Deployer`
        /// instance based on the provided constructor
        /// arguments and sends it. Returns a new
        /// instance of a deployer that returns an instance
        /// of this contract after sending the transaction
        ///
        /// Notes:
        /// - If there are no constructor arguments, you
        ///   should pass `()` as the argument.
        /// - The default poll duration is 7 seconds.
        /// - The default number of confirmations is 1
        ///   block.
        ///
        ///
        /// # Example
        ///
        /// Generate contract bindings with `abigen!` and
        /// deploy a new contract instance.
        ///
        /// *Note*: this requires a `bytecode` and `abi`
        /// object in the `greeter.json` artifact.
        ///
        /// ```ignore
        /// # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {
        ///     abigen!(Greeter, "../greeter.json");
        ///
        ///    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();
        ///    let msg = greeter_contract.greet().call().await.unwrap();
        /// # }
        /// ```
        pub fn deploy<T: ::ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::core::result::Result<
            ::ethers::contract::builders::ContractDeployer<M, Self>,
            ::ethers::contract::ContractError<M>,
        > {
            let factory = ::ethers::contract::ContractFactory::new(
                ZALUPA_ABI.clone(),
                ZALUPA_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ::ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        ///Calls the contract's `data` (0x73d4a13a)
        /// function
        pub fn data(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::ethers::core::types::Bytes,
        > {
            self.0
                .method_hash([115, 212, 161, 58], ())
                .expect("method not found (this should never happen)")
        }
    }
    impl<M: ::ethers::providers::Middleware>
        From<::ethers::contract::Contract<M>> for Zalupa<M>
    {
        fn from(contract: ::ethers::contract::Contract<M>) -> Self {
            Self::new(contract.address(), contract.client())
        }
    }
    ///Container type for all input parameters for the
    /// `data` function with signature `data()` and selector
    /// `0x73d4a13a`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(name = "data", abi = "data()")]
    pub struct DataCall;
    ///Container type for all return fields from the `data`
    /// function with signature `data()` and selector
    /// `0x73d4a13a`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    pub struct DataReturn(pub ::ethers::core::types::Bytes);
}
